<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PDF资源</title>
      <link href="/2023/10/09/2099-01-01-pdf-zi-yuan/"/>
      <url>/2023/10/09/2099-01-01-pdf-zi-yuan/</url>
      
        <content type="html"><![CDATA[<h3 id="1、Camunda工作流开发实战"><a href="#1、Camunda工作流开发实战" class="headerlink" title="1、Camunda工作流开发实战"></a>1、<a href="https://gitee.com/XXZXD/xxzxd/raw/master/pdf/Camunda%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98.pdf">Camunda工作流开发实战</a></h3><h3 id="2、算法基础"><a href="#2、算法基础" class="headerlink" title="2、算法基础"></a>2、<a href="https://gitee.com/XXZXD/xxzxd/raw/master/pdf/hello-algo-1.0.0b5-zh-java.pdf">算法基础</a></h3><h3 id="3、spring源码深度解析第二版高清"><a href="#3、spring源码深度解析第二版高清" class="headerlink" title="3、spring源码深度解析第二版高清"></a>3、<a href="https://gitee.com/XXZXD/xxzxd/raw/master/pdf/spring%E6%BA%90%E7%A0%81%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%E7%AC%AC%E4%BA%8C%E7%89%88%E9%AB%98%E6%B8%85.pdf">spring源码深度解析第二版高清</a></h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统核心知识点大梳理</title>
      <link href="/2023/10/09/2023-10-09-ji-suan-ji-ji-chu/"/>
      <url>/2023/10/09/2023-10-09-ji-suan-ji-ji-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者：月伴飞鱼，转载链接：<a href="https://mp.weixin.qq.com/s/G9ZqwEMxjrG5LbgYwM5ACQ">https://mp.weixin.qq.com/s/G9ZqwEMxjrG5LbgYwM5ACQ</a></p></blockquote><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-5ad16ae7-059f-44f1-8236-697b203bb72e.png"></p><h2 id="计算机结构"><a href="#计算机结构" class="headerlink" title="计算机结构"></a>计算机结构</h2><p>现代计算机模型是基于-<strong>冯诺依曼计算机模型</strong></p><p>计算机在运行时，先从内存中取出第一条指令，通过控制器的译码，按指令的要求，从存储器中取出数据进行指定的运算和逻辑操作等加工，然后再按地址把结果送到内存中去，接下来，再取出第二条指令，在控制器的指挥下完成规定操作，依此进行下去。直至遇到停止指令</p><p>程序与数据一样存贮，按程序编排的顺序，一步一步地取出指令，自动地完成指令规定的操作是计算机最基本的工作模型</p><p><strong>计算机五大核心组成部分</strong></p><p>控制器：是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，根据其要求进行控制，调度程序、数据、地址，协调计算机各部分工作及内存与外设的访问等。</p><p>运算器：运算器的功能是对数据进行各种算术运算和逻辑运算，即对数据进行加工处理。</p><p>存储器：存储器的功能是存储程序、数据和各种信号、命令等信息，并在需要时提供这些信息。</p><p>输入：输入设备是计算机的重要组成部分，输入设备与输出设备合你为外部设备，简称外设，输入设备的作用是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机。</p><blockquote><p>常见的输入设备有键盘、鼠标器、光电输入机、磁带机、磁盘机、光盘机等。</p></blockquote><p>输出：输出设备与输入设备同样是计算机的重要组成部分，它把外算机的中间结果或最后结果、机内的各种数据符号及文字或各种控制信号等信息输出出来，微机常用的输出设备有显示终端CRT、打印机、激光印字机、绘图仪及磁带、光盘机等。</p><p><strong>计算机结构分成以下 5 个部分：</strong></p><p>输入设备；输出设备；内存；中央处理器；总线。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-eff4b87b-9091-443c-988b-721e9fd59d2f.png"></p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>在冯诺依曼模型中，程序和数据被存储在一个被称作内存的线性排列存储区域。</p><p>存储的数据单位是一个二进制位，英文是 bit，最小的存储单位叫作字节，也就是 8 位，英文是 byte，每一个字节都对应一个内存地址。</p><p>内存地址由 0 开始编号，比如第 1 个地址是 0，第 2 个地址是 1， 然后自增排列，最后一个地址是内存中的字节数减 1。</p><p>我们通常说的内存都是随机存取器，也就是读取任何一个地址数据的速度是一样的，写入任何一个地址数据的速度也是一样的。</p><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>冯诺依曼模型中 CPU 负责控制和计算，为了方便计算较大的数值，CPU 每次可以计算多个字节的数据。</p><ul><li><p>如果 CPU 每次可以计算 4 个 byte，那么我们称作 32 位 CPU；</p></li><li><p>如果 CPU 每次可以计算 8 个 byte，那么我们称作 64 位 CPU。</p></li></ul><p>这里的 32 和 64，称作 CPU 的位宽。</p><p><strong>为什么 CPU 要这样设计呢？</strong> </p><p>因为一个 byte 最大的表示范围就是 0~255。</p><p>比如要计算 <code>20000*50</code>，就超出了byte 最大的表示范围了。</p><p>因此，CPU 需要支持多个 byte 一起计算，当然，CPU 位数越大，可以计算的数值就越大，但是在现实生活中不一定需要计算这么大的数值，比如说 32 位 CPU 能计算的最大整数是 4294967295，这已经非常大了。</p><p><strong>控制单元和逻辑运算单元</strong></p><p>CPU 中有一个控制单元专门负责控制 CPU 工作；还有逻辑运算单元专门负责计算。</p><p><strong>寄存器</strong></p><p>CPU 要进行计算，比如最简单的加和两个数字时，因为 CPU 离内存太远，所以需要一种离自己近的存储来存储将要被计算的数字。</p><p>这种存储就是寄存器，寄存器就在 CPU 里，控制单元和逻辑运算单元非常近，因此速度很快。</p><p>常见的寄存器种类：</p><ul><li>通用寄存器，用来存放需要进行运算的数据，比如需要进行加和运算的两个数据。</li><li>程序计数器，用来存储 CPU 要执行下一条指令所在的内存地址，注意不是存储了下一条要执行的指令，此时指令还在内存中，程序计数器只是存储了下一条指令的地址。</li><li>指令寄存器，用来存放程序计数器指向的指令，也就是指令本身，指令被执行完成之前，指令都存储在这里。</li></ul><h4 id="多级缓存"><a href="#多级缓存" class="headerlink" title="多级缓存"></a>多级缓存</h4><p>现代CPU为了提升执行效率，减少CPU与内存的交互(交互影响CPU效率)，一般在CPU上集成了多级缓存架构</p><p><strong>CPU缓存</strong>即高速缓冲存储器，是位于CPU与主内存间的一种容量较小但速度很高的存储器</p><p>由于CPU的速度远高于主内存，CPU直接从内存中存取数据要等待一定时间周期，Cache中保存着CPU刚用过或循环使用的一部分数据，当CPU再次使用该部分数据时可从Cache中直接调用，减少CPU的等待时间，提高了系统的效率，具体包括以下几种：</p><p><strong>L1-Cache</strong></p><p>L1- 缓存在 CPU 中，相比寄存器，虽然它的位置距离 CPU 核心更远，但造价更低，通常 L1-Cache 大小在几十 Kb 到几百 Kb 不等，读写速度在 2~4 个 CPU 时钟周期。</p><p><strong>L2-Cache</strong></p><p>L2- 缓存也在 CPU 中，位置比 L1- 缓存距离 CPU 核心更远，它的大小比 L1-Cache 更大，具体大小要看 CPU 型号，有 2M 的，也有更小或者更大的，速度在 10~20 个 CPU 周期。</p><p><strong>L3-Cache</strong></p><p>L3- 缓存同样在 CPU 中，位置比 L2- 缓存距离 CPU 核心更远，大小通常比 L2-Cache 更大，读写速度在 20~60 个 CPU 周期。</p><p>L3 缓存大小也是看型号的，比如 i9 CPU 有 512KB L1 Cache；有 2MB L2 Cache； 有16MB L3 Cache。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-214a4294-df48-4ed4-8f6a-15c93c02037d.png"></p><p>当 CPU 需要内存中某个数据的时候，如果寄存器中有这个数据，我们可以直接使用；如果寄存器中没有这个数据，我们就要先查询 L1 缓存；L1 中没有，再查询 L2 缓存；L2 中没有再查询 L3 缓存；L3 中没有，再去内存中拿。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-936b2476-4704-4928-bfd0-d7417d0f1ab8.png"></p><p><strong>总结：</strong></p><p>存储器存储空间大小：内存&gt;L3&gt;L2&gt;L1&gt;寄存器；</p><p>存储器速度快慢排序：寄存器&gt;L1&gt;L2&gt;L3&gt;内存；</p><h4 id="安全等级"><a href="#安全等级" class="headerlink" title="安全等级"></a>安全等级</h4><p><strong>CPU运行安全等级</strong></p><p>CPU有4个运行级别，分别为：</p><ul><li>ring0，ring1，ring2，ring3</li></ul><p>ring0只给操作系统用，ring3谁都能用。</p><p>ring0是指CPU的运行级别，是最高级别，ring1次之，ring2更次之…… </p><p>系统（内核）的代码运行在最高运行级别ring0上，可以使用特权指令，控制中断、修改页表、访问设备等等。</p><p>应用程序的代码运行在最低运行级别上ring3上，不能做受控操作。</p><p>如果要做，比如要访问磁盘，写文件，那就要通过执行系统调用（函数），执行系统调用的时候，CPU的运行级别会发生从ring3到ring0的切换，并跳转到系统调用对应的内核代码位置执行，这样内核就为你完成了设备访问，完成之后再从ring0返回ring3。</p><p>这个过程也称作用户态和内核态的切换。</p><h4 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h4><p>在CPU访问存储设备时，无论是存取数据抑或存取指令，都趋于聚集在一片连续的区域中，这就被称为局部性原理</p><p><strong>时间局部性（Temporal Locality）：</strong></p><p>如果一个信息项正在被访问，那么在近期它很可能还会被再次访问。</p><p>比如循环、递归、方法的反复调用等。</p><p><strong>空间局部性（Spatial Locality）：</strong></p><p>如果一个存储器的位置被引用，那么将来他附近的位置也会被引用。</p><p>比如顺序执行的代码、连续创建的两个对象、数组等。</p><h4 id="程序的执行过程"><a href="#程序的执行过程" class="headerlink" title="程序的执行过程"></a>程序的执行过程</h4><p>程序实际上是一条一条指令，所以程序的运行过程就是把每一条指令一步一步的执行起来，负责执行指令的就是 CPU 了。</p><p><strong>那 CPU 执行程序的过程如下：</strong></p><ul><li>第一步，CPU 读取程序计数器的值，这个值是指令的内存地址，然后 CPU 的控制单元操作地址总线指定需要访问的内存地址，接着通知内存设备准备数据，数据准备好后通过数据总线将指令数据传给 CPU，CPU 收到内存传来的数据后，将这个指令数据存入到指令寄存器。</li><li>第二步，CPU 分析指令寄存器中的指令，确定指令的类型和参数，如果是计算类型的指令，就把指令交给逻辑运算单元运算；如果是存储类型的指令，则交由控制单元执行；</li><li>第三步，CPU 执行完指令后，程序计数器的值自增，表示指向下一条指令。这个自增的大小，由 CPU 的位宽决定，比如 32 位的 CPU，指令是 4 个字节，需要 4 个内存地址存放，因此程序计数器的值会自增 4；</li></ul><p>简单总结一下就是，一个程序执行的时候，CPU 会根据程序计数器里的内存地址，从内存里面把需要执行的指令读取到指令寄存器里面执行，然后根据指令长度自增，开始顺序读取下一条指令。</p><p>CPU 从程序计数器读取指令、到执行、再到下一条指令，这个过程会不断循环，直到程序执行结束，这个不断循环的过程被称为 <strong>CPU 的指令周期</strong>。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-0e135ca2-26fa-4495-8a4b-3c9c05a4341e.png"></p><h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><p>CPU 和内存以及其他设备之间，也需要通信，因此我们用一种特殊的设备进行控制，就是总线。</p><ul><li>地址总线，用于指定 CPU 将要操作的内存地址；</li><li>数据总线，用于读写内存的数据；</li><li>控制总线，用于发送和接收信号，比如中断、设备复位等信号，CPU 收到信号后自然进行响应，这时也需要控制总线；</li></ul><p>当 CPU 要读写内存数据的时候，一般需要通过两个总线：</p><ul><li>首先要通过地址总线来指定内存的地址；</li><li>再通过数据总线来传输数据；</li></ul><h3 id="输入、输出设备"><a href="#输入、输出设备" class="headerlink" title="输入、输出设备"></a>输入、输出设备</h3><p>输入设备向计算机输入数据，计算机经过计算，将结果通过输出设备向外界传达。</p><p>如果输入设备、输出设备想要和 CPU 进行交互，比如说用户按键需要 CPU 响应，这时候就需要用到控制总线。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p><strong>中断的类型</strong></p><ul><li><p>按照中断的触发方分成同步中断和异步中断；</p></li><li><p>根据中断是否强制触发分成可屏蔽中断和不可屏蔽中断。</p></li></ul><p>中断可以由 CPU 指令直接触发，这种主动触发的中断，叫作同步中断。</p><blockquote><p>同步中断有几种情况。</p></blockquote><ul><li><p>比如系统调用，需要从用户态切换内核态，这种情况需要程序触发一个中断，叫作陷阱（Trap），中断触发后需要继续执行系统调用。</p></li><li><p>还有一种同步中断情况是错误（Fault），通常是因为检测到某种错误，需要触发一个中断，中断响应结束后，会重新执行触发错误的地方，比如后面我们要学习的缺页中断。</p></li><li><p>最后还有一种情况是程序的异常，这种情况和 Trap 类似，用于实现程序抛出的异常。</p></li></ul><p>另一部分中断不是由 CPU 直接触发，是因为需要响应外部的通知，比如响应键盘、鼠标等设备而触发的中断，这种中断我们称为异步中断。</p><p>CPU 通常都支持设置一个中断屏蔽位（一个寄存器），设置为 1 之后 CPU 暂时就不再响应中断。</p><p>对于键盘鼠标输入，比如陷阱、错误、异常等情况，会被临时屏蔽。</p><p>但是对于一些特别重要的中断，比如 CPU 故障导致的掉电中断，还是会正常触发。</p><p><strong>可以被屏蔽的中断我们称为可屏蔽中断，多数中断都是可屏蔽中断。</strong></p><h3 id="内核态和用户态"><a href="#内核态和用户态" class="headerlink" title="内核态和用户态"></a>内核态和用户态</h3><p><strong>什么是用户态和内核态</strong></p><p>Kernel 运行在超级权限模式下，所以拥有很高的权限。</p><p>按照权限管理的原则，多数应用程序应该运行在最小权限下。</p><p>因此，很多操作系统，将内存分成了两个区域：</p><ul><li><p>内核空间（Kernal Space），这个空间只有内核程序可以访问；</p></li><li><p>用户空间（User Space），这部分内存专门给应用程序使用。</p></li></ul><p>用户空间中的代码被限制了只能使用一个局部的内存空间，我们说这些程序在用户态 执行。</p><p>内核空间中的代码可以访问所有内存，我们称这些程序在内核态 执行。</p><blockquote><p>按照级别分：</p></blockquote><p>当程序运行在0级特权级上时，就可以称之为运行在内核态</p><p>当程序运行在3级特权级上时，就可以称之为运行在用户态</p><p>运行在用户态下的程序不能直接访问操作系统内核数据结构和程序。</p><p>当我们在系统中执行一个程序时，大部分时间是运行在用户态下的，在其需要操作系统帮助完成某些它没有权力和能力完成的工作时就会切换到内核态（比如操作硬件）</p><p><strong>这两种状态的主要差别</strong></p><p>处于用户态执行时，进程所能访问的内存空间和对象受到限制，其所处于占有的处理器是可被抢占的</p><p>处于内核态执行时，则能访问所有的内存空间和对象，且所占有的处理器是不允许被抢占的。</p><p><strong>为什么要有用户态和内核态</strong></p><p>由于需要限制不同的程序之间的访问能力，防止他们获取别的程序的内存数据，或者获取外围设备的数据，并发送到网络</p><p><strong>用户态与内核态的切换</strong></p><p>所有用户程序都是运行在用户态的，但是有时候程序确实需要做一些内核态的事情， 例如从硬盘读取数据，或者从键盘获取输入等，而唯一可以做这些事情的就是操作系统，所以此时程序就需要先操作系统请求以程序的名义来执行这些操作</p><p><strong>用户态和内核态的转换</strong></p><blockquote><p>系统调用</p></blockquote><p>用户态进程通过系统调用申请使用操作系统提供的服务程序完成工作，比如fork()实际上就是执行了一个创建新进程的系统调用</p><p>而系统调用的机制其核心还是使用了操作系统为用户特别开放的一个中断来实现，例如Linux的int 80h中断</p><p><strong>举例：</strong></p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-29b6f34f-a8b3-48ec-8e5c-aea1036ea16a.png"></p><p>如上图所示：内核程序执行在内核态（Kernal Mode），用户程序执行在用户态（User Mode）。</p><p>当发生系统调用时，用户态的程序发起系统调用，因为系统调用中牵扯特权指令，用户态程序权限不足，因此会中断执行，也就是 Trap（Trap 是一种中断）。</p><p>发生中断后，当前 CPU 执行的程序会中断，跳转到中断处理程序，内核程序开始执行，也就是开始处理系统调用。</p><p>内核处理完成后，主动触发 Trap，这样会再次发生中断，切换回用户态工作。</p><blockquote><p>异常</p></blockquote><p>当CPU在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常</p><blockquote><p>外围设备的中断</p></blockquote><p>当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号，这时CPU会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换</p><p>比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程：系统分配处理器时间资源的基本单元，是程序执行的最小单位</p><p>线程可以看做轻量级的进程，共享内存空间，每个线程都有自己独立的运行栈和程序计数器，线程之间切换的开销小。</p><p>在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）</p><p>进程可以通过 API 创建用户态的线程，也可以通过系统调用创建内核态的线程。</p><h3 id="用户态线程"><a href="#用户态线程" class="headerlink" title="用户态线程"></a>用户态线程</h3><p>用户态线程也称作用户级线程，操作系统内核并不知道它的存在，它完全是在用户空间中创建。</p><p>用户级线程有很多优势，比如：</p><ul><li><p>管理开销小：创建、销毁不需要系统调用。</p></li><li><p>切换成本低：用户空间程序可以自己维护，不需要走操作系统调度。</p></li></ul><p>但是这种线程也有很多的缺点：</p><ul><li><p>与内核协作成本高：比如这种线程完全是用户空间程序在管理，当它进行 I/O 的时候，无法利用到内核的优势，需要频繁进行用户态到内核态的切换。</p></li><li><p>线程间协作成本高：设想两个线程需要通信，通信需要 I/O，I/O 需要系统调用，因此用户态线程需要额外的系统调用成本。</p></li><li><p>无法利用多核优势：比如操作系统调度的仍然是这个线程所属的进程，所以无论每次一个进程有多少用户态的线程，都只能并发执行一个线程，因此一个进程的多个线程无法利用多核的优势。</p></li></ul><p>操作系统无法针对线程调度进行优化：当一个进程的一个用户态线程阻塞（Block）了，操作系统无法及时发现和处理阻塞问题，它不会更换执行其他线程，从而造成资源浪费。</p><h3 id="内核态线程"><a href="#内核态线程" class="headerlink" title="内核态线程"></a>内核态线程</h3><p>内核态线程也称作内核级线程（Kernel Level Thread），这种线程执行在内核态，可以通过系统调用创造一个内核级线程。</p><p>内核级线程有很多优势：</p><ul><li><p>可以利用多核 CPU 优势：内核拥有较高权限，因此可以在多个 CPU 核心上执行内核线程。</p></li><li><p>操作系统级优化：内核中的线程操作 I/O 不需要进行系统调用；一个内核线程阻塞了，可以立即让另一个执行。</p></li></ul><p>当然内核线程也有一些缺点：</p><ul><li><p>创建成本高：创建的时候需要系统调用，也就是切换到内核态。</p></li><li><p>扩展性差：由一个内核程序管理，不可能数量太多。</p></li><li><p>切换成本较高：切换的时候，也同样存在需要内核操作，需要切换内核态。</p></li></ul><p><strong>用户态线程和内核态线程之间的映射关系</strong></p><p>如果有一个用户态的进程，它下面有多个线程，如果这个进程想要执行下面的某一个线程，应该如何做呢？</p><blockquote><p>这时，比较常见的一种方式，就是将需要执行的程序，让一个内核线程去执行。</p></blockquote><p>毕竟，内核线程是真正的线程，因为它会分配到 CPU 的执行资源。</p><p>如果一个进程所有的线程都要自己调度，相当于在进程的主线程中实现分时算法调度每一个线程，也就是所有线程都用操作系统分配给主线程的时间片段执行。</p><blockquote><p>这种做法，相当于操作系统调度进程的主线程；进程的主线程进行二级调度，调度自己内部的线程。</p></blockquote><p>这样操作劣势非常明显，比如无法利用多核优势，每个线程调度分配到的时间较少，而且这种线程在阻塞场景下会直接交出整个进程的执行权限。</p><p>由此可见，用户态线程创建成本低，问题明显，不可以利用多核。</p><p>内核态线程，创建成本高，可以利用多核，切换速度慢。</p><p>因此通常我们会在内核中预先创建一些线程，并反复利用这些线程。</p><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-586071a1-3d5f-4873-963f-d47b8aeea594.png"></p><p>协程，是一种比线程更加轻量级的存在，协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）。</p><p>这样带来的好处就是性能得到了很大的提升，不会像线程切换那样消耗资源。</p><p><strong>子程序</strong></p><p>或者称为函数，在所有语言中都是层级调用，比如A调用B，B在执行过程中又调用了C，C执行完毕返回，B执行完毕返回，最后是A执行完毕。</p><p>所以子程序调用是通过栈实现的，一个线程就是执行一个子程序。</p><p>子程序调用总是一个入口，一次返回，调用顺序是明确的。</p><p><strong>协程的特点在于是一个线程执行，那和多线程比，协程有何优势？</strong></p><ul><li>极高的执行效率：因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显；</li><li>不需要多线程的锁机制：因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</li></ul><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。</p><p>如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>在系统中正在运行的一个应用程序；程序一旦运行就是进程；是资源分配的最小单位。</p><p>在操作系统中能同时运行多个进程；</p><p>开机的时候，磁盘的内核镜像被导入内存作为一个执行副本，成为内核进程。</p><p>进程可以分成<strong>用户态进程和内核态进程</strong>两类，用户态进程通常是应用程序的副本，内核态进程就是内核本身的进程。</p><p>如果用户态进程需要申请资源，比如内存，可以通过系统调用向内核申请。</p><p>每个进程都有独立的内存空间，存放代码和数据段等，程序之间的切换会有较大的开销；</p><p><strong>分时和调度</strong></p><p>每个进程在执行时都会获得操作系统分配的一个时间片段，如果超出这个时间，就会轮到下一个进程（线程）执行。</p><blockquote><p>注意，现代操作系统都是直接调度线程，不会调度进程。</p></blockquote><p><strong>分配时间片段</strong></p><p>如下图所示，进程 1 需要 2 个时间片段，进程 2 只有 1 个时间片段，进程 3 需要 3 个时间片段。</p><p>因此当进程 1 执行到一半时，会先挂起，然后进程 2 开始执行；进程 2 一次可以执行完，然后进程 3 开始执行，不过进程 3 一次执行不完，在执行了 1 个时间片段后，进程 1 开始执行；就这样如此周而复始，这个就是分时技术。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-606eb7bd-e9e1-457a-bf61-66b152c5ada5.png"></p><h3 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h3><p>用户想要创建一个进程，最直接的方法就是从命令行执行一个程序，或者双击打开一个应用，但对于程序员而言，显然需要更好的设计。</p><p>首先，应该有 API 打开应用，比如可以通过函数打开某个应用；</p><p>另一方面，如果程序员希望执行完一段代价昂贵的初始化过程后，将当前程序的状态复制好几份，变成一个个单独执行的进程，那么操作系统提供了 fork 指令。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-85a86f1b-eeff-401e-8bfe-19e5509e2a53.png"></p><p>也就是说，每次 fork 会多创造一个克隆的进程，这个克隆的进程，所有状态都和原来的进程一样，但是会有自己的地址空间。</p><p>如果要创造 2 个克隆进程，就要 fork 两次。</p><blockquote><p>那如果我就是想启动一个新的程序呢？</p></blockquote><p>操作系统提供了启动新程序的 API。</p><p>如果我就是想用一个新进程执行一小段程序，比如说每次服务端收到客户端的请求时，我都想用一个进程去处理这个请求。</p><p>如果是这种情况，建议你不要单独启动进程，而是使用线程。</p><p>因为进程的创建成本实在太高了，因此不建议用来做这样的事情：要创建条目、要分配内存，特别是还要在内存中形成一个个段，分成不同的区域。所以通常，我们更倾向于多创建线程。</p><p>不同程序语言会自己提供创建线程的 API，比如 Java 有 Thread 类；go 有 go-routine（注意不是协程，是线程）。</p><h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-5f202fa5-0922-4b41-b4f2-f8a9af37a176.png"></p><p><strong>创建状态</strong></p><p>进程由创建而产生，创建进程是一个非常复杂的过程，一般需要通过多个步骤才能完成：如首先由进程申请一个空白的进程控制块(PCB)，并向PCB中填写用于控制和管理进程的信息；然后为该进程分配运行时所必须的资源；最后，把该进程转入就绪状态并插入到就绪队列中</p><p><strong>就绪状态</strong></p><p>这是指进程已经准备好运行的状态，即进程已分配到除CPU以外所有的必要资源后，只要再获得CPU，便可立即执行，如果系统中有许多处于就绪状态的进程，通常将它们按照一定的策略排成一个队列，该队列称为就绪队列，有执行资格，没有执行权的进程</p><p><strong>运行状态</strong></p><p>这里指进程已经获取CPU，其进程处于正在执行的状态。对任何一个时刻而言，在单处理机的系统中，只有一个进程处于执行状态而在多处理机系统中，有多个进程处于执行状态，既有执行资格，又有执行权的进程</p><p><strong>阻塞状态</strong></p><p>这里是指正在执行的进程由于发生某事件（如I/O请求、申请缓冲区失败等）暂时无法继续执行的状态，即进程执行受到阻塞，此时引起进程调度，操作系统把处理机分配给另外一个就绪的进程，而让受阻的进程处于暂停的状态，一般将这个暂停状态称为阻塞状态</p><p><strong>终止状态</strong></p><h3 id="进程间通信IPC"><a href="#进程间通信IPC" class="headerlink" title="进程间通信IPC"></a>进程间通信IPC</h3><p>每个进程各自有不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核，在内核中开辟一块缓冲区，进程1把数据从用户空间拷到内核缓冲区，进程2再从内核缓冲区把数据读走，内核提供的这种机制称为进程间通信</p><p><strong>管道/匿名管道</strong></p><p>管道是半双工的，数据只能向一个方向流动；需要双方通信时，需要建立起两个管道。</p><ul><li><p>只能用于父子进程或者兄弟进程之间(具有亲缘关系的进程);</p></li><li><p>单独构成一种独立的文件系统：管道对于管道两端的进程而言，就是一个文件，但它不是普通的文件，它不属于某种文件系统，而是自立门户，单独构成一种文件系统，并且只存在与内存中。</p></li><li><p>数据的读出和写入：一个进程向管道中写的内容被管道另一端的进程读出，写入的内容每次都添加在管道缓冲区的末尾，并且每次都是从缓冲区的头部读出数据。</p></li></ul><p><strong>有名管道(FIFO)</strong></p><p>匿名管道，由于没有名字，只能用于亲缘关系的进程间通信。</p><p>为了克服这个缺点，提出了有名管道(FIFO)。</p><p>有名管道不同于匿名管道之处在于它提供了一个路径名与之关联，以有名管道的文件形式存在于文件系统中，这样，即使与有名管道的创建进程不存在亲缘关系的进程，只要可以访问该路径，就能够彼此通过有名管道相互通信，因此，通过有名管道不相关的进程也能交换数据。</p><p><strong>信号</strong></p><p>信号是Linux系统中用于进程间互相通信或者操作的一种机制，信号可以在任何时候发给某一进程，而无需知道该进程的状态。</p><p>如果该进程当前并未处于执行状态，则该信号就有内核保存起来，知道该进程回复执行并传递给它为止。</p><p>如果一个信号被进程设置为阻塞，则该信号的传递被延迟，直到其阻塞被取消是才被传递给进程。</p><p><strong>消息队列</strong></p><p>消息队列是存放在内核中的消息链表，每个消息队列由消息队列标识符表示。</p><p>与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即操作系统重启)或者显示地删除一个消息队列时，该消息队列才会被真正的删除。</p><p>另外与管道不同的是，消息队列在某个进程往一个队列写入消息之前，并不需要另外某个进程在该队列上等待消息的到达</p><p><strong>共享内存</strong></p><p>使得多个进程可以直接读写同一块内存空间，是最快的可用IPC形式，是针对其他通信机制运行效率较低而设计的。</p><p>为了在多个进程间交换信息，内核专门留出了一块内存区，可以由需要访问的进程将其映射到自己的私有地址空间，进程就可以直接读写这一块内存而不需要进行数据的拷贝，从而大大提高效率。</p><p>由于多个进程共享一段内存，因此需要依靠某种同步机制（如信号量）来达到进程间的同步及互斥。</p><p>共享内存示意图：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-8644f82a-eda6-4abf-b86a-13c02e7af5fd.png"></p><p>一旦这样的内存映射到共享它的进程的地址空间，这些进程间数据传递不再涉及到内核，换句话说是进程不再通过执行进入内核的系统调用来传递彼此的数据。</p><p><strong>信号量</strong></p><p>信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。</p><p>为了获得共享资源，进程需要执行下列操作：</p><ol><li><p>创建一个信号量：这要求调用者指定初始值，对于二值信号量来说，它通常是1，也可是0。 </p></li><li><p>等待一个信号量：该操作会测试这个信号量的值，如果小于0，就阻塞，也称为P操作。 </p></li><li><p>挂出一个信号量：该操作将信号量的值加1，也称为V操作。</p></li></ol><p><strong>套接字(Socket)</strong></p><p>套接字是一种通信机制，凭借这种机制，客户/服务器（即要进行通信的进程）系统的开发工作既可以在本地单机上进行，也可以跨网络进行。也就是说它可以让不在同一台计算机但通过网络连接计算机上的进程进行通信。</p><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><p>信号是进程间通信机制中唯一的异步通信机制，可以看作是异步通知，通知接收信号的进程有哪些事情发生了。</p><p>也可以简单理解为信号是某种形式上的软中断</p><p>可运行<code>kill -l</code>查看Linux支持的信号列表：</p><pre class="line-numbers language-none"><code class="language-none">kill -l 1) SIGHUP   2) SIGINT   3) SIGQUIT  4) SIGILL   5) SIGTRAP 6) SIGABRT  7) SIGBUS   8) SIGFPE   9) SIGKILL 10) SIGUSR111) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP21) SIGTTIN 22) SIGTTOU 23) SIGURG  24) SIGXCPU 25) SIGXFSZ26) SIGVTALRM 27) SIGPROF 28) SIGWINCH  29) SIGIO 30) SIGPWR31) SIGSYS  34) SIGRTMIN  35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+338) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+843) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+1348) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-1253) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-758) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-263) SIGRTMAX-1  64) SIGRTMAX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>几个常用的信号：</strong></p><table><thead><tr><th>信号</th><th>描述</th></tr></thead><tbody><tr><td>SIGHUP</td><td>当用户退出终端时，由该终端开启的所有进程都会接收到这个信号，默认动作为终止进程。</td></tr><tr><td>SIGINT</td><td>程序终止(interrupt)信号, 在用户键入INTR字符(通常是<code>Ctrl+C</code>)时发出，用于通知前台进程组终止进程。</td></tr><tr><td>SIGQUIT</td><td>和<code>SIGINT</code>类似, 但由QUIT字符(通常是<code>Ctrl+\</code>)来控制，进程在因收到<code>SIGQUIT</code>退出时会产生<code>core</code>文件, 在这个意义上类似于一个程序错误信号。</td></tr><tr><td>SIGKILL</td><td>用来立即结束程序的运行，本信号不能被阻塞、处理和忽略。</td></tr><tr><td>SIGTERM</td><td>程序结束(terminate)信号, 与<code>SIGKILL</code>不同的是该信号可以被阻塞和处理。通常用来要求程序自己正常退出。</td></tr><tr><td>SIGSTOP</td><td>停止(stopped)进程的执行. 注意它和terminate以及interrupt的区别:该进程还未结束, 只是暂停执行，本信号不能被阻塞, 处理或忽略</td></tr></tbody></table><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><p><strong>临界区</strong></p><p>通过对多线程的串行化来访问公共资源或一段代码，速度快，适合控制数据访问</p><p>优点：保证在某一时刻只有一个线程能访问数据的简便办法</p><p>缺点：虽然临界区同步速度很快，但却只能用来同步本进程内的线程，而不可用来同步多个进程中的线程</p><p><strong>互斥量</strong></p><p>为协调共同对一个共享资源的单独访问而设计的</p><p>互斥量跟临界区很相似，比临界区复杂，互斥对象只有一个，只有拥有互斥对象的线程才具有访问资源的权限</p><p>优点：使用互斥不仅仅能够在同一应用程序不同线程中实现资源的安全共享，而且可以在不同应用程序的线程之间实现对资源的安全共享</p><p><strong>信号量</strong></p><p>为控制一个具有有限数量用户资源而设计，它允许多个线程在同一时刻访问同一资源，但是需要限制在同一时刻访问此资源的最大线程数目，互斥量是信号量的一种特殊情况，当信号量的最大资源数=1就是互斥量了</p><p>信号量（Semaphore）是一个整型变量，可以对其执行 down 和 up 操作，也就是常见的 P 和 V 操作</p><ul><li><strong>down</strong> : 如果信号量大于 0 ，执行 -1 操作；如果信号量等于 0，进程睡眠，等待信号量大于 0；</li><li><strong>up</strong> ：对信号量执行 +1 操作，唤醒睡眠的进程让其完成 down 操作。</li></ul><p>down 和 up 操作需要被设计成原语，不可分割，通常的做法是在执行这些操作的时候屏蔽中断。</p><p>如果信号量的取值只能为 0 或者 1，那么就成为了 <strong>互斥量（Mutex）</strong> ，0 表示临界区已经加锁，1 表示临界区解锁。</p><p><strong>事件</strong></p><p>用来通知线程有一些事件已发生，从而启动后继任务的开始</p><p>优点：事件对象通过通知操作的方式来保持线程的同步，并且可以实现不同进程中的线程同步操作</p><p><strong>管程</strong></p><p>管程有一个重要特性：在一个时刻只能有一个进程使用管程。</p><p>进程在无法继续执行的时候不能一直占用管程，否则其它进程永远不能使用管程。</p><p>管程引入了 <strong>条件变量</strong> 以及相关的操作：<strong>wait()</strong> 和 <strong>signal()</strong> 来实现同步操作。</p><p>对条件变量执行 wait() 操作会导致调用进程阻塞，把管程让出来给另一个进程持有。</p><p>signal() 操作用于唤醒被阻塞的进程。</p><p>使用信号量机制实现的生产者消费者问题需要客户端代码做很多控制，而管程把控制的代码独立出来，不仅不容易出错，也使得客户端代码调用更容易。</p><h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>对于单核单线程CPU而言，在某一时刻只能执行一条CPU指令。</p><p>上下文切换(Context Switch)是一种将CPU资源从一个进程分配给另一个进程的机制。</p><p>从用户角度看，计算机能够并行运行多个进程，这恰恰是操作系统通过快速上下文切换造成的结果。</p><p><strong>在切换的过程中，操作系统需要先存储当前进程的状态(包括内存空间的指针，当前执行完的指令等等)，再读入下一个进程的状态，然后执行此进程。</strong></p><h3 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h3><p><strong>先来先服务调度算法</strong></p><p>该算法既可用于作业调度，也可用于进程调度，当在作业调度中采用该算法时，每次调度都是从后备作业队列中选择一个或多个最先进入该队列的作业，将它们调入内存，为它们分配资源、创建进程，然后放入就绪队列</p><p><strong>短作业优先调度算法</strong></p><p>从后备队列中选择一个或若干个估计运行时间最短的作业，将它们调入内存运行</p><p><strong>时间片轮转法</strong></p><p>每次调度时，把CPU分配给队首进程，并令其执行一个时间片，时间片的大小从几ms到几百ms，当执行的时间片用完时，由一个计时器发出时钟中断请求，调度程序便据此信号来停止该进程的执行，并将它送往就绪队列的末尾</p><p>然后，再把处理机分配给就绪队列中新的队首进程，同时也让它执行一个时间片，这样就可以保证就绪队列中的所有进程在一给定的时间内均能获得一时间片的处理机执行时间</p><p><strong>最短剩余时间优先</strong></p><p>最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度，当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。</p><p>如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。</p><p><strong>多级反馈队列调度算法</strong>：</p><p>前面介绍的几种进程调度的算法都有一定的局限性，如<strong>短进程优先的调度算法，仅照顾了短进程而忽略了长进程</strong>，多级反馈队列调度算法既能使高优先级的作业得到响应又能使短作业迅速完成，因而它是目前<strong>被公认的一种较好的进程调度算法</strong>，UNIX 操作系统采取的便是这种调度算法。</p><blockquote><p>举例：</p></blockquote><p>多级队列，就是多个队列执行调度，先考虑最简单的两级模型</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-bcc4bc31-75b9-43f2-9f16-7a0e419e5615.png"></p><p>上图中设计了两个优先级不同的队列，从下到上优先级上升，上层队列调度紧急任务，下层队列调度普通任务。</p><p>只要上层队列有任务，下层队列就会让出执行权限。</p><p>低优先级队列可以考虑抢占 + 优先级队列的方式实现，这样每次执行一个时间片段就可以判断一下高优先级的队列中是否有任务。</p><p>高优先级队列可以考虑用非抢占（每个任务执行完才执行下一个）+ 优先级队列实现，这样紧急任务优先级有个区分，如果遇到十万火急的情况，就可以优先处理这个任务。</p><p>上面这个模型虽然解决了任务间的优先级问题，但是还是没有解决短任务先行的问题，可以考虑再增加一些队列，让级别更多。</p><blockquote><p>比如下图这个模型：</p></blockquote><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-85f35508-c541-483b-9f34-a54a0c619fff.png"></p><p>紧急任务仍然走高优队列，非抢占执行。</p><p>普通任务先放到优先级仅次于高优任务的队列中，并且只分配很小的时间片；如果没有执行完成，说明任务不是很短，就将任务下调一层。</p><p>下面一层，最低优先级的队列中时间片很大，长任务就有更大的时间片可以用。</p><p>通过这种方式，短任务会在更高优先级的队列中执行完成，长任务优先级会下调，也就类似实现了最短作业优先的问题。</p><p>实际操作中，可以有 n 层，一层层把大任务筛选出来，最长的任务，放到最闲的时间去执行，要知道，大部分时间 CPU 不是满负荷的。</p><p><strong>优先级调度</strong> </p><p>为每个流程分配优先级，首先执行具有最高优先级的进程，依此类推，具有相同优先级的进程以 FCFS 方式执行，可以根据内存要求，时间要求或任何其他资源要求来确定优先级。</p><h3 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h3><p>守护进程是脱离于终端并且在后台运行的进程，脱离终端是为了避免在执行的过程中的信息在终端上显示，并且进程也不会被任何终端所产生的终端信息所打断。</p><p>守护进程一般的生命周期是系统启动到系统停止运行。</p><p>Linux系统中有很多的守护进程，最典型的就是我们经常看到的服务进程。</p><p>当然，我们也经常会利用守护进程来完成很多的系统或者自动化任务。</p><h3 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h3><p>父进程早于子进程退出时候子进程还在运行，子进程会成为孤儿进程，Linux会对孤儿进程的处理，把孤儿进程的父进程设为进程号为1的进程，也就是由init进程来托管，init进程负责子进程退出后的善后清理工作</p><h3 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h3><p>子进程执行完毕时发现父进程未退出，会向父进程发送 SIGCHLD 信号，但父进程没有使用 wait/waitpid 或其他方式处理 SIGCHLD 信号来回收子进程，子进程变成为了对系统有害的僵尸进程</p><p>子进程退出后留下的进程信息没有被收集，会导致占用的进程控制块PCB不被释放，形成僵尸进程，进程已经死去，但是进程资源没有被释放掉</p><p><strong>问题及危害</strong></p><p>如果系统中存在大量的僵尸进程，他们的进程号就会一直被占用，但是系统所能使用的进程号是有限的，系统将因为没有可用的进程号而导致系统不能产生新的进程</p><p>任何一个子进程(init除外)在exit()之后，并非马上就消失掉，而是留下一个称为僵尸进程(Zombie)的数据结构，等待父进程处理，这是每个子进程在结束时都要经过的阶段，如果子进程在exit()之后，父进程没有来得及处理，这时用ps命令就能看到子进程的状态是Z。</p><p>如果父进程能及时处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态</p><p>产生僵尸进程的元凶其实是他们的父进程，杀掉父进程，僵尸进程就变为了孤儿进程，便可以转交给 init 进程回收处理</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p><strong>产生原因</strong></p><p>系统资源的竞争：系统资源的竞争导致系统资源不足，以及资源分配不当，导致死锁。</p><p>进程运行推进顺序不合适：进程在运行过程中，请求和释放资源的顺序不当，会导致死锁。</p><p><strong>发生死锁的四个必要条件</strong></p><p>互斥条件：一个资源每次只能被一个进程使用，即在一段时间内某资源仅为一个进程所占有，此时若有其他进程请求该资源，则请求进程只能等待</p><p>请求与保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求时，该资源已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放</p><p>不可剥夺条件:进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能由获得该资源的进程自己来释放（只能是主动释放)</p><p>循环等待条件: 若干进程间形成首尾相接循环等待资源的关系</p><p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁</p><p><strong>只要我们破坏其中一个，就可以成功避免死锁的发生</strong></p><p>其中，互斥这个条件我们没有办法破坏，因为我们用锁为的就是互斥</p><ol><li>对于占用且等待这个条件，我们可以一次性申请所有的资源，这样就不存在等待了。</li><li>对于不可抢占这个条件，占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源，这样不可抢占这个条件就破坏掉了。</li><li>对于循环等待这个条件，可以靠按序申请资源来预防，所谓按序申请，是指资源是有线性顺序的，申请的时候可以先申请资源序号小的，再申请资源序号大的，这样线性化后自然就不存在循环了。</li></ol><p><strong>处理方法</strong></p><p>主要有以下四种方法：</p><ul><li>鸵鸟策略</li><li>死锁检测与死锁恢复</li><li>死锁预防，破坏4个必要条件</li><li>死锁避免，银行家算法</li></ul><p><strong>鸵鸟策略</strong></p><p>把头埋在沙子里，假装根本没发生问题。</p><p>因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。</p><p>当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。</p><p><strong>死锁检测</strong></p><p>不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。</p><ol><li><p>每种类型一个资源的死锁检测</p></li><li><p>每种类型多个资源的死锁检测</p></li></ol><p><strong>死锁恢复</strong></p><ul><li>利用抢占恢复</li><li>利用回滚恢复</li><li>通过杀死进程恢复</li></ul><h4 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h4><p>五个哲学家围着一张圆桌，每个哲学家面前放着食物。</p><p>哲学家的生活有两种交替活动：吃饭以及思考。</p><p>当一个哲学家吃饭时，需要先拿起自己左右两边的两根筷子，并且一次只能拿起一根筷子。</p><p>如果所有哲学家同时拿起左手边的筷子，那么所有哲学家都在等待其它哲学家吃完并释放自己手中的筷子，导致死锁。</p><p>哲学家进餐问题可看作是并发进程并发执行时处理共享资源的一个有代表性的问题。</p><p><strong>为了防止死锁的发生，可以设置两个条件：</strong></p><ul><li>必须同时拿起左右两根筷子；</li><li>只有在两个邻居都没有进餐的情况下才允许进餐。</li></ul><h4 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h4><p>银行家算法的命名是它可以用了银行系统，当不能满足所有客户的需求时，银行绝不会分配其资金。</p><p>当新进程进入系统时，它必须说明其可能需要的每种类型资源实例的最大数量这一数量不可以超过系统资源的总和。</p><p>当用户申请一组资源时，系统必须确定这些资源的分配是否处于安全状态，如何安全，则分配，如果不安全，那么进程必须等待指导某个其他进程释放足够资源为止。</p><p><strong>安全状态</strong></p><p>在避免死锁的方法中，允许进程动态地申请资源，但系统在进行资源分配之前，应先计算此次资源分配的安全性，若此次分配不会导致系统进入不安全状态，则将资源分配给进程；否则，令进程等待</p><p>因此，避免死锁的实质在于：系统在进行资源分配时，如何使系统不进入不安全状态</p><h3 id="Fork函数"><a href="#Fork函数" class="headerlink" title="Fork函数"></a>Fork函数</h3><p><code>fork</code>函数用于创建一个与当前进程一样的子进程，所创建的子进程将复制父进程的代码段、数据段、BSS段、堆、栈等所有用户空间信息，在内核中操作系统会重新为其申请一个子进程执行的位置。</p><p><code>fork</code>系统调用会通过复制一个现有进程来创建一个全新的进程，新进程被存放在一个叫做任务队列的双向循环链表中，链表中的每一项都是类型为<code>task_struct</code>的进程控制块<code>PCB</code>的结构。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-ee3d0c6b-9d93-4f9d-95f3-86e7d195a8f8.png"></p><p>每个进程都由独特换不相同的进程标识符（PID），通过<code>getpid()</code>函数可获取当前进程的进程标识符，通过<code>getppid()</code>函数可获得父进程的进程标识符。</p><p>一个现有的进程可通过调用<code>fork</code>函数创建一个新进程，由<code>fork</code>创建的新进程称为子进程<code>child process</code>，<code>fork</code>函数被调用一次但返回两次，两次返回的唯一区别是子进程中返回0而父进程中返回子进程ID。</p><p><strong>为什么<code>fork</code>会返回两次呢？</strong></p><p>因为复制时会复制父进程的堆栈段，所以两个进程都停留在<code>fork</code>函数中等待返回，因此会返回两次，一个是在父进程中返回，一次是在子进程中返回，两次返回值是不一样的。</p><ul><li>在父进程中将返回新建子进程的进程ID</li><li>在子进程中将返回0</li><li>若出现错误则返回一个负数</li></ul><p>因此可以通过<code>fork</code>的返回值来判断当前进程是子进程还是父进程。</p><p><strong>fork执行执行流程</strong></p><p>当进程调用<code>fork</code>后控制转入内核，内核将会做4件事儿：</p><ol><li>分配新的内存块和内核数据结构给子进程</li><li>将父进程部分数据结构内容（数据空间、堆栈等）拷贝到子进程</li><li>添加子进程到系统进程列表中</li><li><code>fork</code>返回开始调度器调度</li></ol><p><strong>为什么<code>pid</code>在父子进程中不同呢？</strong></p><p>其实就相当于链表，进程形成了链表，父进程的<code>pid</code>指向子进程的进程ID，因此子进程没有子进程，所以PID为0，这里的<code>pid</code>相当于链表中的指针。</p><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><h3 id="磁盘调度算法"><a href="#磁盘调度算法" class="headerlink" title="磁盘调度算法"></a>磁盘调度算法</h3><p>读写一个磁盘块的时间的影响因素有：</p><ul><li>旋转时间</li><li>寻道时间实际的数据传输时间</li></ul><p>其中，寻道时间最长，因此磁盘调度的主要目标是使磁盘的平均寻道时间最短。</p><blockquote><p>先来先服务 FCFS, First Come First Served</p></blockquote><p>按照磁盘请求的顺序进行调度，优点是公平和简单，缺点也很明显，因为未对寻道做任何优化，使平均寻道时间可能较长。</p><blockquote><p>最短寻道时间优先，SSTF, Shortest Seek Time First</p></blockquote><p>优先调度与当前磁头所在磁道距离最近的磁道， 虽然平均寻道时间比较低，但是不够公平，如果新到达的磁道请求总是比一个在等待的磁道请求近，那么在等待的 磁道请求会一直等待下去，也就是出现饥饿现象，具体来说，两边的磁道请求更容易出现饥饿现象。</p><blockquote><p>电梯算法，SCAN</p></blockquote><p>电梯总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向， 电梯算法（扫描算法）和电梯的运行过程类似，总是按一个方向来进行磁盘调度，直到该方向上没有未完成的磁盘 请求，然后改变方向，因为考虑了移动方向，因此所有的磁盘请求都会被满足，解决了 SSTF 的饥饿问题</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p><strong>逻辑地址和物理地址</strong></p><p>我们编程一般只有可能和逻辑地址打交道，比如在 C 语言中，指针里面存储的数值就可以理解成为内存里的一个地址，这个地址也就是我们说的逻辑地址，逻辑地址由操作系统决定。</p><p>物理地址指的是真实物理内存中地址，更具体一点来说就是内存地址寄存器中的地址，物理地址是内存单元真正的地址。</p><p>编译时只需确定变量x存放的相对地址是100 ( 也就是说相对于进程在内存中的起始地址而言的地址)。</p><p>CPU想要找到x在内存中的实际存放位置，只需要用进程的起始地址+100即可。 </p><p>相对地址又称逻辑地址，绝对地址又称物理地址。</p><p><strong>内存管理有哪几种方式</strong></p><ol><li><strong>块式管理</strong>：将内存分为几个固定大小的块，每个块中只包含一个进程，如果程序运行需要内存的话，操作系统就分配给它一块，如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了，这些在每个块中未被利用的空间，我们称之为碎片。</li><li><strong>页式管理</strong>：把主存分为大小相等且固定的一页一页的形式，页较小，相对相比于块式管理的划分力度更大，提高了内存利用率，减少了碎片，页式管理通过页表对应逻辑地址和物理地址。</li></ol><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-2d1e6109-5c99-4ab8-b9b4-00c851386d65.png"></p><ol><li><strong>段式管理</strong>： 页式管理虽然提高了内存利用率，但是页式管理其中的页实际并无任何实际意义， 段式管理把主存分为一段段的，每一段的空间又要比一页的空间小很多 ，段式管理通过段表对应逻辑地址和物理地址。</li><li><strong>段页式管理机制：</strong>段页式管理机制结合了段式管理和页式管理的优点，简单来说段页式管理机制就是把主存先分成若干段，每个段又分成若干页，也就是说<strong>段页式管理机制</strong>中段与段之间以及段的内部的都是离散的。</li></ol><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-06d985c8-7c5a-46eb-8f04-e7a010a90f40.png"></p><h3 id="虚拟地址"><a href="#虚拟地址" class="headerlink" title="虚拟地址"></a>虚拟地址</h3><p>现代处理器使用的是一种称为**虚拟寻址(Virtual Addressing)**的寻址方式</p><p><strong>使用虚拟寻址，CPU 需要将虚拟地址翻译成物理地址，这样才能访问到真实的物理内存。</strong></p><p>实际上完成虚拟地址转换为物理地址转换的硬件是 CPU 中含有一个被称为<strong>内存管理单元（Memory Management Unit, MMU）</strong>的硬件</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-ad8515bb-ce0c-43b3-b9ff-9d4d5fa0994e.png"></p><p><strong>为什么要有虚拟地址空间</strong></p><p>没有虚拟地址空间的时候，<strong>程序都是直接访问和操作的都是物理内存</strong>。</p><p>但是这样有什么问题？</p><ol><li>用户程序可以访问任意内存，寻址内存的每个字节，这样就很容易破坏操作系统，造成操作系统崩溃。</li><li>想要同时运行多个程序特别困难，比如你想同时运行一个微信和一个 QQ 音乐都不行，为什么呢？举个简单的例子：微信在运行的时候给内存地址 1xxx 赋值后，QQ 音乐也同样给内存地址 1xxx 赋值，那么 QQ 音乐对内存的赋值就会覆盖微信之前所赋的值，这就造成了微信这个程序就会崩溃。</li></ol><p><strong>通过虚拟地址访问内存有以下优势：</strong></p><ul><li>程序可以使用一系列相邻的虚拟地址来访问物理内存中不相邻的大内存缓冲区。</li><li>程序可以使用一系列虚拟地址来访问大于可用物理内存的内存缓冲区。</li><li>不同进程使用的虚拟地址彼此隔离，一个进程中的代码无法更改正在由另一进程或操作系统使用的物理内存。</li></ul><p><strong>MMU如何把虚拟地址翻译成物理地址的</strong></p><p>对于每个程序，内存管理单元MMU都为其保存一个页表，该页表中存放的是虚拟页面到物理页面的映射。</p><p>每当为一个虚拟页面寻找到一个物理页面之后，就在页表里增加一条记录来保留该映射关系，当然，随着虚拟页面进出物理内存，页表的内容也会不断更新变化。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-169790fd-8ef1-400f-a4a4-e291a729d2cb.png"></p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>很多时候我们使用点开了很多占内存的软件，这些软件占用的内存可能已经远远超出了我们电脑本身具有的物理内存</p><p>通过 <strong>虚拟内存</strong> 可以让程序可以拥有超过系统物理内存大小的可用内存空间。</p><p>另外，虚拟内存为每个进程提供了一个一致的、私有的地址空间，它让每个进程产生了一种自己在独享主存的错觉（每个进程拥有一片连续完整的内存空间），这样会更加有效地管理内存并减少出错。</p><p><strong>虚拟内存</strong>是计算机系统内存管理的一种技术，我们可以手动设置自己电脑的虚拟内存</p><p><strong>虚拟内存的重要意义是它定义了一个连续的虚拟地址空间</strong>，并且 <strong>把内存扩展到硬盘空间</strong></p><p><strong>虚拟内存的实现有以下三种方式：</strong></p><ol><li><strong>请求分页存储管理</strong> ：请求分页是目前最常用的一种实现虚拟存储器的方法，请求分页存储管理系统中，在作业开始运行之前，仅装入当前要执行的部分段即可运行，假如在作业运行的过程中发现要访问的页面不在内存，则由处理器通知操作系统按照对应的页面置换算法将相应的页面调入到主存，同时操作系统也可以将暂时不用的页面置换到外存中。</li><li><strong>请求分段存储管理</strong> ：请求分段储存管理方式就如同请求分页储存管理方式一样，在作业开始运行之前，仅装入当前要执行的部分段即可运行；在执行过程中，可使用请求调入中断动态装入要访问但又不在内存的程序段；当内存空间已满，而又需要装入新的段时，根据置换功能适当调出某个段，以便腾出空间而装入新的段。</li><li><strong>请求段页式存储管理</strong></li></ol><p>不管是上面那种实现方式，我们一般都需要：</p><blockquote><p>一定容量的内存和外存：在载入程序的时候，只需要将程序的一部分装入内存，而将其他部分留在外存，然后程序就可以执行了；</p></blockquote><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-d2104a4e-cb28-4d90-b8f1-92cb15b0bb31.png"></p><h3 id="缺页中断"><a href="#缺页中断" class="headerlink" title="缺页中断"></a>缺页中断</h3><p>如果<strong>需执行的指令或访问的数据尚未在内存</strong>（称为缺页或缺段），则由处理器通知操作系统将相应的页面或段<strong>调入到内存</strong>，然后继续执行程序；</p><p>在分页系统中，一个虚拟页面既有可能在物理内存，也有可能保存在磁盘上。</p><p>如果CPU发出的虚拟地址对应的页面不在物理内存，就将产生一个缺页中断，而缺页中断服务程序负责将需要的虚拟页面找到并加载到内存。</p><p>缺页中断的处理步骤如下，省略了中间很多的步骤，只保留最核心的几个步骤：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-5101231b-d8da-418e-b60c-574bcfa8b579.png"></p><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><p>当发生缺页中断时，如果当前内存中并没有空闲的页面，操作系统就必须在内存选择一个页面将其移出内存，以便为即将调入的页面让出空间。</p><p>用来选择淘汰哪一页的规则叫做页面置换算法，我们可以把页面置换算法看成是淘汰页面的规则</p><ul><li><p><strong>OPT 页面置换算法（最佳页面置换算法）</strong> ：该置换算法所选择的被淘汰页面将是以后永不使用的，或者是在最长时间内不再被访问的页面，这样可以保证获得最低的缺页率，但由于人们目前无法预知进程在内存下的若千页面中哪个是未来最长时间内不再被访问的，因而该算法无法实现，一般作为衡量其他置换算法的方法。</p></li><li><p><strong>FIFO（First In First Out） 页面置换算法（先进先出页面置换算法）</strong> : 总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。</p></li><li><p><strong>LRU （Least Currently Used）页面置换算法（最近最久未使用页面置换算法）</strong> ：LRU算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 T，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。</p></li><li><p><strong>LFU （Least Frequently Used）页面置换算法（最少使用页面置换算法）</strong> : 该置换算法选择在之前时期使用最少的页面作为淘汰页。</p></li></ul><h3 id="局部性原理-1"><a href="#局部性原理-1" class="headerlink" title="局部性原理"></a>局部性原理</h3><p>局部性原理是虚拟内存技术的基础，正是因为程序运行具有局部性原理，才可以只装入部分程序到内存就开始运行。</p><p>局部性原理表现在以下两个方面：</p><ol><li><strong>时间局部性</strong> ：如果程序中的某条指令一旦执行，不久以后该指令可能再次执行；如果某数据被访问过，不久以后该数据可能再次被访问，产生时间局部性的典型原因，是由于在程序中存在着大量的循环操作。</li><li><strong>空间局部性</strong> ：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址，可能集中在一定的范围之内，这是因为指令通常是顺序存放、顺序执行的，数据也一般是以向量、数组、表等形式簇聚存储的。</li></ol><p>时间局部性是通过将近来使用的指令和数据保存到<strong>高速缓存存储器</strong>中，并使用高速缓存的层次结构实现。</p><p>空间局部性通常是使用较大的高速缓存，并将预取机制集成到高速缓存控制逻辑中实现。</p><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><p>操作系统将虚拟内存分块，每个小块称为一个页（Page）；真实内存也需要分块，每个小块我们称为一个 Frame。</p><p>Page 到 Frame 的映射，需要一种叫作页表的结构。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-d3ce7f2b-275c-422c-8793-f3e0e1894ecc.png"></p><p>上图展示了 Page、Frame 和页表 （PageTable）三者之间的关系。 </p><p>Page 大小和 Frame 大小通常相等，页表中记录的某个 Page 对应的 Frame 编号。</p><p>页表也需要存储空间，比如虚拟内存大小为 10G， Page 大小是 4K，那么需要 10G/4K = 2621440 个条目。</p><p>如果每个条目是 64bit，那么一共需要 20480K = 20M 页表，操作系统在内存中划分出小块区域给页表，并负责维护页表。</p><p><strong>页表维护了虚拟地址到真实地址的映射。</strong></p><p>每次程序使用内存时，需要把虚拟内存地址换算成物理内存地址，换算过程分为以下 3 个步骤：</p><ul><li><p>通过虚拟地址计算 Page 编号；</p></li><li><p>查页表，根据 Page 编号，找到 Frame 编号；</p></li><li><p>将虚拟地址换算成物理地址。</p></li></ul><h4 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h4><p>引入多级页表的主要目的是为了避免把全部页表一直放在内存中占用过多空间，特别是那些根本就不需要的页表就不需要保留在内存中</p><p><strong>一级页表：</strong></p><p>假如物理内存中一共有1048576个页，那么页表就需要总共就是<code>1048576 * 4B = 4M</code>。</p><p>也就是说我需要4M连续的内存来存放这个页表，也就是一级页表。</p><p>随着虚拟地址空间的增大，存放页表所需要的连续空间也会增大，在操作系统内存紧张或者内存碎片较多时，这无疑会带来额外的开销。</p><p>页表寻址是用寄存器来确定一级页表地址的，所以一级页表的地址必须指向确定的物理页，否则就会出现错误，所以如果用一级页表的话，就必须把全部的页表都加载进去。</p><p><strong>二级页表：</strong></p><p>而使用二级页表的话，只需要加载一个页目录表(一级页表)，大小为4K，可以管理1024个二级页表。</p><p>可能你会有疑问，这1024个二级页表也是需要内存空间的，这下反而需要4MB+4KB的内存，反而更多了。</p><p>其实二级页表并不是一定要存在内存中的，内存中只需要一个一级页表地址存在存器即可，二级页表可以使用缺页中断从外存移入内存。</p><p><strong>多级页表属于时间换空间的典型场景</strong></p><h3 id="快表"><a href="#快表" class="headerlink" title="快表"></a>快表</h3><p>为了解决虚拟地址到物理地址的转换速度，操作系统在<strong>页表方案</strong>基础之上引入了<strong>快表</strong>来加速虚拟地址到物理地址的转换</p><p>我们可以把快表理解为一种特殊的<strong>高速缓冲存储器（Cache）</strong>，其中的内容是页表的一部分或者全部内容，作为页表的 Cache，它的作用与页表相似，但是提高了访问速率，由于采用页表做地址转换，读写内存数据时 CPU 要访问两次主存，有了快表，有时只要访问一次高速缓冲存储器，一次主存，这样可加速查找并提高指令执行速度。</p><p><strong>使用快表之后的地址转换流程是这样的：</strong></p><ol><li>根据虚拟地址中的页号查快表；</li><li>如果该页在快表中，直接从快表中读取相应的物理地址；</li><li>如果该页不在快表中，就访问内存中的页表，再从页表中得到物理地址，同时将页表中的该映射表项添加到快表中；</li><li>当快表填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。</li></ol><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-a9551753-2578-474e-a452-192d01382d22.png"></p><h3 id="内存管理单元"><a href="#内存管理单元" class="headerlink" title="内存管理单元"></a>内存管理单元</h3><p>在 CPU 中一个小型的设备——内存管理单元（MMU）</p><p>![](<a href="https://img-blog.csdnimg.cn/2da3a2f130cf415cb0b42c19fda70f30.png&quot;>">https://img-blog.csdnimg.cn/2da3a2f130cf415cb0b42c19fda70f30.png"&gt;</a></p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-51d4172c-068b-46b2-a7bc-fb4a6d39955b.png"></p><p>当 CPU 需要执行一条指令时，如果指令中涉及内存读写操作，CPU 会把虚拟地址给 MMU，MMU 自动完成虚拟地址到真实地址的计算；然后，MMU 连接了地址总线，帮助 CPU 操作真实地址。</p><p>在不同 CPU 的 MMU 可能是不同的，因此这里会遇到很多跨平台的问题。</p><p>解决跨平台问题不但有繁重的工作量，更需要高超的编程技巧。</p><h3 id="动态分区分配算法"><a href="#动态分区分配算法" class="headerlink" title="动态分区分配算法"></a>动态分区分配算法</h3><p>内存分配算法，大体来说分为：<strong>连续式分配 与 非连续式分配</strong></p><p>连续式分配就是把所以要执行的程序 <strong>完整的，有序的</strong> 存入内存，连续式分配又可以分为<strong>固定分区分配 和 动态分区分配</strong></p><p>非连续式分配就是把要执行的程序按照一定规则进行拆分，显然这样更有效率，现在的操作系统通常也都是采用这种方式分配内存</p><p>所谓动态分区分配，就是指<strong>内存在初始时不会划分区域，而是会在进程装入时，根据所要装入的进程大小动态地对内存空间进行划分，以提高内存空间利用率，降低碎片的大小</strong></p><p>动态分区分配算法有以下四种：</p><blockquote><p>首次适应算法（First Fit）</p></blockquote><p>空闲分区以地址递增的次序链接，分配内存时顺序查找，找到大小满足要求的第一个空闲分区就进行分配</p><p>![](<a href="https://img-blog.csdnimg.cn/e5cf8456bf9941758f6a1bd2ba1c351a.png&quot;>">https://img-blog.csdnimg.cn/e5cf8456bf9941758f6a1bd2ba1c351a.png"&gt;</a></p><blockquote><p>邻近适应算法（Next Fit）</p></blockquote><p>又称循环首次适应法，由首次适应法演变而成，不同之处是分配内存时从上一次查找结束的位置开始继续查找</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-a072428d-1d01-4c93-b5bb-8d2f9721d2ba.png"></p><blockquote><p>最佳适应算法（Best Fit）</p></blockquote><p>空闲分区按容量递增形成分区链，找到第一个能满足要求的空闲分区就进行分配</p><p>![](<a href="https://img-blog.csdnimg.cn/585a5ba3e4ad4eaeae77ebd1d8b02b32.png&quot;>">https://img-blog.csdnimg.cn/585a5ba3e4ad4eaeae77ebd1d8b02b32.png"&gt;</a></p><blockquote><p>最坏适应算法（Next Fit）</p></blockquote><p>又称最大适应算法，空闲分区以容量递减的次序链接，找到第一个能满足要求的空闲分区（也就是最大的分区）就进行分配</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-4673dda6-3940-4a15-ba09-6acfe095ff62.png"></p><p><strong>总结</strong></p><p>首次适应不仅最简单，通常也是最好最快，不过首次适应算法会使得内存低地址部分出现很多小的空闲分区，而每次查找都要经过这些分区，因此也增加了查找的开销。</p><p>邻近算法试图解决这个问题，但实际上，它常常会导致在内存的末尾分配空间分裂成小的碎片，它通常比首次适应算法结果要差。</p><p>最佳适应算法导致大量碎片，最坏适应算法导致没有大的空间。</p><h3 id="内存覆盖"><a href="#内存覆盖" class="headerlink" title="内存覆盖"></a>内存覆盖</h3><p>覆盖与交换技术是在程序用来扩充内存的两种方法。</p><p>早期的计算机系统中，主存容量很小，虽然主存中仅存放一道用户程序，但是存储空间放不下用户进程的现象也经常发生，这一矛盾可以用覆盖技术来解决。</p><p><strong>覆盖的基本思想是：</strong></p><p>由于程序运行时并非任何时候都要访问程序及数据的各个部分（尤其是大程序），因此可以把用户空间分成一个固定区和若干个覆盖区。</p><p>将经常活跃的部分放在固定区，其余部分按调用关系分段。</p><p>首先将那些即将要访问的段放入覆盖区，其他段放在外存中，在需要调用前，系统再将其调入覆盖区，替换覆盖区中原有的段。</p><p>覆盖技术的特点是打破了必须将一个进程的全部信息装入主存后才能运行的限制，但当同时运行程序的代码量大于主存时仍不能运行。</p><h3 id="内存交换"><a href="#内存交换" class="headerlink" title="内存交换"></a>内存交换</h3><p><strong>交换的基本思想</strong></p><p>把处于等待状态（或在CPU调度原则下被剥夺运行权利）的程序从内存移到辅存，把内存空间腾出来，这一过程又叫换出；</p><p>把准备好竞争CPU运行的程序从辅存移到内存，这一过程又称为换入。</p><blockquote><p>例如，有一个CPU釆用时间片轮转调度算法的多道程序环境。</p></blockquote><p>时间片到，内存管理器将刚刚执行过的进程换出，将另一进程换入到刚刚释放的内存空间中。</p><p>同时，CPU调度器可以将时间片分配给其他已在内存中的进程。</p><p>每个进程用完时间片都与另一进程交换。</p><p>理想情况下，内存管理器的交换过程速度足够快，总有进程在内存中可以执行。</p><blockquote><p>交换技术主要是在不同进程（或作业）之间进行，而覆盖则用于同一个程序或进程中。</p></blockquote><p>由于覆盖技术要求给出程序段之间的覆盖结构，使得其对用户和程序员不透明，所以对于主存无法存放用户程序的矛盾</p><p>现代操作系统是通过虚拟内存技术来解决的，覆盖技术则已成为历史；而交换技术在现代操作系统中仍具有较强的生命力。</p><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><p><strong>进程、线程的区别</strong></p><p>操作系统会以进程为单位，分配系统资源（CPU时间片、内存等资源），进程是资源分配的最小单位。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-6a48d3af-0342-4529-a45e-3ff739d8b22c.png"></p><p>调度：线程作为CPU调度和分配的基本单位，进程作为拥有资源的基本单位；</p><p>并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行；</p><blockquote><p>拥有资源：</p></blockquote><p>进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。</p><p>进程所维护的是程序所包含的资源（静态资源）， 如：地址空间，打开的文件句柄集，文件系统状态，信号处理handler等；</p><p>线程所维护的运行相关的资源（动态资源），如：运行栈，调度相关的控制信息，待处理的信号集等；</p><blockquote><p>系统开销：</p></blockquote><p>在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。</p><p>但是进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。</p><p>线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有的线程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。</p><p><strong>一个进程可以创建多少线程</strong></p><p>理论上，一个进程可用虚拟空间是2G，默认情况下，线程的栈的大小是1MB，所以理论上最多只能创建2048个线程。</p><p>如果要创建多于2048的话，必须修改编译器的设置。</p><p>在一般情况下，你不需要那么多的线程，过多的线程将会导致大量的时间浪费在线程切换上，给程序运行效率带来负面影响。</p><p><strong>外中断和异常有什么区别</strong></p><p>外中断是指由 CPU 执行指令以外的事件引起，如 I/O 完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求，此外还有时钟中断、控制台中断等。</p><p>而异常时由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。</p><p><strong>解决Hash冲突四种方法</strong></p><p>开放定址法</p><ul><li>开放定址法就是一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。</li></ul><p>链地址法</p><ul><li>将哈希表的每个单元作为链表的头结点，所有哈希地址为i的元素构成一个同义词链表。即发生冲突时就把该关键字链在以该单元为头结点的链表的尾部。</li></ul><p>再哈希法</p><ul><li>当哈希地址发生冲突用其他的函数计算另一个哈希函数地址，直到冲突不再产生为止。</li></ul><p>建立公共溢出区</p><ul><li>将哈希表分为基本表和溢出表两部分，发生冲突的元素都放入溢出表中。</li></ul><p><strong>分页机制和分段机制有哪些共同点和区别</strong></p><p>共同点</p><ul><li>分页机制和分段机制都是为了提高内存利用率，较少内存碎片。</li><li>页和段都是离散存储的，所以两者都是离散分配内存的方式。但是，每个页和段中的内存是连续的。</li></ul><p>区别</p><ul><li>页的大小是固定的，由操作系统决定；而段的大小不固定，取决于我们当前运行的程序。</li><li>分页仅仅是为了满足操作系统内存管理的需求，而段是逻辑信息的单位，在程序中可以体现为代码段，数据段，能够更好满足用户的需要。</li><li>分页是一维地址空间，分段是二维的。</li></ul><p><strong>介绍一下几种典型的锁</strong></p><blockquote><p>读写锁</p></blockquote><ul><li>可以同时进行多个读</li><li>写者必须互斥（只允许一个写者写，也不能读者写者同时进行）</li><li>写者优先于读者（一旦有写者，则后续读者必须等待，唤醒时优先考虑写者）</li></ul><blockquote><p>互斥锁</p></blockquote><p>一次只能一个线程拥有互斥锁，其他线程只有等待</p><p>互斥锁是在抢锁失败的情况下主动放弃CPU进入睡眠状态直到锁的状态改变时再唤醒，而操作系统负责线程调度，为了实现锁的状态发生改变时唤醒阻塞的线程或者进程，需要把锁交给操作系统管理，所以互斥锁在加锁操作时涉及上下文的切换。</p><p>互斥锁实际的效率还是可以让人接受的，加锁的时间大概100ns左右，而实际上互斥锁的一种可能的实现是先自旋一段时间，当自旋的时间超过阀值之后再将线程投入睡眠中，因此在并发运算中使用互斥锁（每次占用锁的时间很短）的效果可能不亚于使用自旋锁</p><blockquote><p>条件变量</p></blockquote><p>互斥锁一个明显的缺点是他只有两种状态：锁定和非锁定。</p><p>而条件变量通过允许线程阻塞和等待另一个线程发送信号的方法弥补了互斥锁的不足，他常和互斥锁一起使用，以免出现竞态条件。</p><p>当条件不满足时，线程往往解开相应的互斥锁并阻塞线程然后等待条件发生变化。</p><p>一旦其他的某个线程改变了条件变量，他将通知相应的条件变量唤醒一个或多个正被此条件变量阻塞的线程。</p><p>总的来说<strong>互斥锁是线程间互斥的机制，条件变量则是同步机制。</strong></p><blockquote><p>自旋锁</p></blockquote><p>如果进线程无法取得锁，进线程不会立刻放弃CPU时间片，而是一直循环尝试获取锁，直到获取为止。</p><p>如果别的线程长时期占有锁，那么自旋就是在浪费CPU做无用功，但是自旋锁一般应用于加锁时间很短的场景，这个时候效率比较高。</p><p>虽然它的效率比互斥锁高，但是它也有些不足之处：</p><ul><li>自旋锁一直占用CPU，在未获得锁的情况下，一直进行自旋，所以占用着CPU，如果不能在很短的时间内获得锁，无疑会使CPU效率降低。</li><li>在用自旋锁时有可能造成死锁，当递归调用时有可能造成死锁。</li></ul><p><strong>如何让进程后台运行</strong></p><p>1.命令后面加上&amp;即可，实际上，这样是将命令放入到一个作业队列中了</p><p>2.ctrl + z 挂起进程，使用jobs查看序号，在使用bg %序号后台运行进程</p><p>3.nohup + &amp;，将标准输出和标准错误缺省会被重定向到 <code>nohup.out</code> 文件中，忽略所有挂断（SIGHUP）信号</p><pre class="line-numbers language-none"><code class="language-none">nohup ping www.ibm.com &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.运行指令前面 + setsid，使其父进程变成init进程，不受SIGHUP信号的影响</p><pre class="line-numbers language-none"><code class="language-none">[root@pvcent107 ~]## setsid ping www.ibm.com[root@pvcent107 ~]## ps -ef |grep www.ibm.comroot     31094     1  0 07:28 ?        00:00:00 ping www.ibm.comroot     31102 29217  0 07:29 pts/4    00:00:00 grep www.ibm.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上例中我们的进程 ID(PID)为31094，而它的父 ID（PPID）为1（即为 init 进程 ID），并不是当前终端的进程 ID。</p><blockquote><p>5.将命令+ &amp;放在()括号中，也可以是进程不受HUP信号的影响</p></blockquote><pre class="line-numbers language-none"><code class="language-none">[root@pvcent107 ~]## (ping www.ibm.com &amp;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>异常和中断的区别</strong></p><blockquote><p>中断</p></blockquote><p>当我们在敲击键盘的同时就会产生中断，当硬盘读写完数据之后也会产生中断，所以，我们需要知道，中断是由硬件设备产生的，而它们从物理上说就是电信号，之后，它们通过中断控制器发送给CPU，接着CPU判断收到的中断来自于哪个硬件设备（这定义在内核中），最后，由CPU发送给内核，有内核处理中断。</p><p>下面这张图显示了中断处理的流程：</p><p>![](<a href="https://img-blog.csdnimg.cn/6c0a43b5915e44bf8d05b6d871fd3b25.png&quot;>">https://img-blog.csdnimg.cn/6c0a43b5915e44bf8d05b6d871fd3b25.png"&gt;</a></p><blockquote><p>异常</p></blockquote><p>CPU处理程序的时候一旦程序不在内存中，会产生缺页异常；当运行除法程序时，当除数为0时，又会产生除0异常。</p><p><strong>异常是由CPU产生的，同时，它会发送给内核，要求内核处理这些异常</strong></p><p>下面这张图显示了异常处理的流程：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/os-1555a2c9-121e-4b08-a685-2d789fc3b66b.png"></p><blockquote><p>相同点</p></blockquote><ul><li>最后都是由CPU发送给内核，由内核去处理</li><li>处理程序的流程设计上是相似的</li></ul><blockquote><p>不同点</p></blockquote><ul><li>产生源不相同，异常是由CPU产生的，而中断是由硬件设备产生的</li><li>内核需要根据是异常还是中断调用不同的处理程序</li><li>中断不是时钟同步的，这意味着中断可能随时到来；异常由于是CPU产生的，所以它是时钟同步的</li><li>当处理中断时，处于中断上下文中；处理异常时，处于进程上下文中</li></ul><hr><blockquote><p>作者：月伴飞鱼，转载链接：<a href="https://mp.weixin.qq.com/s/G9ZqwEMxjrG5LbgYwM5ACQ">https://mp.weixin.qq.com/s/G9ZqwEMxjrG5LbgYwM5ACQ</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/10/09/2023-10-09-wang-luo-zhi-shi/"/>
      <url>/2023/10/09/2023-10-09-wang-luo-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络核心知识点"><a href="#计算机网络核心知识点" class="headerlink" title="计算机网络核心知识点"></a>计算机网络核心知识点</h1><blockquote><p>作者：月伴飞鱼，转载链接：<a href="https://mp.weixin.qq.com/s/7EddtzpwIRvYfw34QE4zvw">https://mp.weixin.qq.com/s/7EddtzpwIRvYfw34QE4zvw</a></p></blockquote><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-608345cf-8378-4b34-bc91-ca6d2fa25da7.png"></p><h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2><p><strong>物理层</strong></p><p>首先解决两台物理机之间的通信需求，具体就是机器A往机器B发送比特流，机器B能收到比特流。</p><p>物理层主要定义了物理设备的标准，如网线的类型，光纤的接口类型，各种传输介质的传输速率。</p><p>主要作用是传输比特流（<code>0101</code>二进制数据），将比特流转化为电流强弱传输，到达目的后再转化为比特流，即常说的数模转化和模数转换。</p><p>这层数据叫做比特。<strong>网卡工作在这层</strong>。</p><p>物理层是OSI七层模型的物理基础，没有它就谈不上数据传输了</p><p>物理层就是由实物所承载的，所以作比喻的话，公路、汽车和飞机等承载货物（数据）的交通工具，就是物理层的象征</p><p><strong>数据链路层</strong></p><p>在传输比特流的过程中，会产生错传、数据传输不完整的可能。</p><p>数据链路层定义了<strong>如何格式化数据进行传输</strong>，以及如何控制对物理介质的访问。通常提供错误检测和纠正，以确保数据传输的准确性。</p><p>本层将比特数据组成帧，交换机工作在这层，对帧解码，并根据帧中包含的信息把数据发送到正确的接收方。</p><p>该层负责物理层面上互连的节点之间的通信传输。例如与1个以太网相连的两个节点间的通讯。</p><p>常见的协议有 <code>HDLC、PPP、SLIP</code>等</p><p>数据链路层会将<code>0、1</code>序列划分为具有意义的数据帧传送给对端（<strong>数据帧的生成与接收</strong>）</p><p><strong>网络层</strong></p><p>随着网络节点的不断增加，点对点通讯需要通过多个节点，如何找到目标节点，如何选择最佳路径成为首要需求。</p><p>网络层主要功能是将网络地址转化为对应的物理地址，并决定如何将数据从发送方路由到接收方。</p><p>网络层通过综合考虑发送优先权、网络拥塞程度、服务质量以及可选路由的花费来决定从一个网络中节点A到另一个网络中节点B的最佳路径。</p><p>由于网络层处理并智能指导数据传送，路由器连接网络隔断，所以路由器属于网络层。</p><p>此层的数据称之为数据包。本层需要关注的协议<code>TCP/IP</code>协议中的IP协议。</p><p>网络层负责将数据传输到目标地址。目标地址可以使多个网络通过路由器连接而成的某一个地址。因此这一层主要负责<strong>寻址和路由选择</strong>。主要由 <code>IP、ICMP</code> 两个协议组成</p><p>网络层将数据从发送端的主机发送到接收端的主机，两台主机间可能会存在很多数据链路，但网络层就是负责找出一条相对顺畅的通路将数据传递过去。传输的地址使用的是IP地址。IP地址通过不断转发到更近的IP地址，最终可以到达目标地址</p><p><strong>传输层</strong></p><p>随着网络通信需求的进一步扩大，通信过程中需要发送大量的数据，如海量文件传输，可能需要很长时间，网络在通信的过程中会中断很多次，此时为了保证传输大量文件时的准确性，需要对发送出去的数据进行切分，切割为一个一个的段落（<code>Segement</code>）发送，其中一个段落丢失是否重传，段落是否按顺序到达，是传输层需要考虑的问题。</p><p>传输层解决了主机间的数据传输，数据间的传输可以是不同网络，并且传输层解决了<strong>传输质量</strong>的问题。</p><p>传输层需要关注的协议有TCP/IP协议中的<code>TCP</code>协议和<code>UDP</code>协议。</p><p><strong>会话层</strong></p><p>自动收发包，自动寻址。</p><p>会话层作用是<strong>负责建立和断开通信连接</strong>，何时建立，断开连接以及保持多久的连接。常见的协议有 <code>ADSP、RPC</code> 等</p><p><strong>表示层</strong></p><p>Linux给WIndows发包，不同系统语法不一致，如exe不能在<code>Linux</code>下执行，shell不能在Windows不能直接运行。于是需要表示层。</p><p>解决<strong>不同系统之间通信语法问题</strong>，在表示层数据将按照网络能理解的方案进行格式化，格式化因所使用网络的不同而不同。</p><p>它主要负责数据格式的转换。具体来说，就是讲设备固有的数据格式转换为网络标准格式。常见的协议有<code>ASCII、SSL/TLS</code> 等</p><p><strong>应用层</strong></p><p>规定发送方和接收方必须使用一个固定长度的消息头，消息头必须使用某种固定的组成，消息头中必须记录消息体的长度等信息，方便接收方正确解析发送方发送的数据。</p><p>应用层旨在更<strong>方便应用从网络中接收的数据</strong>，重点关注<code>TCP/IP</code>协议中的HTTP协议</p><p>四层传输层数据被称作<strong>段</strong>（Segments）；</p><p>三层网络层数据被称做<strong>包</strong>（Packages）；</p><p>二层数据链路层时数据被称为<strong>帧</strong>（Frames）；</p><p>一层物理层时数据被称为<strong>比特流</strong>（Bits）。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-d1fdc5fc-c955-4591-9c95-e297a64eccdc.png"></p><h2 id="TCP和IP模型"><a href="#TCP和IP模型" class="headerlink" title="TCP和IP模型"></a>TCP和IP模型</h2><p>OSI模型注重通信协议必要的功能；TCP/IP更强调在计算机上实现协议应该开发哪种程序</p><p><strong>TCP/IP划分了四层网络模型</strong></p><ul><li>第一层：应用层，主要有负责web浏览器的HTTP协议， 文件传输的FTP协议，负责电子邮件的SMTP协议，负责域名系统的DNS等</li><li>第二层：传输层，主要是有<strong>可靠传输</strong>的TCP协议，特别<strong>高效</strong>的UDP协议。主要负责传输应用层的数据包。</li><li>第三层：网络层，主要是IP协议。主要负责寻址（找到目标设备的位置）</li><li>第四层：数据链路层，主要是负责转换数字信号和物理二进制信号。</li></ul><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-fa4a4d20-f0db-4ba7-a31e-7772f2f132a8.png"></p><p><strong>四层网络协议的作用</strong></p><ul><li>发送端是由上至下，把上层来的数据在头部加上各层协议的数据（部首）再下发给下层。</li><li>接受端则由下而上，把从下层接受到的数据进行解密和去掉头部的部首后再发送给上层。</li><li>层层加密和解密后，应用层最终拿到了需要的数据。</li></ul><p><strong>举个例子：</strong></p><p>我们需要发送一个<strong>index.html</strong>。</p><p>两台电脑在应用层都使用HTTP协议（即都使用浏览器）。</p><p>在传输层，TCP协议会将HTTP协议发送的数据看作一个数据包，并在这个数据包前面加上TCP包的一部分信息（部首）</p><p>在网络层，IP协议会将TCP协议要发送的数据看作一个数据包，同样的在这个数据包前端加上IP协议的部首</p><p>在数据链路层，对应的协议也会在IP数据包前端加上以太网的部首。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-1d3ce227-fd77-4b95-89dd-aeb786bb4b9e.png"></p><p>源设备和目标设备通过网线连接，就可以通过物理层的二进制传输数据。</p><p>数据链路层，会使用对应的协议找到物理层的二进制数据，解码得到以太网的部首信息和对应的IP数据包，再将IP数据包传给上层的网络层。</p><p>数据链路层&gt;网络层&gt;传输层&gt;应用层，一层层的解码，最后就可以在浏览器中得到目标设备传送过来的<strong>index.html</strong>。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-731f7daa-1b47-4191-828f-c6e54d650604.png"></p><p><strong>TCP/IP协议族</strong></p><p>从字面意义上来讲，TCP/IP是指<strong>传输层</strong>的TCP协议和<strong>网络层</strong>的IP协议。</p><p>实际上，TCP/IP只是利用 IP 进行通信时所必须用到的协议群的统称。</p><p>具体来说，在网络层是IP/ICMP协议、在传输层是TCP/UDP协议、在应用层是SMTP、FTP、以及 HTTP 等。他们都属于 TCP/IP 协议。</p><h2 id="网络设备"><a href="#网络设备" class="headerlink" title="网络设备"></a>网络设备</h2><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p>交换机可以接入多台电脑</p><p>每个电脑网卡的 <strong>MAC 地址</strong>都是不一样的，电脑发送数据时，数据头部携带网卡的 MAC 地址，用 MAC 地址标识来不同的电脑</p><p>交换机就可以识别数据头部的 MAC 地址来区分不同的电脑</p><p>交换机除了能识别不同的电脑，还需要找到电脑连接的<strong>交换机端口</strong>，才能顺利的把数据从相应端口发送出去</p><p>交换机通过<strong>自学机制</strong>，把学习到的设备 MAC 地址和交换机端口号添加到 <strong>MAC 地址表</strong>，并根据 MAC 地址表进行数据<strong>转发</strong></p><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><p>交换机需要记录的 MAC 地址表也越来越多，需要的交换机也越来越多</p><p>但是交换机的<strong>容量和性能有限</strong>，MAC 地址表无法记录全世界电脑的 MAC 地址和对应的端口号，MAC 地址表太大也无法快速查找到对应的 MAC 地址表项</p><p>于是就有了三层网络设备<strong>路由器</strong>，路由器可以把全世界的网络连接起来</p><p>局域网内的网络连接可以使用<strong>交换机</strong>，例如一个公司内的网络或者一个校园内的网络通过交换机连接</p><p>不同区域的局域网互联使用<strong>路由器</strong></p><blockquote><p>那么如何区分不同的网络区域呢？又是如何跨网络区域进行数据转发的呢？</p></blockquote><p>路由器有多个端口，分别连接不同的网络区域，不同网络区域的 IP 地址<strong>网络号不同</strong></p><p>它通过识别目的 IP 地址的<strong>网络号</strong>，再根据<strong>路由表</strong>进行数据转发</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p><strong>请求方法</strong></p><p>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。</p><p>HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。</p><table><thead><tr><th>序 号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>请求指定的页面信息，并返回实体主体。</td></tr><tr><td>2</td><td>HEAD</td><td>类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>3</td><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td>4</td><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td>5</td><td>DELETE</td><td>请求服务器删除指定的页面。</td></tr><tr><td>6</td><td>CONNECT</td><td>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td>7</td><td>OPTIONS</td><td>允许客户端查看服务器的性能。</td></tr><tr><td>8</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断。</td></tr><tr><td>9</td><td>PATCH</td><td>是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><p><strong>GET请求和POST请求的区别</strong></p><ol><li>GET 请求的请求参数是添加到 head 中，可以在 url 中可以看到；POST 请求的请求参数是添加到body中，在url 中不可见。</li><li>请求的url有长度限制，这个限制由浏览器和 web 服务器决定和设置的，例如IE浏览器对 URL的最大限制为2083个字符，如果超过这个数字，提交按钮没有任何反应，因为GET请求的参数是添加到URL中，所以GET请求的URL的长度限制需要将请求参数长度也考虑进去。而POST请求不用考虑请求参数的长度。</li><li>GET请求产生一个数据包; POST请求产生2个数据包，在火狐浏览器中，产生一个数据包，这个区别点在于浏览器的请求机制，先发送请求头，再发送请求体，因为GET没有请求体，所以就发送一个数据包，而POST包含请求体，所以发送两次数据包，但是由于火狐机制不同，所以发送一个数据包。</li><li>GET 请求会被浏览器主动缓存下来，留下历史记录，而 POST 默认不会。</li><li>GET是幂等的，而POST不是(幂等表示执行相同的操作，结果也是相同的)</li><li>GET是获取数据，POST是修改数据</li></ol><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p><strong>状态码由3位数字组成，第一位定义响应的类别</strong></p><p>1XX：指示信息，表示请求以接收，继续处理</p><p>2XX：成功，表示请求已经被成功接收、理解、接受</p><ul><li><p>200 OK 是最常见的成功状态码，表示一切正常。如果是非 HEAD 请求，服务器返回的响应头都会有 body 数据。</p></li><li><p>204 No Content 也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。</p></li><li><p>206 Partial Content 是应用于 HTTP 分块下载或断电续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。</p></li></ul><p>3XX：状态码表示客户端请求的资源发送了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是<strong>重定向</strong>。</p><ul><li>301 Moved Permanently 表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问，搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址。</li><li>302 Moved Permanently 表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问，搜索引擎会抓取新的内容而保存旧的网址。</li></ul><p>301 和 302 都会在响应头里使用字段 Location，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。</p><ul><li>304 Not Modified不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制。</li></ul><p>4XX：状态码表示客户端发送的<strong>报文有误</strong>，服务器无法处理，也就是错误码的含义。</p><ul><li><p>400 Bad Request表示客户端请求的报文有错误。</p></li><li><p>401 Unauthorized：缺失或错误的认证，这个状态代码必须和WWW-Authenticate报头域一起使用。</p></li><li><p>403 Forbidden表示服务器禁止访问资源，并不是客户端的请求出错。</p></li><li><p>404 Not Found表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。</p></li></ul><p>5XX：状态码表示客户端请求报文正确，但是<strong>服务器处理时内部发生了错误</strong>，属于服务器端的错误码。</p><ul><li><p>501 Not Implemented 表示客户端请求的功能还不支持。</p></li><li><p>502 Bad Gateway 通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。</p></li><li><p>503 Service Unavailable 表示服务器当前很忙，暂时无法响应服务器。</p></li><li><p>504 Gateway Timeout：网关超时，由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。</p></li></ul><p><strong>301和302的区别</strong></p><p>301重定向，指页面永久性转移，表示为资源或页面永久性地转移到了另一个位置。</p><p>301是HTTP协议中的一种状态码，当用户或搜索引擎向服务器发出浏览请求时，服务器返回的HTTP数据流中头信息中包含状态码 301 ，表示该资源已经永久改变了位置。</p><p>302重定向是页面暂时性转移，搜索引擎会抓取新的内容而保存旧的网址并认为新的网址只是暂时的。</p><h3 id="HTTP1-1"><a href="#HTTP1-1" class="headerlink" title="HTTP1.1"></a>HTTP1.1</h3><p><strong>长连接</strong></p><p>HTTP 1.1支持长连接</p><p>HTTP 1.0规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求。</p><p>HTTP 1.1则支持持久连接Persistent Connection，并且默认使用，在同一个TCP的连接中可以传送多个HTTP请求和响应，多个请求和响应可以重叠，多个请求和响应可以同时进行，更加多的请求头和响应头</p><p>HTTP 1.1的持续连接，也需要增加新的请求头来帮助实现，例如，Connection请求头的值为Keep-Alive时，客户端通知服务器返回本次请求结果后保持连接；Connection请求头的值为Close时，客户端通知服务器返回本次请求结果后关闭连接。</p><p><strong>管道网络传输</strong></p><p>HTTP/1.1 采用了长连接的方式，这使得管道网络传输成为了可能。</p><p>即可在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以<strong>减少整体的响应时间。</strong></p><p>举例来说，客户端需要请求两个资源。以前的做法是，在同一个TCP连接里面，先发送 A 请求，然后等待服务器做出回应，收到后再发出 B 请求，管道机制则是允许浏览器同时发出 A 请求和 B 请求。</p><p>但是服务器还是按照<strong>顺序</strong>，先回应 A 请求，完成后再回应 B 请求，要是 前面的回应特别慢，后面就会有许多请求排队等着。</p><p><strong>Host字段</strong></p><p>在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名，但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个IP地址。</p><p>HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</p><p>此外，服务器应该接受以绝对路径标记的资源请求。</p><p><strong>100Status</strong></p><p>HTTP/1.1加入了一个新的状态码100。</p><p>客户端事先发送一个只带头域的请求，如果服务器因为权限拒绝了请求，就回送响应码401（Unauthorized）；</p><p>如果服务器接收此请求就回送响应码100，客户端就可以继续发送带实体的完整请求了。</p><p>100状态代码的使用，允许客户端在发request消息body之前先用request header试探一下server，看server要不要接收request body，再决定要不要发request body。</p><p><strong>Chunked Transfer Coding</strong></p><p>HTTP/1.1将发送方将消息分割成若干个任意大小的数据块，每个数据块在发送时都会附上块的长度，最后用一个零长度的块作为消息结束的标志。</p><p>这种方法允许发送方只缓冲消息的一个片段，避免缓冲整个消息带来的过载。</p><p><strong>Cache</strong></p><p>HTTP/1.1在1.0的基础上加入了一些Cache的新特性，当缓存对象的Age超过Expire时变为Stable对象，Cache不需要直接抛弃Stable对象，而是与源服务器进行重新激活。</p><h3 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h3><p><strong>HTTP2.0和HTTP1.X相比的新特性</strong></p><ul><li><p>新的二进制格式，<code>HTTP1.x</code>的解析是基于文本</p></li><li><p>多路复用，即连接共享，即每一个request都是是用作连接共享机制的，一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面</p></li><li><p>header压缩，<code>HTTP1.x</code>的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小</p></li><li><p>服务端推送</p></li></ul><p>HTTP/2 还在一定程度上改善了传统的请求 - 应答工作模式，服务不再是被动地响应，也可以<strong>主动</strong>向客户端发送消息。</p><p>举例来说，在浏览器刚请求 HTML 的时候，就提前把可能会用到的 JS、CSS 文件等静态资源主动发给客户端，<strong>减少延时的等待</strong>，也就是服务器推送。</p><p><strong>数据流</strong></p><p>HTTP/2 的数据包不是按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。</p><p>因此，必须要对数据包做标记，指出它属于哪个回应。</p><p>每个请求或回应的所有数据包，称为一个数据流（Stream）。</p><p>每个数据流都标记着一个独一无二的编号，其中规定客户端发出的数据流编号为奇数， 服务器发出的数据流编号为偶数</p><p>客户端还可以<strong>指定数据流的优先级</strong>。优先级高的请求，服务器就先响应该请求。</p><p><strong>HTTP2.0的多路复用和HTTP1.X中的长连接复用有什么区别</strong></p><ul><li>HTTP/1.1的Pipeling为若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法；</li><li>HTTP2.0多个请求可同时在一个连接上并行执行，某个请求任务耗时严重，不会影响到其它连接的正常执行</li></ul><h3 id="HTTP3-0"><a href="#HTTP3-0" class="headerlink" title="HTTP3.0"></a>HTTP3.0</h3><p><strong>使用UDP协议</strong></p><p>HTTP/2 主要的问题在于：多个 HTTP 请求在复用一个 TCP 连接，下层的 TCP 协议是不知道有多少个 HTTP 请求的。</p><p>所以一旦发生了丢包现象，就会触发 TCP 的重传机制，这样在一个 TCP 连接中的<strong>所有的 HTTP 请求都必须等待这个丢了的包被重传回来</strong>。</p><ul><li>HTTP/1.1 中的管道传输中如果有一个请求阻塞了，那么队列后请求也统统被阻塞住了</li><li>HTTP/2 多请求复用一个TCP连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。</li></ul><p>这都是基于 TCP 传输层的问题，所以 <strong>HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP！</strong></p><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p><strong>HTTP与HTTPS的区别</strong></p><p>HTTP 是明文传输协议，HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全</p><ul><li><p>HTTPS比HTTP更加安全，对搜索引擎更友好，利于SEO，谷歌、百度优先索引HTTPS网页</p></li><li><p>HTTPS需要用到SSL证书，而HTTP不用</p></li><li><p>HTTPS标准端口443，HTTP标准端口80</p></li><li><p>HTTPS基于传输层，HTTP基于应用层</p></li><li><p>HTTPS在浏览器显示绿色安全锁，HTTP没有显示</p></li></ul><p><strong>工作原理</strong></p><p>HTTPS 协议会对传输的数据进行加密，而加密过程是使用了非对称加密实现</p><p>HTTPS的整体过程分为证书验证和数据传输阶段，具体的交互过程如下：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-c1db0431-0eee-4c80-bb60-b7508a306864.png"></p><ul><li>Client发起一个HTTPS的请求</li><li>Server把事先配置好的公钥证书返回给客户端。</li><li>Client验证公钥证书：比如是否在有效期内，证书的用途是不是匹配Client请求的站点，是不是在CRL吊销列表里面，它的上一级证书是否有效，这是一个递归的过程，直到验证到根证书（操作系统内置的Root证书或者Client内置的Root证书），如果验证通过则继续，不通过则显示警告信息。</li><li>Client使用伪随机数生成器生成加密所使用的对称密钥，然后用证书的公钥加密这个对称密钥，发给Server。</li><li>Server使用自己的私钥解密这个消息，得到对称密钥。至此，Client和Server双方都持有了相同的对称密钥。</li><li>Server使用对称密钥加密明文内容A，发送给Client。</li><li>Client使用对称密钥解密响应的密文，得到明文内容A。</li><li>Client再次发起HTTPS的请求，使用对称密钥加密请求的明文内容B，然后Server使用对称密钥解密密文，得到明文内容B。</li></ul><h4 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h4><p>客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。</p><blockquote><p>这就存在些问题，如何保证公钥不被篡改和信任度？</p></blockquote><p>所以这里就需要借助第三方权威机构 CA （数字证书认证机构），将<strong>服务器公钥放在数字证书</strong>（由数字证书认证机构颁发）中，只要证书是可信的，公钥就是可信的。</p><p>通过数字证书的方式保证服务器公钥的身份，解决冒充的风险。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-45917c49-bb08-4f88-84d2-5e8ae53acc7c.png"></p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p><strong>请求头</strong></p><p>HTTP 请求报文由3部分组成(请求行+请求头+请求体)</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-3c00598c-43c2-44cd-96c6-ee4d40b97abd.png"></p><p><strong>常见的HTTP报文头属性</strong></p><ul><li>Accpet<ul><li>告诉服务端，客户端接收什么类型的响应</li></ul></li><li>Referer<ul><li>表示这是请求是从哪个URL进来的,比如想在网上购物，但是不知道选择哪家电商平台，你就去问度娘，说哪家电商的东西便宜啊，然后一堆东西弹出在你面前，第一给就是某宝，当你从这里进入某宝的时候，这个请求报文的Referer就是：<a href="www.baidu.com">www.baidu.com</a></li></ul></li><li>Cache-Control<ul><li>对缓存进行控制，如一个请求希望响应的内容在客户端缓存一年，或不被缓可以通过这个报文头设置</li></ul></li><li>Accept-Encoding<ul><li>这个属性是用来告诉服务器能接受什么编码格式，包括字符编码,压缩形式(一般都是压缩形式)<ul><li>例如:<code>Accept-Encoding:gzip, deflate</code>(这两种都是压缩格式)</li></ul></li></ul></li><li>Host<ul><li>指定要请求的资源所在的主机和端口</li></ul></li><li>User-Agent：告诉服务器，客户端使用的操作系统、浏览器版本和名称</li><li>Connection</li></ul><p>　　决定当前事务（三次握手和四次挥手）完成后，是否关闭网络连接。</p><ul><li>持久连接，事务完成后不关闭网络连接 ：<code> Connection: keep-alive</code></li></ul><ul><li>非持久连接，事务完成后关闭网络连接： <code>Connection: close</code>　</li></ul><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p>响应报文与请求报文一样，由三个部分组成(响应行,响应头,响应体)</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-58884113-14dc-4cca-a63e-3320f31a4da5.png"></p><p><strong>HTTP响应报文属性</strong></p><ul><li>Cache-Control<ul><li>响应输出到客户端后，服务端通过该属性告诉客户端该怎么控制响应内容的缓存</li></ul></li><li>ETag<ul><li>表示你请求资源的版本，如果该资源发生啦变化，那么这个属性也会跟着变</li></ul></li><li>Location<ul><li>在重定向中或者创建新资源时使用</li></ul></li><li>Set-Cookie<ul><li>服务端可以设置客户端的cookie</li></ul></li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP是一个传输层协议，提供可靠传输，支持全双工，是一个连接导向的协议。</p><p><strong>双工/单工</strong></p><p>在任何一个时刻，如果数据只能单向发送，就是单工。</p><p>如果在某个时刻数据可以向一个方向传输，也可以向另一个方向反方向传输，而且交替进行，叫作半双工；半双工需要至少 1 条线路。</p><p>如果任何时刻数据都可以双向收发，这就是全双工，全双工需要大于 1 条线路。</p><p>TCP 是一个双工协议，数据任何时候都可以双向传输。</p><p>这就意味着客户端和服务端可以平等地发送、接收信息。</p><p><strong>TCP协议的主要特点</strong></p><ul><li><p> TCP是面向连接的运输层协议；所谓面向连接就是双方传输数据之前，必须先建立一条通道，例如三次握手就是建议通道的一个过程，而四次挥手则是结束销毁通道的一个其中过程。 </p></li><li><p> 每一条TCP连接只能有两个端点（即两个套接字），只能是点对点的； </p></li><li><p> TCP提供可靠的传输服务。传送的数据无差错、不丢失、不重复、按序到达； </p></li><li><p> TCP提供全双工通信。允许通信双方的应用进程在任何时候都可以发送数据，因为两端都设有发送缓存和接受缓存； </p></li><li><p> 面向字节流。虽然应用程序与TCP交互是一次一个大小不等的数据块，但TCP把这些数据看成一连串无结构的字节流，它不保证接收方收到的数据块和发送方发送的数据块具有对应大小关系，例如，发送方应用程序交给发送方的TCP10个数据块，接收方的TCP可能只用收到的4个数据块字节流交付给上层的应用程序 </p></li></ul><p><strong>TCP的可靠性原理</strong></p><p>可靠传输有如下两个特点:</p><ol><li>传输信道无差错,保证传输数据正确; </li><li>不管发送方以多快的速度发送数据,接收方总是来得及处理收到的数据; </li></ol><p>首先，采用三次握手来建立TCP连接，四次握手来释放TCP连接，从而保证建立的传输信道是可靠的。</p><p>其次，TCP采用了连续ARQ协议（回退N(Go-back-N)；超时自动重传）来保证数据传输的正确性，使用滑动窗口协议来保证接方能够及时处理所接收到的数据，进行流量控制。</p><p>最后，TCP使用慢开始、拥塞避免、快重传和快恢复来进行拥塞控制，避免网络拥塞。</p><h3 id="报文段"><a href="#报文段" class="headerlink" title="报文段"></a>报文段</h3><p>TCP虽面向字节流，但传送的数据单元为报文段</p><p>报文段 = 首部 + 数据2部分</p><p>TCP的全部功能体现在它首部中各字段的作用</p><blockquote><ol><li>首部前20个字符固定、后面有4n个字节是根据需而增加的选项</li><li>故 TCP首部最小长度 = 20字节</li></ol></blockquote><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-8011660d-24c8-460f-ac3d-b97ad9c99b13.png"></p><p><strong>端口</strong>：</p><p>源端口号和目地端口各占16位两个字节，也就是端口的范围是<code>2^16=65535</code></p><p>另外1024以下是系统保留的，从1024-65535是用户使用的端口范围</p><p><strong>seq序号</strong>：占4字节，TCP连接中传送的字节流中的每个字节都按顺序编号。</p><p>例如：一段报文的序号字段值是107，携带的数据是100个字段，下一个报文段序号从107+100=207开始。</p><p><strong>ack确认号</strong>：4个字节，是期望收到对方下一个报文段的第一个数据字节的序号。</p><p>例如：B收到A发送的报文，其序号字段是301，数据长度是200字节，表明B正确收到A发送的到序号500为止的数据（301+200-1=500），B期望收到A下一个数据序号是501，B发送给A的确认报文段中把ack确认号置为501。</p><p><strong>数据偏移</strong>：头部有可选字段，长度不固定，指出TCP报文段的数据起始处距离报文段的起始处有多远。</p><p><strong>保留</strong>：保留今后使用的，被标为1。</p><p><strong>控制位</strong>：由8个标志位组成。每个标志位表示一个控制功能。</p><p>其中主要的6个：</p><ul><li><p><strong>URG紧急指针标志</strong>，为1表示紧急指针有效，为0忽略紧急指针。</p></li><li><p><strong>ACK确认序号标志</strong>，为1表示确认号有效，为0表示报文不含确认信息，忽略确认号字段，上面的确认号是否有效就是通过该标识控制的。</p></li><li><p><strong>PSH标志</strong>，为1表示带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将该报文段交给应用程序，而不是在缓冲区排队。</p></li><li><p><strong>RST重置连接标志</strong>，重置因为主机崩溃或其他原因而出现错误的连接，或用于拒绝非法的报文段或非法的连接。</p></li><li><p><strong>SYN同步序号</strong>，同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。。</p></li><li><p><strong>FIN终止标志</strong>，用于释放连接，为1时表示发送方没有发送了。</p></li></ul><p><strong>窗口</strong>：滑动窗口大小，用来告知发送端接收端缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。</p><p><strong>校验和</strong>：奇偶校验，此校验和是对整个的TCP报文段（包括TCP头部和TCP数据），以16位进行计算所得，由发送端计算和存储，接收端进行验证。</p><p><strong>紧急指针</strong>：只有控制位中的URG为1时才有效，指出本报文段中的紧急数据的字节数。</p><p><strong>选项</strong>：其长度可变，定义其他的可选参数。</p><h3 id="粘包与拆包"><a href="#粘包与拆包" class="headerlink" title="粘包与拆包"></a>粘包与拆包</h3><p>TCP是面向字节流的协议，把上层应用层的数据看成字节流，所以它发送的不是固定大小的数据包，TCP协议也没有字段说明发送数据包的大小。</p><p>而且TCP不保证接受方应用程序收到的数据块和发送应用程序发送的数据块具有对应的大小关系</p><p>比如发送方应用程序交给发送方<code>TCP</code> 10个数据块，接受方TCP可能只用了4个数据块就完整的把接受到的字节流交给了上层应用程序。</p><p>TCP底层并不了解上层业务数据的具体含义，它会根据TCP缓冲区的实际情况进行包的划分，所以在业务上认为，一个完整的包可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装成一个大的数据包发送，这就是所谓的TCP粘包和拆包问题</p><p><strong>TCP粘包/拆包解决策略</strong></p><p>由于TCP无法理解上一层的业务数据特点，所以TCP是无法保证发送的数据包不发生粘包和拆包，这个问题只能通过上层的协议栈设计来解决，解决思路有一下几种：</p><ul><li><p>消息定长：每个发送的数据包大小固定，比如100字节，不足100字节的用空格补充，接受方取数据的时候根据这个长度来读取数据</p></li><li><p>消息末尾增加换行符来表示一条完整的消息：接收方读取的时候根据换行符来判断是否是一条完整的消息，如果消息的内容也包含换行符，那么这种方式就不合适了。</p></li><li><p>将消息分为消息头和消息尾两部分，消息头指定数据长度，根据消息长度来读取完整的消息，例如UDP协议是这么设计的，用两个字节来表示消息长度，所以UDP不存在粘包和拆包问题。</p></li></ul><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-f6a9438e-4eb8-4573-9ef5-30e07b8c31df.png"></p><p><strong>第一次握手</strong>：</p><p>客户端将TCP报文标志位<code>SYN</code>置为1，随机产生一个序号值<code>seq=J</code>，保存在TCP首部的序列号字段里，指明客户端打算连接的服务器的端口，并将该数据包发送给服务器端，发送完毕后，客户端进入<code>SYN_SENT</code>状态，等待服务器端确认。</p><p><strong>第二次握手</strong>：</p><p>服务器端收到数据包后由标志位<code>SYN=1</code>知道客户端请求建立连接，服务器端将TCP报文标志位SYN和ACK都置为1，<code>ack=J+1</code>，随机产生一个序号值<code>seq=K</code>，并将该数据包发送给客户端以确认连接请求，服务器端进入<code>SYN_RCVD</code>状态。</p><p><strong>第三次握手</strong>：</p><p>客户端收到确认后，检查ack是否为<code>J+1</code>，ACK是否为1，如果正确则将标志位ACK置为1，<code>ack=K+1</code>，并将该数据包发送给服务器端，服务器端检查ack是否为<code>K+1</code>，ACK是否为1，如果正确则连接建立成功，客户端和服务器端进入<code>ESTABLISHED</code>状态，完成三次握手，随后客户端与服务器端之间可以开始传输数据了。</p><p><strong>上面写的ack和ACK，不是同一个概念：</strong></p><ul><li><p>小写的ack代表的是头部的确认号Acknowledge number， 缩写ack，是对上一个包的序号进行确认的号，<code>ack=seq+1</code>。</p></li><li><p>大写的ACK，则是我们上面说的TCP首部的标志位，用于标志的TCP包是否对上一个包进行了确认操作，如果确认了，则把ACK标志位设置成1。</p></li></ul><p><strong>TCP为什么三次握手而不是两次握手</strong></p><ul><li><p>为了实现可靠数据传输， TCP 协议的通信双方， 都必须维护一个序列号， 以标识发送出去的数据包中， 哪些是已经被对方收到的。 三次握手的过程即是通信双方相互告知序列号起始值， 并确认对方已经收到了序列号起始值的必经步骤</p></li><li><p>如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认</p></li></ul><p><strong>《计算机网络》中是这样说的：</strong></p><p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p><blockquote><p>在书中同时举了一个例子，如下：</p></blockquote><p>假如<code>client</code>发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达<code>server</code>，本来这是一个早已失效的报文段，但<code>server</code>收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。</p><p>于是就向client发出确认报文段，同意建立连接，假设不采用<strong>三次握手</strong>，那么只要server发出确认，新的连接就建立了，由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。</p><p>但server却以为新的连接已经建立，并一直等待<code>client</code>发来数据，这样，server的很多资源就白白浪费掉了。</p><p>采用<strong>三次握手</strong>的办法可以防止上述现象发生，例如刚才那种情况，client不会向<code>server</code>的确认发出确认，server由于收不到确认，就知道client并没有要求建立连接。</p><p><strong>什么是半连接队列</strong></p><p>服务器第一次收到客户端的 SYN 之后，就会处于 <code>SYN_RCVD</code>状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为<strong>半连接队列</strong>。</p><p>当然还有一个<strong>全连接队列</strong>，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。</p><p>补充一点关于<strong>SYN-ACK 重传次数</strong>的问题：</p><p>服务器发送完SYN－ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传，如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。</p><p><strong>三次握手过程中可以携带数据吗</strong></p><p>其实第三次握手的时候，是可以携带数据的，也就是说，第一次、第二次握手不可以携带数据，而第三次握手是可以携带数据的。</p><p>假如第一次握手可以携带数据的话，如果有人要恶意攻击服务器，那他每次都在第一次握手中的 SYN 报文中放入大量的数据，因为攻击者根本就不理服务器的接收、发送能力是否正常，然后疯狂着重复发 SYN 报文的话，这会让服务器花费很多时间、内存空间来接收这些报文。也就是说，第一次握手可以放数据的话，其中一个简单的原因就是会让服务器更加容易受到攻击了。</p><p>而对于第三次的话，此时客户端已经处于 established 状态，也就是说，对于客户端来说，他已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的了，所以能携带数据没啥毛病。</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-4a5e455f-5cf8-47a6-8fe4-a4c83a445f77.png"></p><p>挥手请求可以是Client端，也可以是Server端发起的，我们假设是Client端发起：</p><ul><li><p>第一次挥手： Client端发起挥手请求，向Server端发送标志位是FIN报文段，设置序列号seq，此时，Client端进入<code>FIN_WAIT_1</code>状态，这表示Client端没有数据要发送给Server端了。</p></li><li><p>第二次挥手：Server端收到了Client端发送的FIN报文段，向Client端返回一个标志位是ACK的报文段，ack设为seq加1，Client端进入<code>FIN_WAIT_2</code>状态，Server端告诉Client端，我确认并同意你的关闭请求。</p></li><li><p>第三次挥手： Server端向Client端发送标志位是FIN的报文段，请求关闭连接，同时Client端进入<code>LAST_ACK</code>状态。</p></li><li><p>第四次挥手 ： Client端收到Server端发送的FIN报文段，向Server端发送标志位是ACK的报文段，然后Client端进入<code>TIME_WAIT</code>状态，Server端收到Client端的ACK报文段以后，就关闭连接，此时，Client端等待2MSL的时间后依然没有收到回复，则证明Server端已正常关闭，那好，Client端也可以关闭连接了。</p></li></ul><p><strong>为什么连接的时候是三次握手，关闭的时候却是四次握手？</strong></p><p>建立连接时因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。所以建立连接只需要三次握手。</p><p>由于TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议，TCP是全双工模式。</p><p>这就意味着，关闭连接时，当Client端发出FIN报文段时，只是表示Client端告诉Server端数据已经发送完毕了。当Server端收到FIN报文并返回ACK报文段，表示它已经知道Client端没有数据发送了，但是Server端还是可以发送数据到Client端的，所以Server很可能并不会立即关闭SOCKET，直到Server端把数据也发送完毕。</p><p>当Server端也发送了FIN报文段时，这个时候就表示Server端也没有数据要发送了，就会告诉Client端，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。</p><p><strong>为什么TIME_WAIT要等待2MSL？</strong></p><p>MSL：报文段最大生存时间，它是任何报文段被丢弃前在网络内的最长时间。</p><p>有以下两个原因：</p><ul><li>第一点：保证TCP协议的全双工连接能够可靠关闭：<br> 由于IP协议的不可靠性或者是其它网络原因，导致了Server端没有收到Client端的ACK报文，那么Server端就会在超时之后重新发送FIN，如果此时Client端的连接已经关闭处于<code>CLOESD</code>状态，那么重发的FIN就找不到对应的连接了，从而导致连接错乱，所以，Client端发送完最后的ACK不能直接进入<code>CLOSED</code>状态，而要保持<code>TIME_WAIT</code>，当再次收到FIN的时候，能够保证对方收到ACK，最后正确关闭连接。 </li><li>第二点：保证这次连接的重复数据段从网络中消失<br> 如果Client端发送最后的ACK直接进入<code>CLOSED</code>状态，然后又再向Server端发起一个新连接，这时不能保证新连接的与刚关闭的连接的端口号是不同的，也就是新连接和老连接的端口号可能一样了，那么就可能出现问题：如果前一次的连接某些数据滞留在网络中，这些延迟数据在建立新连接后到达Client端，由于新老连接的端口号和IP都一样，TCP协议就认为延迟数据是属于新连接的，新连接就会接收到脏数据，这样就会导致数据包混乱，所以TCP连接需要在<code>TIME_WAIT</code>状态等待2倍MSL，才能保证本次连接的所有数据在网络中消失。 </li></ul><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p><strong>RTT和RTO</strong></p><p>RTT：发送一个数据包到收到对应的ACK，所花费的时间</p><p>RTO：重传时间间隔（TCP在发送一个数据包后会启动一个重传定时器，RTO即定时器的重传时间）</p><p>开始预先算一个定时器时间，如果回复ACK，重传定时器就自动失效，即不需要重传；如果没有回复ACK，RTO定时器时间就到了，重传。</p><p>RTO是本次发送当前数据包所预估的超时时间，RTO不是固定写死的配置，是经过RTT计算出来的。</p><p><strong>滑动窗口</strong></p><p>TCP的滑动窗口主要有两个作用：</p><ol><li><p>保证TCP的可靠性</p></li><li><p>保证TCP的流控特性</p></li></ol><p>TCP报文头有个字段叫Window，用于接收方通知发送方自己还有多少缓存区可以接收数据，发送方根据接收方的处理能力来发送数据，不会导致接收方处理不过来，这便是流量控制。</p><p>发送方都维持了一个连续的允许发送的帧的序号，称为发送窗口；同时，接收方也维持了一个连续的允许接收的帧的序号，称为接收窗口。</p><p>发送窗口和接收窗口的序号的上下界不一定要一样，甚至大小也可以不同。</p><p>不同的滑动窗口协议窗口大小一般不同。</p><p>发送方窗口内的序列号代表了那些已经被发送，但是还没有被确认的帧，或者是那些可以被发送的帧</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-d734c97b-d7d6-4af6-8674-524a81fb4dbe.png"></p><p>滑动窗口由四部分组成每个字节的数据都有唯一顺序的编码，随着时间发展，未确认部分与可以发送数据包编码部分向右移动，形式滑动窗口</p><ol><li><code>绿色</code>：发送成功并已经ACK确认的数据</li><li><code>黄色</code>：发送成功等待ACK确认的数据(占用滑动窗口大小)</li><li><code>紫色</code>：滑动窗口剩余大小可以发送的字节数量(滑动窗口可用大小)</li><li><code>灰色</code>：后续数据编码</li></ol><p>接收窗口的大小就是滑动窗口的最大值，数据传输过程中滑动窗口的可用大小是动态变化的。</p><p>但是还有这么一点，滑动窗口的设计仅仅是考虑到了处理方的处理能力，但是没有考虑到道路的通畅问题</p><p>就好像服务端可以处理100M数据，但是传输的数据99M都堵在路上了，这不就是导致道路阻塞了么？这就需要另外一个设计<strong>拥塞避免</strong></p><p><strong>流量控制的目的</strong></p><p>如果发送者发送数据过快，接收者来不及接收，那么就会有分组丢失。</p><p>为了避免分组丢失，控制发送者的发送速度，使得接收者来得及接收，这就是流量控制。</p><p>流量控制根本目的是防止分组丢失，它是构成TCP可靠性的一方面。</p><p><strong>如何实现流量控制</strong></p><p>由滑动窗口协议（连续ARQ协议）实现。滑动窗口协议既保证了分组无差错、有序接收，也实现了流量控制。</p><p>主要的方式就是接收方返回的 ACK 中会包含自己的接收窗口的大小，并且利用大小来控制发送方的数据发送。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-4bdc0051-8878-4ffc-b9db-71b73ec49cd0.png"></p><p><strong>流量控制引发的死锁</strong></p><p>当发送者收到了一个窗口为0的应答，发送者便停止发送，等待接收者的下一个应答。</p><p>但是如果这个窗口不为0的应答在传输过程丢失，发送者一直等待下去，而接收者以为发送者已经收到该应答，等待接收新数据，这样双方就相互等待，从而产生死锁。</p><p>为了避免流量控制引发的死锁，TCP使用了<strong>持续计时器</strong>。每当发送者收到一个零窗口的应答后就启动该计时器。时间一到便主动发送报文询问接收者的窗口大小。若接收者仍然返回零窗口，则重置该计时器继续等待；若窗口不为0，则表示应答报文丢失了，此时重置发送窗口后开始发送，这样就避免了死锁的产生。</p><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p><strong>为什么要进行拥塞控制</strong></p><p>假设网络已经出现拥塞，如果不处理拥塞，那么延时增加，出现更多丢包，触发发送方重传数据，加剧拥塞情况，继续恶性循环直至网络瘫痪。</p><p>拥塞控制与流量控制的适应场景和目的均不同。</p><p>拥塞发生前，可避免流量过快增长拖垮网络；拥塞发生时，唯一的选择就是降低流量。</p><p>主要使用4种算法完成拥塞控制：</p><ol><li>慢启动</li><li>拥塞避免</li><li>快重传算法</li><li>快速恢复算法</li></ol><p>算法1、2适用于拥塞发生前，算法3适用于拥塞发生时，算法4适用于拥塞解决后（相当于拥塞发生前）。</p><p><strong>rwnd与cwnd</strong></p><p><code>rwnd</code>（Receiver Window，接收者窗口）与<code>cwnd</code>（Congestion Window，拥塞窗口）：</p><ul><li><p>rwnd是用于流量控制的窗口大小，主要取决于接收方的处理速度，由接收方通知发送方被动调整。</p></li><li><p>cwnd是用于拥塞处理的窗口大小，取决于网络状况，由发送方探查网络主动调整。</p></li></ul><p>同时考虑流量控制与拥塞处理，则发送方窗口的大小不超过<code>min{rwnd, cwnd}</code>。</p><p><strong>慢启动算法</strong></p><p>慢开始算法的思路就是，不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。</p><p>这里用报文段的个数作为拥塞窗口的大小举例说明慢开始算法，实际的拥塞窗口大小是以字节为单位的。</p><p>一个传输轮次所经历的时间其实就是往返时间RTT，而且每经过一个传输轮次，拥塞窗口cwnd就加倍。</p><p>为了防止cwnd增长过大引起网络拥塞，还需设置一个慢开始门限ssthresh状态变量。</p><blockquote><p>ssthresh的用法如下：</p></blockquote><ul><li><p> cwnd&lt;ssthresh时，使用慢开始算法。 </p></li><li><p> 当cwnd&gt;ssthresh时，改用拥塞避免算法。 </p></li><li><p> 当cwnd=ssthresh时，慢开始与拥塞避免算法任意 </p></li></ul><p>注意，这里的慢并不是指cwnd的增长速率慢，而是指在TCP开始发送报文段时先设置cwnd=1，然后逐渐增大，这当然比按照大的cwnd一下子把许多报文段突然注入到网络中要慢得多。</p><p><strong>拥塞避免算法</strong></p><p>让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。</p><p>这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多</p><p>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有按时收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理），就把慢开始门限ssthresh设置为出现拥塞时的发送窗口大小的一半（但不能小于2）。</p><p>然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。</p><p>这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p><p><strong>整个拥塞控制的流程：</strong></p><p>假定cwnd=24时，网络出现超时（拥塞），则更新后的ssthresh=12，cwnd重新设置为1，并执行慢开始算法。</p><p>当cwnd=12=ssthresh时，改为执行拥塞避免算法</p><p>注意：拥塞避免并非完全能够避免了阻塞，而是使网络比较不容易出现拥塞。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-314eba07-1388-4e8b-9307-8dd8d03b0dfe.png"></p><p><strong>快重传算法</strong></p><p>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方，可提高网络吞吐量约20%）而不要等到自己发送数据时捎带确认。</p><p>快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期</p><p><strong>快恢复算法</strong></p><p>快重传配合使用的还有快恢复算法，有以下两个要点：</p><ul><li><p> 当发送方连续收到三个重复确认时，就把ssthresh门限减半（为了预防网络发生拥塞）。 </p></li><li><p> 但是接下去并不执行慢开始算法 </p></li></ul><p>考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。</p><p>所以此时不执行慢开始算法，而是将cwnd设置为ssthresh减半后的值，然后执行拥塞避免算法，使cwnd缓慢增大。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-3a424e43-405f-494d-b700-093781b63035.png"></p><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p>即套接字，是应用层 与 <code>TCP/IP</code> 协议族通信的中间软件抽象层，表现为一个封装了 TCP / IP协议族 的编程接口（API）</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-eff20ef6-9d35-4075-8c53-ab52c7a46ac7.png"></p><p><code>Socket</code>不是一种协议，而是一个编程调用接口（<code>API</code>），属于传输层（主要解决数据如何在网络中传输）</p><p>对用户来说，只需调用Socket去组织数据，以符合指定的协议，即可通信</p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p><strong>UDP协议特点</strong></p><ul><li><p> UDP是无连接的传输层协议； </p></li><li><p> UDP使用尽最大努力交付，不保证可靠交付； </p></li><li><p> UDP是面向报文的，对应用层交下来的报文，不合并，不拆分，保留原报文的边界； </p></li><li><p> UDP没有拥塞控制，因此即使网络出现拥塞也不会降低发送速率； </p></li><li><p> UDP支持一对一　一对多　多对多的交互通信； </p></li><li><p> UDP的首部开销小，只有８字节 </p></li></ul><p><strong>TCP和UDP的区别</strong></p><ul><li><p>TCP是可靠传输，UDP是不可靠传输;</p></li><li><p>TCP面向连接，UDP无连接;</p></li><li><p>TCP传输数据有序，UDP不保证数据的有序性;</p></li><li><p>TCP不保存数据边界，UDP保留数据边界;</p></li><li><p>TCP传输速度相对UDP较慢;</p></li><li><p>TCP有流量控制和拥塞控制，UDP没有;</p></li><li><p>TCP是重量级协议，UDP是轻量级协议;</p></li><li><p>TCP首部较长20字节，UDP首部较短８字节;</p></li></ul><p><strong>基于TCP和UDP的常用协议</strong></p><p>HTTP、HTTPS、FTP、TELNET、SMTP(简单邮件传输协议)协议基于可靠的TCP协议。</p><p>TFTP、DNS、DHCP、TFTP、SNMP(简单网络管理协议)、RIP基于不可靠的UDP协议</p><h3 id="报文段-1"><a href="#报文段-1" class="headerlink" title="报文段"></a>报文段</h3><p>UDP的报文段共有2个字段：数据字段 + 首部字段</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-a5d0d209-01db-4ee7-b63b-bf2659545702.png"></p><p><strong>UDP报文中每个字段的含义如下：</strong></p><ul><li>源端口：这个字段占据 UDP 报文头的前 16 位，通常包含发送数据报的应用程序所使用的 UDP 端口，接收端的应用程序利用这个字段的值作为发送响应的目的地址，这个字段是可选的，所以发送端的应用程序不一定会把自己的端口号写入该字段中，如果不写入端口号，则把这个字段设置为 0，这样，接收端的应用程序就不能发送响应了。</li><li>目的端口：接收端计算机上 UDP 软件使用的端口，占据 16 位。</li><li>长度：该字段占据 16 位，表示 UDP 数据报长度，包含 UDP 报文头和 UDP 数据长度，因为 UDP 报文头长度是 8 个字节，所以这个值最小为 8。</li><li>校验值：该字段占据 16 位，可以检验数据在传输过程中是否被损坏。</li></ul><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><p>MAC称为物理地址，也叫硬件地址，用来定义网络设备的位置，MAC地址是网卡出厂时设定的，是固定的（但可以通过在设备管理器中或注册表等方式修改，同一网段内的MAC地址必须唯一）。</p><p>MAC地址采用十六进制数表示，长度是6个字节（48位），分为前24位和后24位。</p><blockquote><p>MAC地址对应于OSI参考模型的第二层数据链路层，工作在数据链路层的交换机维护着计算机MAC地址和自身端口的数据库，交换机根据收到的数据帧中的目的MAC地址字段来转发数据帧。</p></blockquote><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>常见的IP地址分为IPv4与IPv6两大类，当前广泛应用的是IPv4，目前IPv4几乎耗尽，下一阶段必然会进行版本升级到IPv6；</p><p>IP地址是以网络号和主机号来标示网络上的主机的，我们把网络号相同的主机称之为本地网络，网络号不相同的主机称之为远程网络主机</p><p>本地网络中的主机可以直接相互通信；远程网络中的主机要相互通信必须通过本地网关（Gateway）来传递转发数据。</p><p>IP地址对应于OSI参考模型的第三层网络层，工作在网络层的路由器根据目标IP和源IP来判断是否属于同一网段，如果是不同网段，则转发数据包。</p><p><strong>IP地址格式和表示</strong></p><p>IP地址(IPv4)由32位二进制数组成，分为4段（4个字节），每一段为8位二进制数（1个字节）</p><p>每一段8位二进制，中间使用英文的标点符号<code>.</code>隔开</p><p>由于二进制数太长，为了便于记忆和识别，把每一段8位二进制数转成十进制，大小为0至255。</p><p>IP地址的这种表示法叫做<strong>点分十进制表示法</strong>。</p><p>IP地址表示为：<code>xxx.xxx.xxx.xxx</code></p><p>举个栗子：<code>210.21.196.6</code>就是一个IP地址的表示。</p><p>计算机的IP地址由两部分组成，一部分为网络标识，一部分为主机标识，同一网段内的计算机网络部分相同，主机部分不能同时重复出现。</p><p><strong>路由器</strong>连接不同网段，负责不同网段之间的数据转发，<strong>交换机</strong>连接的是同一网段的计算机。</p><p>通过设置网络地址和主机地址，在互相连接的整个网络中保证每台主机的IP地址不会互相重叠，即IP地址具有了唯一性。</p><p><strong>IP地址分类详解</strong></p><p>IP地址分A、B、C、D、E五类，其中A、B、C这三类是比较常用的IP地址，D、E类为特殊地址。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-212f3f9b-b07f-4cc9-81eb-55bb478f1b66.png"></p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><p><strong>子网掩码的概念及作用</strong></p><p>通过子网掩码，才能表明一台主机所在的子网与其他子网的关系，使网络正常工作。</p><p>子网掩码和IP地址做与运算，分离出IP地址中的网络地址和主机地址，用于判断该IP地址是在本地网络上，还是在远程网络网上。</p><p>子网掩码还用于将网络进一步划分为若干子网，以避免主机过多而拥堵或过少而IP浪费。</p><p><strong>子网掩码的组成</strong></p><p>同IP地址一样，子网掩码是由长度为32位二进制数组成的一个地址。</p><p>子网掩码32位与IP地址32位相对应，IP地址如果某位是网络地址，则子网掩码为1，否则为0。</p><p>举个栗子：如：<code>11111111.11111111.11111111.00000000</code></p><blockquote><p>左边连续的1的个数代表网络号的长度，（使用时必须是连续的，理论上也可以不连续），右边连续的0的个数代表主机号的长度。</p></blockquote><p><strong>为什么要使用子网掩码</strong></p><p>两台主机要通信，首先要判断是否处于同一网段，即网络地址是否相同。</p><p>如果相同，那么可以把数据包直接发送到目标主机，否则就需要路由网关将数据包转发送到目的地。</p><blockquote><p>可以这么简单的理解：A主机要与B主机通信，A和B各自的IP地址与A主机的子网掩码进行And与运算，看得出的结果：</p><p>1、结果如果相同，则说明这两台主机是处于同一个网段，这样A可以通过ARP广播发现B的MAC地址，B也可以发现A的MAC地址来实现正常通信。</p><p>2、如果结果不同，ARP广播会在本地网关终结，这时候A会把发给B的数据包先发给本地网关，网关再根据B主机的IP地址来查询路由表，再将数据包继续传递转发，最终送达到目的地B。</p></blockquote><hr><blockquote><p>计算机的网关（Gateway）就是到其他网段的出口，也就是路由器接口IP地址。</p><p>路由器接口使用的IP地址可以是本网段中任何一个地址，不过通常使用该网段的第一个可用的地址或最后一个可用的地址，这是为了尽可能避免和本网段中的主机地址冲突。</p></blockquote><p>在如下拓扑图示例中，A与B，C与D，都可以直接相互通信（都是属于各自同一网段，不用经过路由器）</p><p>但是A与C，A与D，B与C，B与D它们之间不属于同一网段，所以它们通信是要经过本地网关，然后路由器根据对方IP地址，在路由表中查找恰好有匹配到对方IP地址的直连路由，于是从另一边网关接口转发出去实现互连</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-e1d68baa-9d8c-4595-bcb5-0dc5f6e240fe.png"></p><p><strong>子网掩码和IP地址的关系</strong></p><p>子网掩码是用来判断任意两台主机的IP地址是否属于同一网络的依据</p><p>拿双方主机的IP地址和自己主机的子网掩码做与运算，如结果为同一网络，就可以直接通信</p><p><strong>如何根据IP地址和子网掩码，计算网络地址：</strong></p><p>将IP地址与子网掩码转换成二进制数。</p><p>将二进制形式的 IP 地址与子网掩码做与运算。</p><p>将得出的结果转化为十进制，便得到网络地址。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-5fab32f0-20d1-4c05-bfb9-47928ceac65d.png"></p><h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><p>网关实质上是一个网络通向其他网络的IP地址。</p><p>比如有网络A和网络B，网络A的IP地址范围为<code>192.168.1.1~192. 168.1.254</code>，子网掩码为<code>255.255.255.0</code>；</p><p>网络B的IP地址范围为<code>192.168.2.1~192.168.2.254</code>，子网掩码为<code>255.255.255.0</code>。</p><p>在没有路由器的情况下，两个网络之间是不能进行TCP/IP通信的，即使是两个网络连接在同一台交换机(或集线器)上，TCP/IP协议也会根据子网掩码(<code>255.255.255.0</code>)判定两个网络中的主机处在不同的网络里。</p><p>而要实现这两个网络之间的通信，则必须通过网关。</p><p>如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机。网络B向网络A转发数据包的过程。</p><p><strong>所以说，只有设置好网关的IP地址，TCP/IP协议才能实现不同网络之间的相互通信。</strong></p><blockquote><p>那么这个IP地址是哪台机器的IP地址呢？</p></blockquote><p>网关的IP地址是具有路由功能的设备的IP地址，具有路由功能的设备有路由器、启用了路由协议的服务器(实质上相当于一台路由器)、代理服务器(也相当于一台路由器)。</p><h3 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h3><p>Ping是我们测试网络连接的常用指令。</p><p>它利用ICMP报文检测网络连接。</p><p><strong>假设A ping B</strong></p><ol><li><p>ping通知系统建立一个固定格式的ICMP请求数据包。</p></li><li><p>ICMP协议打包这个数据包和B的IP地址转交给IP协议层</p></li><li><p>IP层协议将机器B的IP地址为目的地址，本机的IP地址为源地址，加上一些头部必要的控制信息，构建一个IP数据包</p></li><li><p>获取B的MAC地址，做这个操作首先机器A会判断B是否在同一网段内，若IP层协议通过B的IP地址和自己的子网掩码，发现它跟自己属于同一网络，就直接在本网络查找这台机器的MAC，否则则通过路由器进行类似查找。</p></li></ol><blockquote><p>接下来是ARP协议根据IP地址查找MAC地址的过程:</p></blockquote><ul><li><p>若两台机器之前有过通信，在机器A的ARP缓存表里应该存有B的IP与其MAC地址的映射关系。</p></li><li><p>若没有，则通过发送ARP请求广播，得到回应的B机器MAC地址，并交给数据链路层</p></li></ul><ol start="5"><li><p>数据链路层构建一个数据帧，目的地址是IP层传过来的MAC地址，源地址是本机的MAC地址，再附加一些必要的控制信息，依据以太网的介质访问规则将他们传送出去</p></li><li><p>机器B收到这个数据帧后，先检查目的地址，和本机MAC地址对比：</p></li></ol><p>符合，接受，接收后检查该数据帧，将IP数据包从帧中提取出来，交给本机的的IP地址协议层协议，IP协议层检查之后，将有用的信息提取给ICMP协议，后者处理，马上构建一个ICMP应答包，发送给A，其过程和主机A发送ICMP请求包到B的过程类似，但不用ARP广播收取A的信息，因为请求包中已经有足够的信息用于B回应A。</p><p>若不符合，丢弃。</p><p>可以知道PING的过程即一段发送报文和接受确认报文的过程，在来回直接可以计算时延。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>DNS通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。</p><p><strong>通俗的讲</strong>，我们更习惯于记住一个网站的名字，<a href="http://www.baidu.com，而不是记住它的ip地址，比如：167.23.10.2">www.baidu.com，而不是记住它的ip地址，比如：167.23.10.2</a></p><p><strong>工作原理</strong></p><p>将主机域名转换为ip地址，属于应用层协议，使用UDP传输。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-7d129644-dfa7-4151-ae2f-9f3f084c6be9.png"></p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/cs/wangluo-4ed70ed6-ceeb-4761-8fd4-eb2fe092273d.png"></p><p>第一步，客户端向本地DNS服务器发送解析请求</p><p>第二步，本地DNS如有相应记录会直接返回结果给客户端，如没有就向DNS根服务器发送请求</p><p>第三步,DSN根服务器接收到请求，返回给本地服务器一个所查询域的主域名服务器的地址</p><p>第四步，本地dns服务器再向返回的主域名服务器地址发送查询请求</p><p>第五步，主域名服务器如有记录就返回结果，没有的话返回相关的下级域名服务器地址</p><p>第六步，本地DNS服务器继续向接收到的地址进行查询请求</p><p>第七步，下级域名服务器有相应记录，返回结果</p><p>第八步，本地dns服务器将收到的返回地址发给客户端，同时写入自己的缓存，以便下次查询</p><p>DNS域名查询实际上就是个不断递归查询的过程，直到查找到相应结果，需要注意的时，当找不到相应记录，会返回空结果，而不是超时信息</p><h4 id="DNS记录"><a href="#DNS记录" class="headerlink" title="DNS记录"></a>DNS记录</h4><blockquote><p>A记录</p></blockquote><pre class="line-numbers language-none"><code class="language-none">定义www.example.com的ip地址www.example.com.&nbsp;&nbsp;&nbsp;&nbsp; IN&nbsp;&nbsp;&nbsp;&nbsp; A&nbsp;&nbsp;&nbsp;&nbsp; 139.18.28.5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的就是一条 DNS 记录，纯文本即可。</p><p><code>www.example.com</code> 是要解析的域名。</p><p>A 是记录的类型，A 记录代表着这是一条用于解析 IPv4 地址的记录。</p><p>从这条记录可知，<code>www.example.com</code>的 IP 地址是 139.18.28.5。</p><blockquote><p>CNAME</p></blockquote><p>CNAME用于定义域名的别名，如下面这条 DNS 记录：</p><pre class="line-numbers language-none"><code class="language-none">定义www.example.com的别名a.example.com.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IN&nbsp;&nbsp;&nbsp;&nbsp; CNAME&nbsp;&nbsp; b.example.com.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这条 DNS 记录定义了 <code>a.example.com</code> 是 <code>b.example.com</code> 的别名。</p><p>用户在浏览器中输入 <code>a.example.com</code> 时候，通过 DNS 查询会知道 <code>a.example.com</code> 是 <code>b.example.com</code> 的别名，因此需要实际 IP 的时候，会去拿 <code>b.example.com</code> 的 A 记录。</p><p>当你想把一个网站迁移到新域名，旧域名仍然保留的时候；还有当你想将自己的静态资源放到 CDN 上的时候，CNAME 就非常有用。</p><blockquote><p>AAAA 记录</p></blockquote><p>A 记录是域名和 IPv4 地址的映射关系。和 A 记录类似，AAAA 记录则是域名和 IPv6 地址的映射关系。</p><blockquote><p>MX记录</p></blockquote><p>MX 记录是邮件记录，用来描述邮件服务器的域名。</p><p>在工作中，我们经常会发邮件到某个同事的邮箱。</p><p>比如说，发送一封邮件到 <code>xiaoming@xiaoflyfish.com</code>，那么如何知道哪个 IP 地址是邮件服务器呢？</p><p>这个时候就可以用到下面这条 MX 记录：</p><pre class="line-numbers language-none"><code class="language-none">IN MX mail.xiaoflyfish.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>mail.xiaoflyfish.com</code> 的 IP 地址可以通过查询 <code>mail.xiaoflyfishcom </code>的 A 记录和 AAAA 记录获得。</p><blockquote><p>NS 记录</p></blockquote><p>NS记录是描述 DNS 服务器网址。从 DNS 的存储结构上说，Name Server 中含有权威 DNS 服务的目录。</p><p>也就是说，NS 记录指定哪台 Server 是回答 DNS 查询的权威域名服务器。</p><p>当一个 DNS 查询看到 NS 记录的时候，会再去 NS 记录配置的 DNS 服务器查询，得到最终的记录。如下面这个例子：</p><pre class="line-numbers language-none"><code class="language-none">a.com.&nbsp;&nbsp;&nbsp;&nbsp; IN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ns1.a.com.a.com.&nbsp;&nbsp;&nbsp;&nbsp; IN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ns2.a.com.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当解析 <code>a.com</code> 地址时，我们看到 <code>a.com</code> 有两个 NS 记录，所以确定最终 <code>a.com</code> 的记录在 <code>ns1.a.com</code> 和 <code>ns2.a.com</code> 上。</p><p>从设计上看，ns1 和 ns2 是网站 <code>a.com</code> 提供的智能 DNS 服务器，可以提供负载均衡、分布式 Sharding 等服务。</p><p>比如当一个北京的用户想要访问 <code>a.com</code> 的时候，ns1 看到这是一个北京的 IP 就返回一个离北京最近的机房 IP。</p><p>上面代码中 <code>a.com</code> 配置了两个 NS 记录。</p><p>通常 NS 不会只有一个，这是为了保证高可用，一个挂了另一个还能继续服务。</p><p>通常数字小的 NS 记录优先级更高，也就是 ns1 会优先于 ns2 响应。</p><p>配置了上面的 NS 记录后，如果还配置了 <code>a.com</code> 的 A 记录，那么这个 A 记录会被 NS 记录覆盖。</p><h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><p>ARP即地址解析协议， 用于实现从 IP 地址到 MAC 地址的映射，即询问目标IP对应的MAC地址。</p><p><strong>ARP协议的工作过程</strong></p><p>首先，每个主机都会有自己的ARP缓存区中建立一个ARP列表，以表示IP地址和MAC地址之间的对应关系</p><p>当源主机要发送数据时，首先检测ARP列表中是否对应IP地址的目的主机的MAC地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送ARP数据包</p><p>当本网络的所有主机收到该ARP数据包时，首先检查数据包中的IP地址是否是自己的IP地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的IP和MAC地址写入到ARP列表中，如果存在，则覆盖然后将自己的MAC地址写入ARP响应包中，告诉源主机自己是它想要找的MAC地址</p><p>源主机收到ARP响应包后，将目的主机的IP和MAC地址写入ARP列表，并利用此信息发送数据，如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。</p><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>网络传输过程中需要经过很多中间节点，虽然数据无法被解密，但可能被篡改</p><p>数字签名校验数据的完整性</p><p><strong>数字签名有两种功效</strong>：</p><ul><li><p>能确定消息确实是由发送方签名并发出来的，因为别人假冒不了发送方的签名。</p></li><li><p>数字签名能确定消息的完整性，证明数据是否未被篡改过。</p></li></ul><p>将一段文本先用Hash函数生成消息摘要，然后用发送者的私钥加密生成数字签名，与原文文一起传送给接收者</p><p>接收者只有用发送者的公钥才能解密被加密的摘要信息，然后用HASH函数对收到的原文产生一个摘要信息，与上一步得到的摘要信息对比。</p><p>如果相同，则说明收到的信息是完整的，在传输过程中没有被修改，否则说明信息被修改过，因此数字签名能够验证信息的完整性。</p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>SQL注入的原理是将SQL代码伪装到输入参数中，传递到服务器解析并执行的一种攻击手法。</p><p><strong>SQL注入攻击实例</strong></p><p>比如，在一个登录界面，要求输入用户名和密码，可以这样输入实现免帐号登录：</p><pre class="line-numbers language-none"><code class="language-none">用户名： ‘or 1 = 1 --密 码：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用户一旦点击登录，如若没有做特殊处理，那么这个非法用户就很得意的登陆进去了。</p><p>下面我们分析一下：从理论上说，后台认证程序中会有如下的SQL语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">String <span class="token keyword">sql</span> <span class="token operator">=</span> “<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_table <span class="token keyword">where</span> username<span class="token operator">=</span>’ “<span class="token operator">+</span>userName<span class="token operator">+</span>” ’ <span class="token operator">and</span> password<span class="token operator">=</span>’ “<span class="token operator">+</span>password<span class="token operator">+</span>” ‘”<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此，当输入了上面的用户名和密码，上面的SQL语句变成：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_table <span class="token keyword">WHERE</span> username<span class="token operator">=</span>’’<span class="token operator">or</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span> –<span class="token operator">-</span> <span class="token operator">and</span> password<span class="token operator">=</span>’’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>分析上述SQL语句我们知道，<code>username=‘ or 1=1</code> 这个语句一定会成功；然后后面加<code>两个 -</code>，这意味着注释，它将后面的语句注释，让他们不起作用，这样，上述语句永远都能正确执行，用户轻易骗过系统，获取合法身份。</p><p><strong>应对方法</strong></p><blockquote><p>预编译</p></blockquote><p>使用预编译手段，绑定参数是最好的防SQL注入的方法。</p><p>目前许多的ORM框架及JDBC等都实现了SQL预编译和参数绑定功能，攻击者的恶意SQL会被当做SQL的参数而不是SQL命令被执行。</p><p>在mybatis的mapper文件中，对于传递的参数我们一般是使用 ## 和<code>$</code>来获取参数值。</p><p>当使用#时，变量是占位符，就是一般我们使用java的jdbc的PrepareStatement时的占位符，所有可以防止sql注入；</p><p>当使用<code>$</code>时，变量就是直接追加在sql中，一般会有sql注入问题。</p><blockquote><p>使用正则表达式过滤传入的参数</p></blockquote><blockquote><p>过滤参数中含有的一些数据库关键词</p></blockquote><h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><p>加密算法分<strong>对称加密</strong> 和 <strong>非对称加密</strong>，其中对称加密算法的加密与解密密钥相同，非对称加密算法的加密密钥与解密密钥不同，此外，还有一类不需要密钥的<strong>散列算法</strong>。</p><p>常见的 <strong>对称加密</strong> 算法主要有 <code>DES</code>、<code>3DES</code>、<code>AES</code> 等，常见的 <strong>非对称算法</strong> 主要有 <code>RSA</code>、<code>DSA</code> 等，<strong>散列算法</strong> 主要有 <code>SHA-1</code>、<code>MD5</code> 等。</p><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>在 <strong>对称加密算法</strong> 中，使用的密钥只有一个，发送和接收双方都使用这个密钥对数据进行 <strong>加密</strong> 和 <strong>解密</strong>。</p><ul><li><p> 数据加密过程：在对称加密算法中，数据发送方 将 <strong>明文</strong> (原始数据) 和 <strong>加密密钥</strong> 一起经过特殊 <strong>加密处理</strong>，生成复杂的 <strong>加密密文</strong> 进行发送。 </p></li><li><p> 数据解密过程：<strong>数据接收方</strong> 收到密文后，若想读取原数据，则需要使用 <strong>加密使用的密钥</strong> 及相同算法的 <strong>逆算法</strong> 对加密的密文进行解密，才能使其恢复成 <strong>可读明文</strong>。 </p></li></ul><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p><strong>非对称加密算法</strong>，它需要两个密钥，一个称为 <strong>公开密钥</strong> (<code>public key</code>)，即 <strong>公钥</strong>，另一个称为 <strong>私有密钥</strong> (<code>private key</code>)，即 <strong>私钥</strong>。</p><p>因为 <strong>加密</strong> 和 <strong>解密</strong> 使用的是两个不同的密钥，所以这种算法称为 <strong>非对称加密算法</strong>。</p><ol><li><p>如果使用 <strong>公钥</strong> 对数据 <strong>进行加密</strong>，只有用对应的 <strong>私钥</strong> 才能 <strong>进行解密</strong>。</p></li><li><p>如果使用 <strong>私钥</strong> 对数据 <strong>进行加密</strong>，只有用对应的 <strong>公钥</strong> 才能 <strong>进行解密</strong>。</p></li></ol><p><strong>例子</strong>：甲方生成 <strong>一对密钥</strong> 并将其中的一把作为 <strong>公钥</strong> 向其它人公开，得到该公钥的 <strong>乙方</strong> 使用该密钥对机密信息 <strong>进行加密</strong> 后再发送给甲方，甲方再使用自己保存的另一把 <strong>专用密钥</strong> (<strong>私钥</strong>)，对 <strong>加密</strong> 后的信息 <strong>进行解密</strong>。</p><h2 id="网络攻击"><a href="#网络攻击" class="headerlink" title="网络攻击"></a>网络攻击</h2><h3 id="CSRF和XSS"><a href="#CSRF和XSS" class="headerlink" title="CSRF和XSS"></a>CSRF和XSS</h3><p><strong>XSS：</strong></p><p>跨站脚本是一种网站应用程序的安全漏洞攻击，是代码注入的一种。</p><p>它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响，这类攻击通常包含了HTML以及用户端脚本语言。</p><p>比如通过客户端脚本语言（最常见如：JavaScript）</p><p>在一个论坛发帖中发布一段恶意的JavaScript代码就是脚本注入，如果这个代码内容有请求外部服务器，那么就叫做XSS</p><p><strong>XSS攻击分类</strong></p><blockquote><p>反射性XSS攻击 (非持久性XSS攻击)</p></blockquote><p>例如，正常发送消息：</p><pre class="line-numbers language-none"><code class="language-none">http://www.test.com/message.php?send=Hello,World！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接收者将会接收信息并显示HelloWorld；但是，非正常发送消息：</p><pre class="line-numbers language-none"><code class="language-none">http://www.test.com/message.php?send=&lt;script&gt;alert(‘foolish!’)&lt;/script&gt;！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接收者接收消息显示的时候将会弹出警告窗口！</p><blockquote><p>持久性XSS攻击 (留言板场景)</p></blockquote><p>一般指XSS攻击代码存储在网站数据库，当一个页面被用户打开的时候执行。</p><p>也就是说，每当用户使用浏览器打开指定页面时，脚本便执行。</p><p>与非持久性XSS攻击相比，持久性XSS攻击危害性更大。</p><p>从名字就可以了解到，持久性XSS攻击就是将攻击代码存入数据库中，然后客户端打开时就执行这些攻击代码。</p><p>例如，留言板表单中的表单域：</p><pre class="line-numbers language-none"><code class="language-none">&lt;input type="text" name="content" value="这里是用户填写的数据"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常操作流程是：用户是提交相应留言信息 — 将数据存储到数据库 — 其他用户访问留言板，应用去数据并显示；</p><p>而非正常操作流程是攻击者在value填写:</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;alert(‘foolish!’)；&lt;/script&gt; &lt;!--或者html其他标签（破坏样式。。。）、一段攻击型代码--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并将数据提交、存储到数据库中；当其他用户取出数据显示的时候，将会执行这些攻击性代码</p><p><strong>CSRF：</strong></p><p>跨站请求伪造，是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</p><p>比如冒充用户发起请求（在用户不知情的情况下），完成一些违背用户意愿的请求（如恶意发帖，删帖，改密码，发邮件等）。</p><h3 id="DOS攻击"><a href="#DOS攻击" class="headerlink" title="DOS攻击"></a>DOS攻击</h3><p>DOS：中文名称是拒绝服务，该攻击的效果是使得计算机或网络无法提供正常的服务</p><p><strong>DOS攻击的原理：</strong></p><p>首先攻击者向被攻击的服务器发送大量的虚假IP请求，被攻击者在收到请求后返回确认信息，等待攻击者进行确认，该过程需要TCP的三次握手，由于攻击者发送的请求信息是虚假的，所以服务器接收不到返回的确认信息，在一段时间内服务器会处与等待状态，而分配给这次请求的资源却被有被释放</p><p>当被攻击者等待一定的时间后，会因连接超时而断开，这时攻击者在次发送新的虚假信息请求，这样最终服务器资源被耗尽，直到瘫痪</p><p><strong>DDOS：中文名称是分布式拒绝服务攻击</strong></p><p>指的是攻击者控制多台主机同时向同一主机或网络发起<code>DOS</code>攻击</p><p>DRDoS分布反射式拒绝服务攻击这是<code>DDoS</code>攻击的变形</p><p><strong>DDOS究竟如何攻击</strong></p><p>目前最流行也是最好用的攻击方法就是使用<code>SYN-Flood</code>进行攻击，SYN-Flood也就是SYN洪水攻击</p><p>SYN-Flood不会完成TCP三次握手的第三步，也就是不发送确认连接的信息给服务器，这样，服务器无法完成第三次握手，但服务器不会立即放弃，服务器会不停的重试并等待一定的时间后放弃这个未完成的连接，这段时间叫做<code>SYN timeout</code>，这段时间大约30秒-2分钟左右。</p><p>若是一个用户在连接时出现问题导致服务器的一个线程等待1分钟并不是什么大不了的问题，但是若有人用特殊的软件大量模拟这种情况，那后果就可想而知了。一个服务器若是处理这些大量的半连接信息而消耗大量的系统资源和网络带宽，这样服务器就不会再有空余去处理普通用户的正常请求(因为客户的正常请求比率很小)，这样这个服务器就无法工作了，这种攻击就叫做<code>SYN-Flood</code>攻击</p><p>到目前为止，进行DDoS攻击的防御还是比较困难的</p><p>首先，这种攻击的特点是它利用了TCP/IP协议的漏洞，除非你不用TCP/IP，才有可能完全抵御住DDoS攻击</p><p>不过这不等于我们就没有办法阻挡DDoS攻击，我们可以尽力来减少DDoS的攻击</p><p><strong>下面就是一些防御方法:</strong></p><ol><li><p>关闭不必要的服务</p></li><li><p>限制同时打开的SYN半连接数目</p></li><li><p>缩短SYN半连接的time out 时间</p></li><li><p>正确设置防火墙</p></li><li><p>禁止对主机的非开放服务的访问</p></li><li><p>限制特定IP地址的访问</p></li><li><p>启用防火墙的防DDoS的属性</p></li></ol><h2 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h2><p>Session 是<strong>基于Cookie 实现</strong>的另一种记录服务端和客户端会话状态的机制。</p><p>Session 是存储在服务端，而 SessionId 会被存储在客户端的 Cookie 中。</p><p>Session 的<strong>认证过程</strong>：</p><ol><li>客户端第一次发送请求到服务端，服务端根据信息创建对应的 Session，并在响应头返回 SessionID</li><li>客户端接收到服务端返回的 SessionID 后，会将此信息存储在 Cookie 上，同时会记录这个 SessionID 属于哪个域名</li><li>当客户端再次访问服务端时，请求会自动判断该域名下是否存在 Cookie 信息，如果有则发送给服务端，服务端会从 Cookie 中拿到 SessionID，再根据 SessionID 找到对应的 Session，如果有对应的 Session 则通过，继续执行请求，否则就中断</li></ol><p><strong>Cookie和Session的区别</strong></p><ol><li>安全性，因为 Cookie 可以通过客户端修改，而 Session 只能在服务端设置，所以安全性比 Cookie 高，一般会用于验证用户登录状态</li><li>适用性，Cookie 只能存储字符串数据，而 Session 可以存储任意类型数据</li><li>有效期，Cookie 可以设置任意时间有效，而 Session 一般失效时间短</li></ol><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><p><strong>在浏览器地址栏键入URL</strong></p><p>1.DNS解析：浏览器会依据URL逐层查询DNS服务器缓存，解析URL中的域名对应的IP地址，DNS缓存从近到远依次是浏览器缓存、系统缓存、路由器缓存、IPS服务器缓存、域名服务器缓存、顶级域名服务器缓存。</p><p>从哪个缓存找到对应的IP直接返回，不再查询后面的缓存。</p><p>2.TCP连接：结合三次握手</p><p>3.发送HTTP请求：浏览器发出读取文件的HTTP请求，该请求发送给服务器</p><p>4.服务器处理请求并返回HTTP报文：服务器对浏览器请求做出响应，把对应的带有HTML文本的HTTP响应报文发送给浏览器</p><p>5.浏览器解析渲染页面</p><p>6.连接结束：浏览器释放TCP连接，该步骤即四次挥手。</p><p>第5步和第6步可以认为是同时发生的，哪一步在前没有特别的要求</p><hr><blockquote><p>作者：月伴飞鱼，转载链接：<a href="https://mp.weixin.qq.com/s/7EddtzpwIRvYfw34QE4zvw">https://mp.weixin.qq.com/s/7EddtzpwIRvYfw34QE4zvw</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql安装</title>
      <link href="/2023/09/18/mysql-an-zhuang/"/>
      <url>/2023/09/18/mysql-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>​        大家好，因为我安装过一次但是中途需要其他版本的mysql因此卸了重装，但是因为卸载有残留导致一直安装不了，网上找了很多解决办法，然后有一些经验，想来分享给大家。</p><p>​        如果安装过的小伙伴们重新安装却没成功，有极大的可能是因为之前的mysql没有彻底删除干净。我就属于这类，在执行bin目录下操作的时候就出现各种问题，说已经安装过，目录在哪个地方，结果找了没找到提示的文件夹，就很离谱。因此请一定要参考<a href="https://zhidao.baidu.com/question/1610345422403289347.html">如何让彻底删除mysql</a>。</p><h3 id="在这里我的电脑是Windows，因此我介绍的是windows安装"><a href="#在这里我的电脑是Windows，因此我介绍的是windows安装" class="headerlink" title="在这里我的电脑是Windows，因此我介绍的是windows安装"></a>在这里我的电脑是Windows，因此我介绍的是windows安装</h3><p>在MySQL<a href="http://dev.mysql.com/downloads/mysql/">官网（点击官网）</a>上面下载ZIP安装包（第二个：Windows (x86, 64- bit), ZIP Archive）。</p><p><img src="https://i.loli.net/2021/02/25/mik9vJYgUxjMlB1.png" alt="image-20210225132659495"></p><p>然后点击箭头指向那一段英文，意思是寻找以前的GA版本，什么叫GA呢，感兴趣的可以去百度一下，这类版本市场上应用的比较多。</p><p><img src="https://i.loli.net/2021/02/25/GNq9ph6RVkJb2FO.png" alt="image-20210225133045184"></p><p>然后其他不用管   直接滑下来找到这个   看你的电脑是32位还是64位的，32位就下载上面那个，下载完成之后解压，放到你想放的文件夹中</p><p><img src="https://i.loli.net/2021/02/25/wGz1h3lsJOy7tXH.png" alt="image-20210225133338416"></p><p>解压完之后点进去，在这个目录下创建my.ini文件和data文件夹  这两个文件本身是没有的，然后用编辑器打开my.ini文件，随便用一个都行，里面是空的</p><pre class="line-numbers language-none"><code class="language-none">[mysql] default-character-set=utf8[mysqld] port = 3306 basedir=C:\mysql\mysql-5.7.33-winx64\ datadir=C:\mysql\mysql-5.7.33-winx64\data\ max_connections=200 character-set-server=utf8 default-storage-engine=INNODBexplicit_defaults_for_timestamp=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把这段代码复制进去，注意修改路径，我的路径和你们的可能不一样，只需要修改basedir和datadir这两个后面的路径，其余的不用管</p><p><img src="https://i.loli.net/2021/02/25/EUANnhCaTjK8RI4.png" alt="image-20210225133905139"></p><p>像这样复制粘贴就行</p><p><img src="https://i.loli.net/2021/02/25/DWVEC6sLIAd82MG.png" alt="image-20210225134454124"></p><p>以管理员身份运行，点进去，CMD都可以，然后进入刚才文件夹里的bin目录</p><p><img src="https://i.loli.net/2021/02/25/ItloJvG3Yp7xMAg.png" alt="image-20210225134737638"></p><p><img src="https://i.loli.net/2021/02/25/Guf63sRQ7UytBcq.png" alt="image-20210225135035826"></p><p>需要进入到bin目录，如果是跨盘操作，就需要先转盘如上图，再来cd 后面复制粘贴你的bin目录的路径</p><p>上面的一些代码我都会放到下面，直接复制粘贴就好。</p><p>1.以管理员身份运行cmd，进入bin目录</p><p>2.执行 mysqld –initialize-insecure –user=mysql 命令。不进行这一 步，安装完成之后无法启动服务。</p><p>3.依然在管理员cmd窗口的bin目录下，执行 mysqld install 命令安装。完成后会提示安装成功。 </p><p>4.依然在管理员cmd窗口的bin目录下，执行 net start mysql 命令启动MySQL服务。</p><p>5.修改环境变量，添加”D:\MySQL5.7\mysql-5.7.17-winx64\bin”。 </p><p>这里的路径是你的路径，也是到bin目录下。找到此电脑右键点击属性，属性里面有个高级系统设置，点击之后找到环境变量点击，就会出现类似于这个画面</p><p><img src="https://i.loli.net/2021/02/25/IJve34YSAoV7auy.png" alt="image-20210225143711890"></p><p>找到下面的path点击编辑，进去之后点击新建，把路径复制到上面然后点击确定，都点确定，就完成了。至此算是安装好了。</p><p>6.在普通cmd窗口中，进入bin目录，执行 mysql -u root -p 命令，默认没有密码，回车进入。</p><p><img src="https://i.loli.net/2021/02/25/pHwB5FWVOfr3nvE.png" alt="image-20210225143607702"></p><p>最后这样算是搞定了。</p><h4 id="之后还有个小福利，我也是网上找到的，Navicat的安装与破解，点击我便可以浏览了，好东西大家分享哈哈哈。"><a href="#之后还有个小福利，我也是网上找到的，Navicat的安装与破解，点击我便可以浏览了，好东西大家分享哈哈哈。" class="headerlink" title="之后还有个小福利，我也是网上找到的，Navicat的安装与破解，点击我便可以浏览了，好东西大家分享哈哈哈。"></a>之后还有个小福利，我也是网上找到的，Navicat的安装与破解，<a href="https://www.cnblogs.com/poloyy/p/12231357.html">点击我</a>便可以浏览了，好东西大家分享哈哈哈。</h4><h2 id="mysql没清理完吃了太多亏，只想说一句，难搞。。。"><a href="#mysql没清理完吃了太多亏，只想说一句，难搞。。。" class="headerlink" title="mysql没清理完吃了太多亏，只想说一句，难搞。。。"></a>mysql没清理完吃了太多亏，只想说一句，难搞。。。</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/18/hello-world/"/>
      <url>/2023/09/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis高阶</title>
      <link href="/2023/03/22/2023-03-22-redis-gao-jie/"/>
      <url>/2023/03/22/2023-03-22-redis-gao-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、redis是单线程吗"><a href="#一、redis是单线程吗" class="headerlink" title="一、redis是单线程吗"></a>一、redis是单线程吗</h2><p>redis在3.x版本及以前是单线程，但是在4.x以及以后引入了多线程，并且在redis6.x版本多线程成熟</p><h3 id="1-为什么开始是单线程"><a href="#1-为什么开始是单线程" class="headerlink" title="1. 为什么开始是单线程"></a>1. 为什么开始是单线程</h3><p>单线程是指网络IO和键值对读写是由一个线程来完成的。</p><p>但Redis的其他功能，比如持久化RDB、AOF、异步删除、集群数据同步等等，其实是由额外的线程或进程执行的。Redis命令工作线程是单线程的，但是，整个Redis来说，是多线程的；</p><ul><li>redis是基于内存来操作的，性能较高</li><li>redis的数据结构是专门设计的，都是kv键值对，大部分复杂度都是o(1)</li><li>redis使用I/O多路复用来监听多个socket客户端，这样一个线程就能处理多个socket请求，这样就减少了线程切换的开销，同时也避免了I/O阻塞操作</li><li>单线程不会导致死锁发生</li></ul><h3 id="2-为什么是后续用多线程"><a href="#2-为什么是后续用多线程" class="headerlink" title="2. 为什么是后续用多线程"></a>2. 为什么是后续用多线程</h3><h4 id="2-1-单线程的瓶颈"><a href="#2-1-单线程的瓶颈" class="headerlink" title="2.1 单线程的瓶颈"></a>2.1 单线程的瓶颈</h4><ul><li>单线程不会有死锁，但是会阻塞，尤其是有<strong>大key</strong>的情况下会造成阻塞、</li><li>redis的性能瓶颈是内存与带宽而并非cpu，单线程永远只能使用到一核的cpu</li></ul><h4 id="2-2-多线程的引入"><a href="#2-2-多线程的引入" class="headerlink" title="2.2 多线程的引入"></a>2.2 多线程的引入</h4><p>为了解决上述问题，在redis4.0就新增了多线程操作，此多线程是为了解决删除效率比较低的问题。<strong>但从网络IO处理到实际的读写命令处理，都还是是由单个线程完成的。</strong></p><p><strong>从redis6开始，正式引入多线程</strong>。随着网络硬件的性能提升，Redis的性能瓶颈有时会出现在网络IO的处理上，也就是说，单个主线程处理网络请求的速度跟不上底层网络硬件的速度。为了应对这个问题:<strong>采用多个IO线程来处理网络请求，提高网络请求处理的并行度，Redis6/7就是采用的这种方法。</strong></p><p>但是，<strong>Redis的多IO线程只是用来处理网络请求的，对于读写操作命令Redis仍然使用单线程来处理。</strong>这是因为，Redis处理请求时，网络处理经常是瓶颈，通过多个IO线程并行处理网络操作，可以提升实例的整体处理性能。而继续使用单线程执行命令操作，就不用为了保证Lua脚本、事务的原子性，额外开发多线程互斥加锁机制了(不管加锁操作处理)，这样一来，Redis线程模型实现就简单了</p><h4 id="2-3-如何工作"><a href="#2-3-如何工作" class="headerlink" title="2.3 如何工作"></a>2.3 如何工作</h4><p>多线程的引入说简单点就是，处理I/0用的多线程，但是对redis的读写还是单线程。</p><h5 id="1-单线程时"><a href="#1-单线程时" class="headerlink" title="(1) 单线程时"></a>(1) 单线程时</h5><p>I/O 的读和写本身是堵塞的，比如当 socket 中有数据时，Redis 会通过调用先将数据从内核态空间拷贝到用户态空间，再交给 Redis 调用，而这个拷贝的过程就是阻塞的，当数据量越大时拷贝所需要的时间就越多，而这些操作都是基于单线程完成的。</p><p><img src="https://s2.loli.net/2023/04/17/QWme9qyULBE1tZd.png" alt="单线程"></p><h5 id="2-多线程时"><a href="#2-多线程时" class="headerlink" title="(2) 多线程时"></a>(2) 多线程时</h5><p>从Redis6开始，就新增了多线程的功能来提高 I/O 的读写性能，他的主要实现思路是将主线程的 IO 读写任务拆分给一组独立的线程去执行，这样就可以使多个 socket 的读写可以并行化了，采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络IO的时间消耗），将最耗时的Socket的读取、请求解析、写入单独外包出去，剩下的命令执行仍然由主线程串行执行并和内存的数据交互。</p><p><img src="https://s2.loli.net/2023/04/17/K1kaX7FR4GEu2Wx.png" alt="多线程"></p><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><p>redis这么快的原因</p><ul><li>基于内存</li><li>单线程避免切换</li><li>IO多路复用 + epoll函数使用</li></ul><p>redis6/7的多线程是默认关闭的，如需要开启需要修改redis.conf中的THREADED I/O模块下</p><h2 id="二、BigKey"><a href="#二、BigKey" class="headerlink" title="二、BigKey"></a>二、BigKey</h2><p>经典面试题：</p><h3 id="1-大数据下的查询查询操作"><a href="#1-大数据下的查询查询操作" class="headerlink" title="1. 大数据下的查询查询操作"></a>1. 大数据下的查询查询操作</h3><ol><li><p>为了防止在海量数据中使用到，<code>keys *</code>,<code>flushall</code>,<code>flushdb</code>等命令，如何操作？</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 直接禁用，在redis.conf的SECURITY模块下修改# 找到# rename-command CONFIG ""模块，在下面新增# 想把哪个命令禁用，就把它配置为空字符串# rename-command CONFIG ""  rename-command keys  ""  rename-command flushall  ""  rename-command flushdb  ""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不能用<code>keys *</code>,那应该用什么？</p><p><a href="https://redis.io/commands/scan/">官网</a></p><p>SCAN命令和与之密切相关的SSCAN、HSCAN和ZSCAN命令是为了在一个元素集合上进行递增式迭代。<br>SCAN迭代当前选定的Redis数据库中的键集合。<br>SSCAN 迭代 Sets 类型的元素。<br>HSCAN 迭代 Hash 类型的字段和它们的相关值。<br>ZSCAN 迭代排序集类型的元素和它们的相关分数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># cursor 游标# pattern 匹配模式# count 指定返回数量 默认为10 # type 数据类型 注意 zkey与geokey无法区分   因为geo数据类型也是zsetSCAN cursor [MATCH pattern] [COUNT count] [TYPE type]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SCAN 命令是一个基于游标的迭代器，每次被调用之后， 都会向用户返回一个新的游标， 用户在下次迭代时需要使用这个新游标作为 SCAN 命令的游标参数， 以此来延续之前的迭代过程。</p><p>SCAN的遍历顺序非常特别，它不是从第一维数组的第零位一直遍历到末尾，而是采用了高位进位加法来遍历。之所以使用这样特殊的方式进行遍历，是考虑到字典的扩容和缩容时避免槽位的遍历重复和遗漏。</p><p>使用案例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">redis 127.0.0.1:6379&gt; scan 01) "17"2)  1) "key:12"    2) "key:8"    3) "key:4"    4) "key:14"    5) "key:16"    6) "key:17"    7) "key:15"    8) "key:10"    9) "key:3"   10) "key:7"   11) "key:1"redis 127.0.0.1:6379&gt; scan 171) "0"2) 1) "key:5"   2) "key:18"   3) "key:0"   4) "key:2"   5) "key:19"   6) "key:13"   7) "key:6"   8) "key:9"   9) "key:11"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>游标的使用，第一次从0开始，会返回一个新的游标和数据，第二次查询根据这个新的游标来查询，直到游标为0即遍历玩所有的key</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 游标为0 匹配为包含x字符 显示数量为10条 数据类型为set127.0.0.1:9999&gt; scan 0 MATCH *x* COUNT 10 TYPE set1) "6"2) 1) "sxin"   2) "sxin2"127.0.0.1:9999&gt; scan 6 MATCH *x* COUNT 10 TYPE set1) "23"2) 1) "sxin1"127.0.0.1:9999&gt; scan 23 MATCH *x* COUNT 10 TYPE set1) "0"2) (empty array)127.0.0.1:9999&gt; scan 0 MATCH *x* COUNT 100 TYPE set1) "0"2) 1) "sxin"   2) "sxin2"   3) "sxin1"127.0.0.1:9999&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们可以看到，第一次匹配查询只查出两条，第二次又查出一条。是为什么呢？</p><p>需要注意的是，<code>COUNT</code>参数只是控制每次迭代返回的键值对数量，并不保证每次返回的数量一定等于指定的<code>COUNT</code>值。实际返回的数量可能小于或者等于<code>COUNT</code>值。</p></li></ol><h3 id="2-多大算bigkey"><a href="#2-多大算bigkey" class="headerlink" title="2.多大算bigkey"></a>2.多大算bigkey</h3><p>bigkey不是key大，而是key对应的value大</p><p>string类型10kb就算大key</p><p>list，hash，set元素个数超过5000就算dakey</p><h3 id="3-Bigkey危害"><a href="#3-Bigkey危害" class="headerlink" title="3. Bigkey危害"></a>3. Bigkey危害</h3><ul><li>内存不均，集群迁移困难</li><li>超时删除，阻塞</li><li>网络I/O阻塞</li></ul><h3 id="4-查询bigkey"><a href="#4-查询bigkey" class="headerlink" title="4. 查询bigkey"></a>4. 查询bigkey</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查询bigkey# 扫描整个钥匙空间，找到最大的钥匙以及# 每个键类型的平均大小。 你可以使用-i 0.1来休眠0.1秒# 每100条SCAN命令（通常不需要）。redis-cli --bigkeys# MEMORY USAGE命令报告了一个键和它的值在RAM中需要存储的字节数。# 返回字节数MEMORY USAGE key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-如何删除"><a href="#5-如何删除" class="headerlink" title="5. 如何删除"></a>5. 如何删除</h3><p>string的bigkey可以用unlink异步删除</p><p>除了string类型，其余用渐进式删除，利用hscan，zscan等，查出一部分删掉字段，最后删除空的key。</p><p>案例：</p><p><img src="https://s2.loli.net/2023/04/17/12VLFa7B56tvnSd.png" alt="hash删除"></p><h3 id="6-如何调优"><a href="#6-如何调优" class="headerlink" title="6. 如何调优"></a>6. 如何调优</h3><p>在redis.conf中LAZY FREEING模块，可以配置在默认使用del时使用异步删除</p><p><img src="https://s2.loli.net/2023/04/17/nO4pAVlJ25MCLY8.png" alt="image-20230324150815373"></p><p>将这三个改为yes</p><h2 id="三、布隆过滤器（BoolmFilter）"><a href="#三、布隆过滤器（BoolmFilter）" class="headerlink" title="三、布隆过滤器（BoolmFilter）"></a>三、布隆过滤器（BoolmFilter）</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>布隆过滤器(Bloom Filter) 是一种专门用来解决去重问题的高级数据结构。</p><p>实质就是一个大型*<strong>位数组*</strong>和几个不同的无偏hash函数(无偏表示分布均匀)。由一个初值都为零的bit数组和多个个哈希函数构成，用来快速判断某个数据是否存在。但是跟 HyperLogLog 一样，它也一样有那么一点点不精确，也存在一定的误判概率</p><p>布隆过滤器默认误差率为百分之三，可以手动设置误差率，误差率越小，所需的bit位越多，所需的hash函数越多</p><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h3><p><strong>添加key时</strong></p><p>使用多个hash函数对key进行hash运算得到一个整数索引值，对位数组长度进行取模运算得到一个位置，<br>每个hash函数都会得到一个不同的位置，将这几个位置都置1就完成了add操作。</p><p><strong>查询key时</strong></p><p>只要有其中一位是零就表示这个key不存在，但如果都是1，则不一定存在对应的key。<br><strong><em>结论：**</em></strong>有，是可能有           无，是肯定无**</p><h3 id="3-缺点"><a href="#3-缺点" class="headerlink" title="3. 缺点"></a>3. 缺点</h3><ul><li>不能删除元素，删除元素会导致误判率增加，因为hash冲突，在同一个位置可能存在东西是共同的，删除的时候并不知道删除的是哪一个</li><li>存在误判的可能不能精准过滤</li></ul><h2 id="四、分布式锁"><a href="#四、分布式锁" class="headerlink" title="四、分布式锁"></a>四、分布式锁</h2><p><a href="https://redis.io/docs/manual/patterns/distributed-locks/">官网</a></p><p>redis可以实现分布式锁,分布式锁的演化</p><ul><li>加锁 setnx，解锁 del，问题：服务宕机无法解锁，造成死锁</li><li>给锁设置过期时间，问题：还没到解锁步骤，锁自动释放，当前线程会释放掉下一线程的锁</li><li>释放锁的时候判断是不是自己的。问题：判断锁再释放的步骤不是原子操作，可能导致判断锁成功，要释放锁的时候锁过期了</li><li>判断锁到释放锁用lua脚本实现原子操作，用lua脚本实现锁的续期功能</li><li>可重入锁</li></ul><p>官方给出一个分布式锁的实现标准，redLock。</p><h3 id="1-redlock"><a href="#1-redlock" class="headerlink" title="1. redlock"></a>1. redlock</h3><p>算法：假设有多个独立的主站，节点完全独立，尝试获取锁的线程会有以下结果步骤：</p><ol><li>获取当前时间，单位是毫秒</li><li>尝试从多个节点中获得锁，所有节点中使用相同的键名和随机值，当在每个实例中设置锁时，客户端使用一个与总的锁自动释放时间相比很小的超时来获取它。例如，如果自动释放时间是10秒，超时可以在~ 5-50毫秒范围内。这可以防止客户端在试图与Redis节点对话时长时间受阻：如果一个实例不可用，我们应该尽快尝试与下一个实例对话。</li><li>客户端通过从当前时间减去步骤1中获得的时间戳，计算出获取锁所需的时间。如果并且只有当客户端能够在大多数实例中获得锁，并且获得锁的总时间小于锁的有效期，锁才被认为是获得的。</li><li>如果获得了锁，其有效时间被认为是初始有效时间减去经过的时间</li><li>如果客户端由于某种原因未能获得锁（要么它无法锁定N/2+1个实例，要么有效性时间为负数），它将尝试解锁所有实例（甚至是它认为无法锁定的实例）。</li></ol><p>解释：</p><ol><li>为什么设置多个独立的主站，因为考虑到单点故障问题导致锁无法获取也无法释放</li><li>为什么不能用集群或者主从复制，因为集群的master主键共享，无法创建多个相同的主键，主从复制会导致主节点故障时未能将锁的信息同步给slave，导致从节点上位却不能释放锁。</li></ol><h3 id="2-redisson"><a href="#2-redisson" class="headerlink" title="2. redisson"></a>2. redisson</h3><p>java提供了redisson作为redLock的实现，<a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8">官网</a></p><p>基于Redis的Redisson红锁<code>RedissonRedLock</code>对象实现了<a href="http://redis.cn/topics/distlock.html">Redlock</a>介绍的加锁算法。</p><h2 id="五、redis过期淘汰策略"><a href="#五、redis过期淘汰策略" class="headerlink" title="五、redis过期淘汰策略"></a>五、redis过期淘汰策略</h2><h3 id="1-redis内存"><a href="#1-redis内存" class="headerlink" title="1. redis内存"></a>1. redis内存</h3><h4 id="查看最大占用内存"><a href="#查看最大占用内存" class="headerlink" title="查看最大占用内存"></a>查看最大占用内存</h4><p>redis.conf中MEMORY MANAGEMENT模块中</p><p><img src="https://s2.loli.net/2023/04/17/tpSnbJPky3TM2Il.png" alt="image-20230328110915131"></p><p>配置文件没有设置，在redis命令中查看</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看最大内存config get maxmemory# 查看内存使用info memory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/gMrPbXy4nqGDQUC.png" alt="image-20230328114421065"></p><p>默认内存为0</p><p>解释：如果redis的最大内存不设置或者为0，在64位的操作系统下不限制内存大小，32位的操作系统下最多使用3GB内存</p><h4 id="设置内存"><a href="#设置内存" class="headerlink" title="设置内存"></a>设置内存</h4><p>如何设置，<strong>一般情况下设置为物理内存的3/4</strong>，设置方法</p><ul><li><p>修改配置文件中的<code>maxmemory &lt;bytes&gt;</code>，记住单位为字节</p></li><li><p>命令修改</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 设置最大内存config set maxmemory &lt;bytes&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-内存占满报错"><a href="#2-内存占满报错" class="headerlink" title="2. 内存占满报错"></a>2. 内存占满报错</h3></li></ul><p><img src="https://s2.loli.net/2023/04/17/R5jfpNmLD3wFrMe.png" alt="image-20230328134754002"></p><p>​    如果key不设置过期时间，在内存占满的情况下报错，为避免上述情况，就出现了过期淘汰策略</p><h3 id="3-淘汰策略"><a href="#3-淘汰策略" class="headerlink" title="3. 淘汰策略"></a>3. 淘汰策略</h3><p>先说一下删除key的方法：</p><ul><li>立即删除，缺点：对cpu不友好，拿时间换空间</li><li>惰性删除，缺点：对内存不友好，拿空间换时间</li><li>定时删除，折中方案，但是删除的频率不好控制，定时删除是定期扫描一部分样本删除过期的key</li></ul><p>都有缺点，所以就有了redis的内存淘汰策略,在redis.conf中的MEMORY MANAGEMENT模块</p><ul><li>LRU：最近最少使用页面置换算法，淘汰最长时间未被使用的页面，看页面最后一次被使用到发生调度的时间长短，首先淘汰最长时间未被使用的页面。</li><li>LFU：最近最不常用页面置换算法，淘汰一定时期内被访问次数最少的页，看一定时间段内页面被使用的频率，淘汰一定时期内被访问次数最少的页</li></ul><p>解释：</p><ol><li>noeviction: 不会驱逐任何key，表示即使内存达到上限也不进行置换，所有能引起内存增加的命令都会返回error（默认）</li><li>allkeys-lru: 对所有key使用LRU算法进行删除，优先删除掉最近最不经常使用的key，用以保存新数据</li><li>volatile-lru: 对所有设置了过期时间的key使用LRU算法进行删除</li><li>allkeys-random: 对所有key随机删除</li><li>volatile-random: 对所有设置了过期时间的key随机删除</li><li>volatile-ttl: 删除马上要过期的key</li><li>allkeys-lfu: 对所有key使用LFU算法进行删除</li><li>volatile-lfu: 对所有设置了过期时间的key使用LFU算法进行删除</li></ol><p>如何选择？</p><p>不确定就选择allkeys-lru，所有key都是最近最经常使用就选择allkeys-lru<br>如果所有key访问概率差不多，则选择allkeys-random</p><h3 id="4-性能建议"><a href="#4-性能建议" class="headerlink" title="4. 性能建议"></a>4. 性能建议</h3><ul><li>避免存储bigkey</li><li>开启惰性淘汰lazyfree-lazy-eviction yes</li></ul><h2 id="六、redis数据结构底层原理"><a href="#六、redis数据结构底层原理" class="headerlink" title="六、redis数据结构底层原理"></a>六、redis数据结构底层原理</h2><h3 id="1-string"><a href="#1-string" class="headerlink" title="1. string"></a>1. string</h3><p>Redis中的string底层采用了简单动态字符串（SDS）的实现。SDS是Redis自己实现的一种字符串类型，相较于C语言中的字符串（以’\0’结尾的字符数组），SDS有以下优势：</p><ol><li>O(1)时间复杂度的获取字符串长度</li><li>杜绝缓冲区溢出</li><li>减少修改字符串时内存重分配的次数</li></ol><p>SDS由以下结构体表示：</p><pre class="line-numbers language-none"><code class="language-none">cCopy codestruct sdshdr {    int len; // 记录字符串的长度    int free; // 记录未使用的空间的长度    char buf[]; // 字符串实际存储的数组};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SDS通过使用<code>len</code>和<code>free</code>两个变量来实现O(1)时间复杂度的获取字符串长度。其中<code>len</code>变量记录了字符串实际的长度，而<code>free</code>变量记录了未使用的空间的长度。这样，在修改字符串时，只需要检查<code>free</code>变量是否足够，如果不够，就需要进行内存重分配。</p><p>SDS的另一个优点是，它可以动态地扩展和收缩空间，而且扩展和收缩的过程中，只需要在需要的时候分配或者释放额外的空间，而不是每次修改字符串都重新分配空间，这样可以减少内存分配和复制的次数，提高Redis的性能。</p><p>总之，Redis中的string底层采用了SDS的实现，这种实现方式具有优秀的性能和灵活的空间管理能力，是Redis中字符串操作的重要基础。</p><h3 id="2-hash"><a href="#2-hash" class="headerlink" title="2. hash"></a>2. hash</h3><p>hash的两种编码结构：</p><p>​    redis6：ziplist(压缩列表),hashtable</p><p>​    redis7: listpack(紧凑列表),hashtable</p><h4 id="redis6"><a href="#redis6" class="headerlink" title="redis6"></a>redis6</h4><ul><li><strong>hash-max-ziplist-entries：使用压缩列表保存时哈希集合中的最大entrie个数，键值对为一个entrie,默认为512。</strong></li><li><strong>hash-max-ziplist-value：使用压缩列表保存时哈希集合中单个元素的最大长度，单位字节，默认为64</strong></li></ul><p>这是通过<code>config get hash*</code>查看得到的默认配置，当上述两个条件都满足时用ziplist，否则转为hashtable</p><p><strong>为什么使用ziplist？</strong></p><p>为节约内存而开发，采用了紧凑的连续存储。不能存储过多元素，否则查询效率低下，查询效率为log(n)<br>缺点：新增或更新元素可能会出现连锁更新现象(致命缺点导致被listpack替换)。</p><p><strong>为什么不用啥双向链表？</strong></p><p>双向链表存储的是上下两个的地址，压缩列表存储的是上一个 entry的长度和当前entry的长度，存储地址耗费的内存比长度大。</p><h4 id="redis7"><a href="#redis7" class="headerlink" title="redis7"></a>redis7</h4><ul><li><strong>hash-max-listpack-entries：使用压缩列表保存时哈希集合中的最大元素个数。键值对为一个entrie,默认为512。</strong></li><li><strong>hash-max-listpack-value：使用压缩列表保存时哈希集合中单个元素的最大长度。单位字节，默认为64</strong></li></ul><p>通过<code>config get hash*</code>查看的到默认配置，为了兼容redis6，redis7还是保留了ziplist，但是在redis7中最终其作用的是listpack</p><p><strong>什么是listpack？</strong></p><p><img src="https://s2.loli.net/2023/04/17/VQcfDFj9wC4HL3A.png" alt="image-20230403150051731"></p><p> listpack 中每个节点不再包含前一个节点的长度</p><p><strong>为什么从ziplist变为listpack？</strong></p><p>ziplist的连锁更新问题：压缩列表新增某个元素或修改某个元素时，如果空间不不够，压缩列表占用的内存空间就需要重新分配。而当新插入的元素较大时，可能会导致后续元素的 prevlen 占用空间都发生变化（prevlen节点为记录前节点的长度，根据长度会分配不同的内存空间，分别为1字节（长度小于等于254）和5字节（长度大于254）。为什么不是255呢，因为最后的结束标志为1字节，255长度，所以不能用），从而引起「连锁更新」问题，导致每个元素的空间都要重新分配，造成访问压缩列表性能的下降。</p><p>listpack 没有压缩列表中记录前一个节点长度的字段了，listpack 只记录当前节点的长度，当我们向 listpack 加入一个新元素的时候，不会影响其他节点的长度字段的变化，从而避免了压缩列表的连锁更新问题。</p><p><strong>但是redis中默认元素长度大于64就会转为hashtable，那就可以不用担心元素长度大于254时引发的连锁更新的问题。</strong></p><p>妈的，学了个寂寞。除非就是公司通过各方面评估修改了这个默认长度，否则ziplist完全够用。</p><h3 id="3-list"><a href="#3-list" class="headerlink" title="3. list"></a>3. list</h3><p>quicklist就是「双向链表 + 压缩列表」组合，因为一个 quicklist 就是一个链表，而链表中的每个元素又是一个压缩列表</p><p>quicklist 实际上是 zipList 和 linkedList 的混合体，它将 linkedList按段切分，每一段使用 zipList 来紧凑存储，多个 zipList 之间使用双向指针串接起来。</p><p>(1) ziplist压缩配置：list-compress-depth 0</p><p>   表示一个quicklist两端不被压缩的节点个数。这里的节点是指quicklist双向链表的节点，而不是指ziplist里面的数据项个数</p><p>参数list-compress-depth的取值含义如下：</p><p>​    0: 是个特殊值，表示都不压缩。这是Redis的默认值。<br>​    1: 表示quicklist两端各有1个节点不压缩，中间的节点压缩。<br>​    2: 表示quicklist两端各有2个节点不压缩，中间的节点压缩。<br>​    3: 表示quicklist两端各有3个节点不压缩，中间的节点压缩。<br>​    依此类推…</p><p>(2) ziplist中entry配置：list-max-ziplist-size -2</p><p>  当取正值的时候，表示按照数据项个数来限定每个quicklist节点上的ziplist长度。比如，当这个参数配置成5的时候，表示每个quicklist节点的ziplist最多包含5个数据项。当取负值的时候，表示按照占用字节数来限定每个quicklist节点上的ziplist长度。这时，它只能取-1到-5这五个值，</p><p>每个值含义如下：</p><p>-5: 每个quicklist节点上的ziplist大小不能超过64 Kb。（注：1kb =&gt; 1024 bytes）<br>-4: 每个quicklist节点上的ziplist大小不能超过32 Kb。<br>-3: 每个quicklist节点上的ziplist大小不能超过16 Kb。<br>-2: 每个quicklist节点上的ziplist大小不能超过8 Kb。（-2是Redis给出的默认值）<br>-1: 每个quicklist节点上的ziplist大小不能超过4 Kb。</p><h3 id="4-set"><a href="#4-set" class="headerlink" title="4. set"></a>4. set</h3><p>Redis用intset或hashtable存储set。如果元素都是整数类型，就用intset存储。</p><p>如果不是整数类型，就用hashtable（数组+链表的存来储结构）。key就是元素的值，value为null。</p><h3 id="5-zset"><a href="#5-zset" class="headerlink" title="5. zset"></a>5. zset</h3><ul><li>redis6: ziplist与skiplist（跳表）</li><li>redis7: listpack与skiplist(跳表)</li></ul><p>当有序集合中包含的元素数量超过服务器属性 server.zset_max_ziplist_entries 的值（默认值为 128 ），</p><p>或者有序集合中新添加元素的 member 的长度大于服务器属性 server.zset_max_ziplist_value 的值（默认值为 64 ）时</p><p>redis会使用跳跃表作为有序集合的底层实现。</p><p>否则会使用ziplist作为有序集合的底层实现</p><h4 id="跳表-ziplist"><a href="#跳表-ziplist" class="headerlink" title="跳表(ziplist)"></a>跳表(ziplist)</h4><p>一般链表查询的时间复杂度为O(n)，为了优化查询的时间，于是就有了跳表。</p><p>skiplist是一种以空间换取时间的结构。</p><p>由于链表，无法进行二分查找，因此借鉴数据库索引的思想，提取出链表中关键节点（索引），先在关键节点上查找，再进入下层链表查找，提取多层关键节点，就形成了跳跃表</p><p><strong>优点：</strong></p><p>跳表是一个最典型的空间换时间解决方案，而且只有在数据量较大的情况下才能体现出来优势。而且应该是读多写少的情况下才能使用，所以它的适用范围应该还是比较有限的</p><p><strong>缺点：</strong> </p><p>维护成本相对要高，</p><p>在单链表中，一旦定位好要插入的位置，插入结点的时间复杂度是很低的，就是O(1) </p><p>but</p><p>新增或者删除时需要把所有索引都更新一遍，为了保证原始链表中数据的有序性，我们需要先找</p><p>到要动作的位置，这个查找操作就会比较耗时最后在新增和删除的过程中的更新，时间复杂度也是O(log n)</p><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p><img src="https://s2.loli.net/2023/04/17/M6EOH1wR2TmbAzp.png" alt="image-20230403155249159"></p><ol><li><p>字符串</p><ul><li><p>int:8个字节的长整型。</p></li><li><p>embstr:小于等于44个字节的字符串。</p></li><li><p>raw:大于44个字节的字符串。</p></li><li><p>Redis会根据当前值的类型和长度决定使用哪种内部编码实现。</p></li></ul></li><li><p>哈希</p><ul><li><p>ziplist(压缩列表):当哈希类型元素个数小于hash-max-ziplist-entries 配置(默认512个)、同时所有值都小于hash-max-ziplist-value配置(默认64 字节)时，</p></li><li><p>Redis会使用ziplist作为哈希的内部实现，ziplist使用更加紧凑的 结构实现多个元素的连续存储，所以在节省内存方面比hashtable更加优秀。</p></li><li><p>hashtable(哈希表):当哈希类型无法满足ziplist的条件时，Redis会使 用hashtable作为哈希的内部实现，因为此时ziplist的读写效率会下降，而hashtable的读写时间复杂度为O(1)。</p></li></ul></li><li><p>列表</p><ul><li><p>ziplist(压缩列表):当列表的元素个数小于list-max-ziplist-entries配置 (默认512个)，同时列表中每个元素的值都小于list-max-ziplist-value配置时 (默认64字节)，</p></li><li><p>Redis会选用ziplist来作为列表的内部实现来减少内存的使 用。</p></li><li><p>linkedlist(链表):当列表类型无法满足ziplist的条件时，Redis会使用 linkedlist作为列表的内部实现。quicklist ziplist和linkedlist的结合以ziplist为节点的链表(linkedlist)</p></li></ul></li><li><p>集合</p><ul><li><p>intset(整数集合):当集合中的元素都是整数且元素个数小于set-max-intset-entries配置(默认512个)时，Redis会用intset来作为集合的内部实现，从而减少内存的使用。</p></li><li><p>hashtable(哈希表):当集合类型无法满足intset的条件时，Redis会使用hashtable作为集合的内部实现。</p></li></ul></li><li><p>有序集合</p><ul><li><p>ziplist(压缩列表):当有序集合的元素个数小于zset-max-ziplist- entries配置(默认128个)，同时每个元素的值都小于zset-max-ziplist-value配 置(默认64字节)时，</p></li><li><p>Redis会用ziplist来作为有序集合的内部实现，ziplist 可以有效减少内存的使用。</p></li><li><p>skiplist(跳跃表):当ziplist条件不满足时，有序集合会使用skiplist作 为内部实现，因为此时ziplist的读写效率会下降。</p></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis篇</title>
      <link href="/2023/03/03/2023-03-03-redis-pian/"/>
      <url>/2023/03/03/2023-03-03-redis-pian/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p><a href="http://redis.cn/">中文网</a>        <a href="https://redis.io/">官网</a>        <a href="http://redisdoc.com/">语法速查表</a></p><p>官方介绍：</p><p>​    Redis是一个开源（BSD许可）的内存数据结构存储，被用作数据库、缓存、消息代理和流引擎。Redis提供的数据结构包括：字符串、哈希值、列表、集合、带范围查询的排序集合、位图、超日志、地理空间索引和流。Redis有内置的复制、Lua脚本、LRU驱逐、事务和不同级别的磁盘持久性，并通过Redis Sentinel和Redis Cluster的自动分区提供高可用性。</p><h2 id="2-优点"><a href="#2-优点" class="headerlink" title="2.优点"></a>2.优点</h2><ul><li>数据存储在内存，读写速度快，能达到一万到十几万每秒的速度</li><li>支持持久化，便于数据备份，恢复</li><li>支持事务，满足原子性操作</li><li>支持主从复制</li><li>集群搭建，哨兵机制，实现故障的自动转移</li></ul><h2 id="3-缺点"><a href="#3-缺点" class="headerlink" title="3.缺点"></a>3.缺点</h2><ul><li>存储的内存数据出现故障容易丢失</li><li>存储容量受物理内存限制，在线扩容困难</li><li>容易出现缓存雪崩，缓存击穿，缓存穿透等问题</li><li>缓存和数据库一致性问题</li></ul><h2 id="4-使用场景"><a href="#4-使用场景" class="headerlink" title="4.使用场景"></a>4.使用场景</h2><ul><li>缓存（数据一一致性，即时性要求不高的。 访问量大且频率不高的）</li><li>分步式锁</li><li>计数器</li><li>全局id</li></ul><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><h2 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1.拉取镜像"></a>1.拉取镜像</h2><p>这边使用docker安装redis：<a href="https://hub.docker.com/">docker镜像仓库地址</a>，第一次可能需要登录，注册一个账号就行</p><p>搜索栏搜索redis</p><p><img src="https://s2.loli.net/2023/04/17/Tc5CnFKUMSeXhIw.png" alt="image-20230303162029208"></p><p>选择第一个官方镜像</p><p><img src="https://s2.loli.net/2023/04/17/rOI9auDB6MfLdFN.png" alt="image-20230303162347177.png"></p><p>里面可以看到他支持的一些版本</p><p>在docker中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看redis镜像docker search redis# 拉取redis镜像,不指定版本号就是拉取最新redis。docker pull redis# 指定版本号写法，可以看下上面支持的版本 比如我就拉取7.0.9docker pull redis:7.0.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/E1fcw34SQPBrqHn.png" alt="image-20230303162747520.png"></p><p>证明拉取成功，使用<code>docker images</code>查看镜像</p><p><img src="https://s2.loli.net/2023/04/17/bcFWP7aflv6kJ8p.png" alt="image-20230303163019739"></p><h2 id="2-创建实例"><a href="#2-创建实例" class="headerlink" title="2.创建实例"></a>2.创建实例</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#创建挂载目录mkdir -p /home/docker/reids/conf#创建redis.conf文件touch /home/docker/redis/conf/redis.conf# 创建运行容器docker run --name redis -p 6379:6379 \-v /home/docker/redis/conf:/usr/local/etc/redis \-v /home/docker/redis/data:/data \-d redis:7.0.9 redis-server /usr/local/etc/redis/redis.confdocker run --name redis2 -p 9997:9997 \-v /home/docker/redis2/conf:/usr/local/etc/redis \-v /home/docker/redis2/data:/data \-d redis:7.0.9 redis-server /usr/local/etc/redis/redis.conf# 查看挂载的redis.conf为空cat /home/docker/redis/conf/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>五点几版本需要在创建实例之前加上挂在目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建运行容器docker run --name redis -p 6379:6379 \-v /home/docker/redis/conf/redis.conf:/etc/redis/redis.conf \-v /home/docker/redis/data:/data \-d redis redis-server /etc/redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://redis.io/docs/management/config/">redis.conf配置文件官网</a>，往下滑找到</p><p><img src="https://s2.loli.net/2023/04/17/AnkLlFBdVONIvqi.png" alt="image-20230303170941475"></p><p>因为配置的是最新版，所以点击最新的配置文件，里面是一个文本。直接复制下来粘贴到redis.conf里面去</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi /home/docker/redis/conf/redis.conf# 重新启动redisdocker restart redis# 查看是否启动成功,有的话代表成功了docker ps# 进入容器docker exec -it redis /bin/bash# 查看目录下是否有redis.conf,有的话至此安装成功cat /usr/local/etc/redis/redis.conf# 退出exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1持久化配置"><a href="#2-1持久化配置" class="headerlink" title="2.1持久化配置"></a>2.1持久化配置</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 修改配置文件 找到appendonly no 改为appendonly yes# 这个修改是为了redis数据的持久化vi /home/docker/redis/conf/redis.confappendonly yes#重启redisdocker restart redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2密码设置"><a href="#2-2密码设置" class="headerlink" title="2.2密码设置"></a>2.2密码设置</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 启动redis的命令行客户端docker exec -it redis redis-cli# 配置redis的密码,默认redis是没有密码的,这是临时密码，redis重启后就没了CONFIG SET requirepass "xin1999"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3配置文件修改"><a href="#2-3配置文件修改" class="headerlink" title="2.3配置文件修改"></a>2.3配置文件修改</h3><p><img src="https://s2.loli.net/2023/04/17/cC9HzksbGAxfUhe.png" alt="image-20230307150159477"></p><p>之前的配置是bind 127.0.0.1，我们要改成bind 0.0.0.0或者直接把这一行注释掉。这代表的是开启所有ip地址的访问权限，如果是127.0.0.1的话，那么就只能是云服务器自己跟自己玩儿，不能远程连接。<a href="https://www.cnblogs.com/browselife/p/11220980.html">关于redis bind的正确理解</a></p><p><img src="https://s2.loli.net/2023/04/17/e7JabOEhU3j85qy.png" alt="image-20230307150516901"></p><p>把protected-mode从yes改成no，这代表关闭防护，允许远程连接。</p><p><img src="https://s2.loli.net/2023/04/17/8D5dUIriOTkeZqN.png" alt="image-20230307173451426"></p><p>daemonize 设置yes或者no区别</p><ul><li>daemonize:yes:redis采用的是单进程多线程的模式。当redis.conf中选项daemonize设置成yes时，代表开启守护进程模式。在该模式下，redis会在后台运行，并将进程pid号写入至redis.conf选项pidfile设置的文件中，此时redis将一直运行，除非手动kill该进程。</li><li>daemonize:no: 当daemonize选项设置成no时，当前界面将进入redis的命令行界面，exit强制退出或者关闭连接工具(putty,xshell等)都会导致redis进程退出。</li></ul><h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><h2 id="1-windows使用工具"><a href="#1-windows使用工具" class="headerlink" title="1.windows使用工具"></a>1.windows使用工具</h2><h2 id="2-项目使用"><a href="#2-项目使用" class="headerlink" title="2.项目使用"></a>2.项目使用</h2><h3 id="2-1引入依赖"><a href="#2-1引入依赖" class="headerlink" title="2.1引入依赖"></a>2.1引入依赖</h3><p>因为在spring-boot里面集成了redis，<a href="https://docs.spring.io/spring-boot/docs/3.0.4/reference/htmlsingle/#getting-started">官网</a></p><p><img src="https://s2.loli.net/2023/04/17/pd3sc78MO1N4o5l.png" alt="image-20230306101344105"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2相关配置"><a href="#2-2相关配置" class="headerlink" title="2.2相关配置"></a>2.2相关配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># redis主机地址</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 121.36.81.74    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实到这里就直接可以简单使用了</p><p><img src="https://s2.loli.net/2023/04/17/MNkvXtAYR914GFg.png" alt="image-20230306105653419"></p><p>在redisAutoConfiguration中bean注入了两个，一个是键值对是object的，另外一个是StringRedisTemplate</p><p><img src="https://s2.loli.net/2023/04/17/jdkqL913tE26cOa.png" alt="image-20230306105938376"></p><p>又看到StringRedisTemplate其实是继承了键值对都是string的RedisTemplate。通常我们使用键值对都是string的就行了。</p><h3 id="2-3基本使用"><a href="#2-3基本使用" class="headerlink" title="2.3基本使用"></a>2.3基本使用</h3><p><a href="https://docs.spring.io/spring-data/redis/docs/current/api/org/springframework/data/redis/core/StringRedisTemplate.html">StringRedisTemplate官网查看使用</a>，这边介绍一下常用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//检查key是否存在，返回boolean值</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token comment">//根据key获取缓存中value</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token comment">//截取key键对应缓存中的字符串，从开始下标位置开始到结束下标的位置(包含结束下标)</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token keyword">long</span> start<span class="token punctuation">,</span><span class="token keyword">long</span> end<span class="token punctuation">)</span><span class="token comment">//向缓存中存入key值对应的value数据</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token comment">//覆盖从指定位置开始的值</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">String</span> value<span class="token punctuation">,</span><span class="token keyword">long</span> offset<span class="token punctuation">)</span><span class="token comment">//向缓存中存入数据，并指定过期时间</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">String</span> value<span class="token punctuation">,</span><span class="token class-name">Duration</span> timeout<span class="token punctuation">)</span><span class="token comment">//向缓存中存入数据，并指定过期时间</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">String</span> value<span class="token punctuation">,</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token comment">//向缓存中存入数据，以map形式存储</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向缓存中存入数据</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">Object</span> hashkey<span class="token punctuation">,</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除缓存</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">Object</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>hashkeys<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以增量形式存储</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以增量的方式将long值存储在变量中,相当于一个计数器（计算 +）</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token keyword">long</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以增量的方式将double值存储在变量中,相当于一个计数器（计算 +）</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token keyword">double</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取key对应的map</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token comment">//设置过期时间</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">Duration</span> timeout<span class="token punctuation">)</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-序列化问题"><a href="#2-4-序列化问题" class="headerlink" title="2.4 序列化问题"></a>2.4 序列化问题</h3><h1 id="四、redis问题"><a href="#四、redis问题" class="headerlink" title="四、redis问题"></a>四、redis问题</h1><h2 id="1-缓存穿透"><a href="#1-缓存穿透" class="headerlink" title="1.缓存穿透"></a>1.缓存穿透</h2><h3 id="1-1原因"><a href="#1-1原因" class="headerlink" title="1.1原因"></a>1.1原因</h3><p>查询一个指定的不存在的数据，由于缓存没有命中就会去查询数据库，但是数据库也没有这个数据。因此会返回一个null。此事并有将null写入缓存。导致下次查询还是会去数据库查询。当用户使用这条不存在的数据疯狂发起查询请求的时候，对数据库造成的压力就非常大，甚至可能直接挂掉。</p><h3 id="1-2-解决方案"><a href="#1-2-解决方案" class="headerlink" title="1.2 解决方案"></a>1.2 解决方案</h3><ul><li>null结果缓存，并加入短暂过期时间（推荐）<ol><li>需要缓存层提供更多的内存空间来缓存这些空对象，当这种空对象很多的时候，就会浪费更多的内存</li><li>会导致缓存层和存储层的数据不一致，即使在缓存空对象时给它设置了一个很短的过期时间，那也会导致这一段时间内的数据不一致问题。</li></ol></li><li>加入布隆过滤器进行筛选<ol><li>布隆过滤器判断存在的key实际上可能是不存在的，但布隆过滤器判断不存在的key是一定不存在的。</li><li>删除元素比较难，比如现在要删除key2这个元素，那么需要将2/7/11三个位置的元素值改为0，但这样就会影响到key1和key3的判断。</li></ol></li></ul><h2 id="2-缓存击穿"><a href="#2-缓存击穿" class="headerlink" title="2.缓存击穿"></a>2.缓存击穿</h2><h3 id="2-1原因"><a href="#2-1原因" class="headerlink" title="2.1原因"></a>2.1原因</h3><p>热点数据的key设置了过期时间，大量请求访问该key的时候，key过期了。到最后请求全部访问到db。db可能会崩</p><h3 id="2-2-解决方案"><a href="#2-2-解决方案" class="headerlink" title="2.2 解决方案"></a>2.2 解决方案</h3><ul><li><p>设置热点key永不过期</p></li><li><p>加锁（推荐），当缓存失效的时候，只允许一个线程去数据库查询并且写入缓存，其余线程等待或者直接返回</p><p>步骤是： 获取锁 -&gt; 查询缓存为空 -&gt; 查询数据库 -&gt; 写入缓存 -&gt; 释放锁</p></li></ul><h2 id="3-缓存雪崩"><a href="#3-缓存雪崩" class="headerlink" title="3.缓存雪崩"></a>3.缓存雪崩</h2><h3 id="3-1原因"><a href="#3-1原因" class="headerlink" title="3.1原因"></a>3.1原因</h3><ol><li><p>大量缓存同一时间失效，导致请求全部转发到数DB，DB压力过大导致雪崩</p></li><li><p>redis宕机</p></li></ol><h3 id="3-2-解决方案"><a href="#3-2-解决方案" class="headerlink" title="3.2 解决方案"></a>3.2 解决方案</h3><ol><li><ul><li><p>在失效时间的基础上加一个随机值，比如1-5分钟，这样缓存同时失效的概率就会降低。</p></li><li><p>服务降级</p></li></ul></li><li><ul><li>集群分布</li></ul></li></ol><h2 id="4-数据一致性问题"><a href="#4-数据一致性问题" class="headerlink" title="4.数据一致性问题"></a>4.数据一致性问题</h2><p><strong>强一致性：</strong>数据写进去是什么样，读出来就是什么样；</p><p><strong>最终一致性：</strong>数据写入成功后，系统不保证能立刻读出最新的数据，也不承诺多久之后数据可以达到一致，但保证到某个时间级别后，数据能达到一致；</p><p>因为数据库与用户之间多了一层缓存，数据是无法达到同步的，想要强一致性就不能加缓存，只能直接读数据库。</p><p>加入缓存智能尽可能的保证数据的最终一致性同步节点能更早。</p><h3 id="4-1-数据的更新策略"><a href="#4-1-数据的更新策略" class="headerlink" title="4.1 数据的更新策略"></a>4.1 数据的更新策略</h3><ul><li>先更新缓存，再更新数据库</li><li>先更新数据库，再更新缓存</li><li>先删除缓存，再更新数据库</li><li>先更新数据库，在删除缓存</li><li>缓存延时双删，先删除缓存，再更新数据库，隔几秒再删除缓存</li></ul><h5 id="（1）先更新缓存，再更新数据库"><a href="#（1）先更新缓存，再更新数据库" class="headerlink" title="（1）先更新缓存，再更新数据库"></a>（1）先更新缓存，再更新数据库</h5><p>问题：更新数据库失败，导致需要回退缓存，在回退缓存之前的数据都是脏数据</p><h5 id="（2）先更新数据库，再更新缓存"><a href="#（2）先更新数据库，再更新缓存" class="headerlink" title="（2）先更新数据库，再更新缓存"></a>（2）先更新数据库，再更新缓存</h5><p>问题：因为数据库与redis是分布式的，缓存可能会更新不成功。这样缓存就会一直都是以前的数据</p><h5 id="（3）先删除缓存，再更新数据库"><a href="#（3）先删除缓存，再更新数据库" class="headerlink" title="（3）先删除缓存，再更新数据库"></a>（3）先删除缓存，再更新数据库</h5><p>问题：A用户更新数据，先删除缓存，B用户查询缓存未命中，就会去查询数据库。</p><p>这里有两种情况：</p><ol><li> 由查询来更新缓存，会导致查询到A用户还没更新好的数据，导致缓存存储的还是以前的数据</li><li>由更新操作来更新缓存，就又回到了第二个问题上去了</li><li>更新与查询都来更新缓存，会导致B用户拿到以前的数据而在A用户之后更新缓存，导致缓存还是以前的数据</li></ol><h5 id="（4）先更新数据库，在删除缓存"><a href="#（4）先更新数据库，在删除缓存" class="headerlink" title="（4）先更新数据库，在删除缓存"></a>（4）先更新数据库，在删除缓存</h5><p>问题：</p><ul><li>更新数据库这段时间其他用户查询到的数据都是以前的数据，不过这是比较理想的最终一致性的解决方案</li><li>删除缓存从失败，查询的还是旧值</li></ul><h5 id="（5）缓存延时双删"><a href="#（5）缓存延时双删" class="headerlink" title="（5）缓存延时双删"></a>（5）缓存延时双删</h5><p>问题：就是优化了第（3）个 1 问题，隔几秒再删一次。但是在更新数据的时候还是会拿到以前的数据。不过满足了最终一致性</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>上面的结果是在4 5 里面选，最终推荐方案为 <strong>先更新数据库，在删除缓存</strong><br>最后还需要说的是：还有一个cannel的解决而方案，cannel是模仿从数据库来对主数据库进行交互的，从而感知到数据库的变化来作相应的操作。</p><h2 id="5-分布式锁问题"><a href="#5-分布式锁问题" class="headerlink" title="5.分布式锁问题"></a>5.分布式锁问题</h2><p>分布式锁由来：基于缓存击穿问题，我们需要给提供热点的服务加锁，于是最开始就是用本地锁来操作。但是经过后续分布式的演变，本地锁已经没办法满足需求（多个相同的服务需要同一把锁，而本地锁不能满足）。因此分布式锁出现，redis可以实现分布式锁。</p><p>分布式锁，即分布式系统中的锁。在单体应用中我们通过锁解决的是<strong>控制共享资源访问</strong>的问题，而分布式锁，就是解决了<strong>分布式系统中控制共享资源访问</strong>的问题。与单体应用不同的是，分布式系统中竞争共享资源的最小粒度从线程升级成了进程。</p><h3 id="5-1设置分布式锁"><a href="#5-1设置分布式锁" class="headerlink" title="5.1设置分布式锁"></a>5.1设置分布式锁</h3><p>redis可以设置分布式锁。</p><p><img src="https://s2.loli.net/2023/04/17/KuVHtEsFmdNqnjP.png" alt="image-20230307154858110"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 设置一个二十秒超时,key为lock，value为xin的键值对set lock xin NX EX 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/KlszOjMQG5LrhSY.png" alt="image-20230307155308990"></p><p>第一次设置成功，第二次设置不成功，查看lock剩余时间还有九秒，这就是设置锁的原理了</p><h3 id="5-2-java操作分步式锁"><a href="#5-2-java操作分步式锁" class="headerlink" title="5.2 java操作分步式锁"></a>5.2 java操作分步式锁</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Boolean</span> aBoolean <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">"lock1"</span><span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>aBoolean<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 拿到锁，执行业务操作</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拿到锁,线程名:"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 释放锁</span>            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"lock1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment">// 没获取到锁</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未获取锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 模拟多线程调用</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">lockTest1</span><span class="token punctuation">(</span><span class="token string">"用户A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">lockTest1</span><span class="token punctuation">(</span><span class="token string">"用户B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/**输出结果：**用户A未获取锁*用户B拿到锁,线程名:Thread-13*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>多线程调用redis连接池不能使用lettuce，需要换成jedis,否则会抛出异常</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3问题"><a href="#5-3问题" class="headerlink" title="5.3问题"></a>5.3问题</h3><ol><li><p>锁未设置过期时间，程序执行一办有异常无法释放锁，后续线程都拿不到锁，全部阻塞。</p><p>解决：给所设置过期时间，并且把释放锁操作放在finally中，而且必须保证加锁和设置过期时间在原子性基础上完成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这里是使用了hutool的工具来生成的分步式id</span><span class="token class-name">String</span> uid <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> aBoolean <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">"lock1"</span><span class="token punctuation">,</span> uid<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>aBoolean<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 拿到锁，执行业务操作</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user <span class="token operator">+</span> <span class="token string">"拿到锁,线程名:"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 释放锁</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"lock1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment">// 没获取到锁</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user <span class="token operator">+</span> <span class="token string">"未获取锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>线程A还没来得及释放锁，锁就自动过期了，线程B加锁并进入方法，这时线程A执行完之后进行释放锁，就会把B的锁释放掉。</p><p>解决：</p><ul><li>设置一个较为合理的过期时间</li><li>释放锁的时候判断一下value是否是自己的那把锁（value存成一个分步式id）</li><li>给锁的过期时间加一个自动续期功能（这个实现太复杂，后续有框架实现）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> key <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lock1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"lock1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>释放锁也必须是原子性操作，否则可能会出现刚好判断完锁是自己的，但是锁过期了，同样会删除掉后面的锁</p><p>解决：这里需要使用lua脚本来实现,<a href="https://redis.io/docs/manual/patterns/distributed-locks/">官网</a>能找到这一段lua脚本</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">then</span>    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> lua <span class="token operator">=</span> <span class="token string">"if redis.call(\"get\",KEYS[1]) == ARGV[1] then\n"</span> <span class="token operator">+</span>                        <span class="token string">"    return redis.call(\"del\",KEYS[1])\n"</span> <span class="token operator">+</span>                        <span class="token string">"else\n"</span> <span class="token operator">+</span>                        <span class="token string">"    return 0\n"</span> <span class="token operator">+</span>                        <span class="token string">"end"</span><span class="token punctuation">;</span><span class="token comment">// 提供了一个执行lua脚本的方法，执行之后返回的是一个int类型</span><span class="token comment">// 参数一： lua脚本执行器</span><span class="token comment">// 参数二： 替换lua中的keys[1]</span><span class="token comment">// 参数三： 替换lua中的AVG[1]</span><span class="token class-name">Long</span> lock1 <span class="token operator">=</span>     stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lua<span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"lock1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-redisson介绍"><a href="#5-4-redisson介绍" class="headerlink" title="5.4 redisson介绍"></a>5.4 redisson介绍</h3></li></ol><p>redis<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95">官网</a></p><p>基于redis的分布式锁都是用的redisson，可以直接去官网查看</p><h1 id="五、redis原理"><a href="#五、redis原理" class="headerlink" title="五、redis原理"></a>五、redis原理</h1><h2 id="1-reids的基本数据类型"><a href="#1-reids的基本数据类型" class="headerlink" title="1.reids的基本数据类型"></a>1.reids的基本数据类型</h2><p><strong>redis都是以key-value存储，这里的基本数据类型说的是value，key通常是string类型。</strong></p><p>key的常用命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看当前库所有的keykeys *# 判断某个key是否存在exists key# 查看key的类型type key# 删除指定的keydel key# 查看过期时间 -1 永不过期 -2 过期超时ttl key# 给key设置过期时间expire key 秒钟# 将当前数据库的key移动到给定的数据库db中move key dbindex [0-15]# 切换数据库select dbindex [0-15]# 查看当前数据库key的数量dbsize# 清空当前库flushdb# 清空全部库flushall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-String"><a href="#1-1-String" class="headerlink" title="1.1 String"></a>1.1 String</h3><p>一个key对应一个value，是redis最基本的数据类型，二进制安全,一个redis中字符串value最多可以是512M</p><h4 id="1-底层源码"><a href="#1-底层源码" class="headerlink" title="(1) 底层源码"></a>(1) 底层源码</h4><p>简单动态字符串</p><h4 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="(2) 常用命令"></a>(2) 常用命令</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 帮助命令help @string# 设置指定key的值set key value# 获取指定key的值get key# 返回key中字符串值的子字符 start起始位置（从0开始）  end结束位置GETRANGE key start end# 将指定的key设值并返回旧值，没有返回（nil）getset key value# 同时设置多个键值mset key value [key value...]# 获取多个值mget key [key...]# key不存在则添加setnx key valueset key value nx# key存在则添加setxx key valueset key value xx# 设置过期时间 EX 秒 PX 毫秒 # EXAT 设置密钥过期的指定Unix时间，单位为秒# PXAT 设置密钥过期的指定Unix时间，单位为毫秒# KEEPTTL 保持原有的过期时间（不添加这个参数，再重新set的时候回默认为永不过期）set key value [ex | px | EXAT | PXAT ] 时间set key value KEEPTTL# 设置分布式锁set key value nx [ex | px | EXAT | PXAT ] 时间# 数字递增，一定是数字才能递增 步长为1INCR key# 指定步长递增INCRBY key 数字# 数字递减DECR key# 指定步长递减DECRBY key 数字# 获取指定key字符串的长度STRLEN key# 字符串追加APPEND key value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="(3) 应用场景"></a>(3) 应用场景</h4><ul><li>设置分布式锁</li><li>存储字符串，序列化对象等等</li><li>计数器，用于点赞</li></ul><h3 id="1-2-list"><a href="#1-2-list" class="headerlink" title="1.2 list"></a>1.2 list</h3><p>一个key对应多个value的数据结构，value可重复，底层是双端链表，最大长度是2^32 - 1(4,294,967,295)个元素。</p><p>left、right都可以插入添加；如果键不存在，创建新的链表；如果键已存在，新增内容；如果值全移除，对应的键也就消失了。</p><h4 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="(1) 常用命令"></a>(1) 常用命令</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 帮助命令help @list# 左侧添加LPUSH key value [value...]# 右侧添加RPUSH key value [value...]# 遍历 start-起始位置（从0开始） end-结束位置LRANGE start end# 遍历key下面的所有valueLRANGE 0 -1# 左侧出栈 出栈之后列表中就没有了 count 出栈几个 不写则默认一个LPOP key [count]# 右侧出栈RPOP key [count]# 按照索引下标获取元素 从左到右 index 索引下标LINDEX key index# 获取列表中的元素个数llen key# 删除N个值等于V1的元素LREM key N V1# 截取指定范围的数重新赋值给key  start-起始位置（从0开始） end-结束位置LTRIM key start end # 原列表元素出栈并赋值给指定列表 list1 原列表  list2 目的列表# 返回出栈的值rpoplpush list1 list2# 指定位置替换元素LSET key index value# 在list某个已有的值前后添加新的值LINSERT key before|after 已有值 新的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="(2) 应用场景"></a>(2) 应用场景</h4><ul><li>发布订阅</li><li>关注列表，粉丝列表等</li></ul><h3 id="1-3-hash"><a href="#1-3-hash" class="headerlink" title="1.3 hash"></a>1.3 hash</h3><p>一个key对应多个key-value键值对，相当于<code>Map&lt;String,Map&lt;Object,Object&gt;&gt;</code></p><h4 id="1-常用命令-1"><a href="#1-常用命令-1" class="headerlink" title="(1) 常用命令"></a>(1) 常用命令</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 帮助文档help @hash# 存储HSET key field value [field value...]# 通过key获取某个属性HGET key field# 通过key获取多个field的value值HMGET key field [field...]# 通过key获取存储对象的个数HLEN key# 判断某个key里面的field是否存在HEXISTS key field# 获取指定key里面的所有fieldHKEYS key# 获取指定key的valueHVALS key# 获取指定key的所有field与valueHGETALL key# value自增 如果没有这个field则会新增一个 fieldhincrby key field 步长# value自增浮点数hincrbyfloat key field 浮点数步长# 不存在进行赋值  存在则无效hsetnx key field value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-应用场景-1"><a href="#2-应用场景-1" class="headerlink" title="(2) 应用场景"></a>(2) 应用场景</h4><p>一般对象用string + json存储，对象中某些频繁变化的属性抽出来用hash存储。</p><h3 id="1-4-set"><a href="#1-4-set" class="headerlink" title="1.4 set"></a>1.4 set</h3><p>一个key对应多个value，无序且不可重复，最大长度是2^32 - 1(4,294,967,295)个元素。</p><h4 id="1-常用命令-2"><a href="#1-常用命令-2" class="headerlink" title="(1) 常用命令"></a>(1) 常用命令</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 帮助文档help @set# 添加元素SADD key value [value...]# 通过key遍历SMEMBERS key# 查看元素value是否存在SMEMBERS key value# 删除指定元素SREM key value [value...]# 获取元素个数SCARD key# 随即取出指定个数的元素 超过最大数量就全部取出 个数写负数直接取模 可能会重复SRANDMEMBER key 个数# 随即出栈指定个数的元素SPOP key 个数# 移动元素value key1 原数据的key  key2 新数据的keySMOVE key1 key2 value# 差集运算 返回 key中 其他key1 key2 没有的元素SDIFF key key1 [key...]# 并集运算 返回多个key中所有元素SUNION key key1 [key...]# 交集运算 返回多个key中共同拥有的元素SINTER key key1 [key...]# 返回交集中元素的个数SINTERCARD key的个数 key key1 [key...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-应用场景-2"><a href="#2-应用场景-2" class="headerlink" title="(2) 应用场景"></a>(2) 应用场景</h4><ul><li>点赞，查看点赞的朋友</li><li>qq中可能认识的人</li></ul><h3 id="1-5-zset"><a href="#1-5-zset" class="headerlink" title="1.5 zset"></a>1.5 zset</h3><p>在set的基础上添加了个排序，格式为 <code>key score value score1 value1 ...</code>,score 就是为了排序的分数</p><h4 id="1-常用命令-3"><a href="#1-常用命令-3" class="headerlink" title="(1) 常用命令"></a>(1) 常用命令</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 帮助文档help @sorted-set# 新增元素# key-键名# nx 仅添加新的元素，不影响已有的 xx 仅修改已有的元素，不添加新元素# GT 只有在新分数大于当前分数时才更新现有元素。这个标志不会阻止添加新元素。# LT 只有在新分数小于当前分数时才更新现有元素。这个标志不会阻止添加新元素。# CH 将返回值从添加的新元素数量修改为更改的元素总数(通常ZADD的返回值只计算添加的新元素的数量)# score 分数  排序使用# member 元素ZADD key [NX | XX] [GT | LT] [CH] [INCR] score member [score member...]# 查看元素 WITHSCORES 分数一起展示# https://redis.io/commands/zrange/ZRANGE key start stop [WITHSCORES]# 从最高分到最低分的顺序。分数相等的元素采用字典降序排列。ZREVRANGE key start stop [WITHSCORES]# 通过分数范围来查看元素# min 最小分数  如果不想包括min  可以写成 (min# max 最大份数  如果不想包括max  可以写成 (maxZRANGEBYSCORE key min max [WITHSCORES]# 获取元素的分数ZSCORE key member# 获取集合中元素的数量ZCARD key# 删除元素ZREM key member [member...]# 增加某个元素的分数# increment 增加的分数ZINCRBY key increment member# 获取指定分数元素内的个数ZCOUNT key min max# 获取元素的下标值ZRANK key member<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-应用场景-3"><a href="#2-应用场景-3" class="headerlink" title="(2) 应用场景"></a>(2) 应用场景</h4><ul><li>物品的相关性展示</li><li>排行榜</li></ul><h3 id="1-6-Stream"><a href="#1-6-Stream" class="headerlink" title="1.6 Stream"></a>1.6 Stream</h3><p><a href="https://redis.io/docs/data-types/streams/"><strong>官网介绍</strong></a></p><p>redis版本的消息队列，redis5.0之后新增。</p><p><strong>5.0之前：</strong></p><p>​    redis实现消息队列的两种方案：</p><p>​            list实现： 缺点（只能点对点）</p><p>​            发布订阅 (pub/sub)：不能持久化，没有 Ack 机制来保证数据的可靠性 </p><p>stream就是来解决这两大痛点的。不过需要使用消息队列的话，还是推荐使用专业的MQ</p><h3 id="1-7-bitmap"><a href="#1-7-bitmap" class="headerlink" title="1.7 bitmap"></a>1.7 bitmap</h3><p><strong>是什么</strong>：由0和1状态表现的二进制bit数组，简称位图</p><p><strong>具体说明</strong>：用String类型作为底层数据结构实现的一种统计二值状态的数据类型。位图本质是数组，它是基于String数据类型的按位的操作。该数组由多个二进制位组成，每个二进制位都对应一个偏移量(我们称之为一个索引)。Bitmap支持的最大位数是2^32位，它可以极大的节约存储空间，使用512M内存就可以存储多达42.9亿的字节信息(2^32 = 4294967296)</p><p><strong>可以干什么</strong>： 在千万级数量下可用于状态的统计，用户的签到等等</p><h4 id="1-常用命令-4"><a href="#1-常用命令-4" class="headerlink" title="(1) 常用命令"></a>(1) 常用命令</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 帮助文档help @bitmap# 设置偏移位的值# offset 偏移未  从0开始  偏移未可以看做字节的位数  第0位的偏移位就是0# value 二进制的值  只能是0或1setbit key offset value# 获取偏移位的值getbit key offset# 统计字节数占用数量# 说明  偏移位到7是八位占一个字节，再往后有是八位一个字节数组。# 如果现在的偏移位到了 10   那就是占了两个字节strlen key# 统计指定key里面为1的数量# start 起始位  end 终止未  后面不写BYTE|BIT  默认为是BYTE，就是统计起始到结束字节为1的数量# BYTE 字节  BIT 偏移位（位数）bitcount key [start end [BYTE|BIT]]# 多个键值的位运算# and 按位与# or 按位或# xor 按位异或# not 位反转  只支持一个key# destkey 新命名的keyBITOP &lt;AND | OR | XOR | NOT&gt; destkey key [key ...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-应用场景-4"><a href="#2-应用场景-4" class="headerlink" title="(2) 应用场景"></a>(2) 应用场景</h4><ul><li>统计海量用户的登录数量，签到数量等（签到：按照年来 365/8=45字节 一个人   1000w人也就 430W）</li></ul><h3 id="1-8-HyperLogLog"><a href="#1-8-HyperLogLog" class="headerlink" title="1.8 HyperLogLog"></a>1.8 HyperLogLog</h3><p>HyperLogLog的实现最多使用12KB，提供0.81%的标准误差。中文叫基数统计</p><p>基数统计：去重复统计功能的基数估算法</p><p>HyperLogLog只做统计，不存储元素本身</p><h4 id="1-常用命令-5"><a href="#1-常用命令-5" class="headerlink" title="(1) 常用命令"></a>(1) 常用命令</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 帮助文档help @HyperLogLog# 新增元素# element 元素PFADD key [element [element...]]# 统计基数,统计不重复的元素，多个key的话就统计多个key中不重复的元素PFCOUNT key [key...]# 多个key合并# newkey 合并的新的key# key 被合并的keyPFMERGE newkey key [key...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-应用场景-5"><a href="#2-应用场景-5" class="headerlink" title="(2) 应用场景"></a>(2) 应用场景</h4><ul><li>统计某个网站一天的独立访客</li><li>统计用户每天搜索不同的词条个数</li></ul><h3 id="1-9-geospatial"><a href="#1-9-geospatial" class="headerlink" title="1.9 geospatial"></a>1.9 geospatial</h3><p>地理空间：顾名思义，该数据类型专门用来处理地理位置</p><p>官方介绍：Redis地理空间索引让你存储坐标并搜索它们。这种数据结构对于在给定的半径或边界框内寻找附近的点很有用。</p><h4 id="1-常用命令-6"><a href="#1-常用命令-6" class="headerlink" title="(1) 常用命令"></a>(1) 常用命令</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 帮助文档help @geo# 添加地域信息，经度(longitude) 纬度(latitude) 位置名称(member)# NX 不更新已经存在的元素。总是添加新的元素。# XX 只更新已经存在的元素。不要添加元素。# CH 将返回值从增加的新元素数量，修改为改变的元素总数（CH是改变的缩写GEOADD key [NX | XX] [CH] longitude latitude member [longitude latitude member ...]# 值得一提的是GEO的类型是zset,所以我们可以用ZRANGE来查看key的值ZRANGE key start end# 获取指定key位置名称（member）的经纬度GEOPOS key [member [member ...]]# 返回两个给定位置名称的距离# 返回值默认是米# M 米  KM 千米 FT 英里  MI 英尺GEODIST key member1 member2 [M | KM | FT | MI]# 以位置名称或者经纬度为中心返回在一个圆形或者矩形范围内返回满足要求的排序集的成员# FROMMEMBER 使用给定的现有&lt;成员（member）&gt;在排序集中的位置。# FROMLONLAT 使用给定的&lt;经度（longitude）&gt;和&lt;纬度（latitude）&gt;位置。# BYRADIUS 根据给定的&lt;半径（radius）&gt;在圆形区域内搜索。# BYBOX 在一个由&lt;高度（height）&gt;和&lt;宽度（width）&gt;决定的轴对齐的矩形内搜索。# ASC 相对于中心点，将返回的项目从最近的到最远的排序。# DESC 相对于中心点，从最远的地方到最近的地方对返回的项目进行排序。# COUNT 默认情况下会返回所有匹配的项目。要将结果限制在前N个匹配项上，请使用COUNT &lt;count&gt;选项。当使用ANY选项时，只要找到足够 的匹配项，命令就会返回。这意味着返回的结果可能不是最接近指定点的结果，但服务器为生成这些结果所投入的精力会大大减少。当   没有提供ANY时，命令将进行与指定区域匹配的项目数量成比例的努力，并对它们进行排序，所以要用一个很小的COUNT选项查询非常大         的区域，即使只返回几个结果，也可能很慢。# WITHDIST 同时返回返回项与指定中心点的距离。返回的距离与为半径或高度和宽度参数指定的单位相同。# WITHCOORD 同时返回匹配项目的经度和纬度。# WITHHASH 同时返回项目的原始地理哈希编码的排序集分数，形式为52位无符号整数。这只对低级别的黑客攻击或调试有用，否则对一般用户            来说兴趣不大。GEOSEARCH key &lt;FROMMEMBER member | FROMLONLAT longitude latitude&gt;  &lt;BYRADIUS radius &lt;M | KM | FT | MI&gt; | BYBOX width height &lt;M | KM | FT | MI&gt;&gt;   [ASC | DESC] [COUNT count [ANY]] [WITHCOORD] [WITHDIST] [WITHHASH]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>乱码情况：</strong></p><p><img src="https://s2.loli.net/2023/04/17/srR5jKQdtgJIhPn.png" alt="image-20230316110841398"></p><p>在进入redis命令窗口的时候加上一个 –raw就行了</p><h4 id="2-应用场景-6"><a href="#2-应用场景-6" class="headerlink" title="(2) 应用场景"></a>(2) 应用场景</h4><ul><li>地图的附近美食，医院，车辆等等</li></ul><h3 id="1-10-bitfield"><a href="#1-10-bitfield" class="headerlink" title="1.10 bitfield"></a>1.10 bitfield</h3><p>位域：直接操作二进制，对标ASCLL表。</p><p>用的比较少！！<a href="https://redis.io/docs/data-types/bitfields/">官网介绍</a></p><h2 id="2-redis持久化"><a href="#2-redis持久化" class="headerlink" title="2.redis持久化"></a>2.redis持久化</h2><p><a href="https://redis.io/docs/management/persistence/">官网的持久化介绍</a>，官网说的非常详细。</p><h3 id="2-1-为什么要持久化"><a href="#2-1-为什么要持久化" class="headerlink" title="2.1 为什么要持久化"></a>2.1 为什么要持久化</h3><ul><li>redis的数据都是在缓存中，即计算机的内存中。一旦redis出现故障比如宕机等，存储在redis中的数据就会全部清空，造成数据丢失。</li><li>redis中的数据清空，所有请求便会打到mysql数据库中，给mysql造成巨大压力。</li></ul><p>所以redis需要加入持久化，来保证redis恢复之后数据还在。</p><h3 id="2-2-redis提供的持久化类型"><a href="#2-2-redis提供的持久化类型" class="headerlink" title="2.2 redis提供的持久化类型"></a>2.2 redis提供的持久化类型</h3><ol><li><p><strong>RDB：</strong>指定的时间间隔内对你的数据集进行时间点快照。</p><p>​    快照：对当前时间段的redis状态的一个定格，通过快照可以让redis恢复到该时间</p></li><li><p><strong>AOF：</strong>AOF持久性记录了服务器收到的每一个写操作。然后这些操作可以在服务器启动时再次重放，重建原始数据集。命令的记录采用与Redis协议本身相同的格式。</p></li><li><p><strong>只使用缓存：</strong>可以禁用持久化操作</p></li><li><p><strong>RDB + AOF</strong>: 混合模式，可以在同一个实例中结合AOF和RDB。</p></li></ol><h3 id="2-3-RDB"><a href="#2-3-RDB" class="headerlink" title="2.3 RDB"></a>2.3 RDB</h3><h4 id="1-配置"><a href="#1-配置" class="headerlink" title="(1) 配置"></a>(1) 配置</h4><p>默认情况下，Redis将数据集的快照保存在磁盘上，在一个叫做dump.rdb的二进制文件中。你可以配置Redis，让它每隔N秒保存一次数据集，如果数据集中至少有M个变化，或者你可以手动调用SAVE或BGSAVE命令。</p><ol><li><p>redis.conf中,直接查看配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 语法结构 7.0# seconds 多少秒# changes redis中的key改变次数save &lt;seconds&gt; &lt;changes&gt; [&lt;seconds&gt; &lt;changes&gt; ...]# 3600秒有一次改变的或者300秒有100次改变的或者60秒有10000次改变的save 3600 1 300 100 60 10000# 语法结构 6.0save &lt;seconds&gt; &lt;changes&gt;# 3600秒有一次改变的或者300秒有100次改变的或者60秒有10000次改变的save 3600 1save 300 100save 60 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>dump.rdb的存储路径</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Note that you must specify a directory here, not a file name.dir ./# 可以改为自己的dir /home/myredis/data/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>文件名</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># The filename where to dump the DBdbfilename dump.rdb# 可以该自己的dbfilename mydump.rdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-如何工作"><a href="#2-如何工作" class="headerlink" title="(2) 如何工作"></a>(2) 如何工作</h4></li></ol><p>每当Redis需要将数据集转储到磁盘时，就会发生这种情况，Redis分叉。我们现在有一个子进程和一个父进程。子进程开始将数据集写到一个临时的RDB文件。当子进程写完新的RDB文件后，它将取代旧的文件。这种方法允许Redis在写的时候复制也生效</p><h4 id="3-如何恢复"><a href="#3-如何恢复" class="headerlink" title="(3) 如何恢复"></a>(3) 如何恢复</h4><p>把备份的dump.rdb文件放到定义的存储目录下，服务启动就能读取</p><p>注意： 不要把备份文件与redis放在同一服务器，防止服务器物理损坏之后，备份文件也损坏</p><h4 id="4-手动触发rdb"><a href="#4-手动触发rdb" class="headerlink" title="(4) 手动触发rdb"></a>(4) 手动触发rdb</h4><p>redis提供了SAVE或BGSAVE命令来手动触发rdb快照。</p><ol><li><p>SAVE</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 调用save命令会在主程序中执行，会阻塞当前的redis服务器，直到当前持久化工作完成。SAVE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>线上禁止使用</strong></p></li><li><p>BGSAVE</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 如果BGSAVE正确启动，则后台保存开始；如果与SCHEDULE子命令一起使用，则后台保存预定。BGSAVE [SCHEDULE]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通常情况下，代码会立即返回OK。Redis会fork一个子进程将数据库保存在磁盘上，然后退出。</p><p>如果已经有一个后台保存在运行，或者有另一个非后台保存进程在运行，特别是正在进行的AOF重写，则返回错误。</p><p>如果使用BGSAVE SCHEDULE，当AOF重写正在进行时，该命令将立即返回OK，并安排后台保存在下一次机会运行。客户端可以使用LASTSAVE命令来检查操作是否成功。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#返回最后一次成功执行DB保存的UNIX时间。客户端可以检查BGSAVE命令是否成功，读取LASTSAVE值，然后发出BGSAVE命令，每隔N秒定期#检查LASTSAVE是否改变。Redis认为数据库在启动时保存成功。LASTSAVE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-优点"><a href="#5-优点" class="headerlink" title="(5) 优点"></a>(5) 优点</h4></li></ol><ul><li>RDB最大限度地提高了Redis的性能，因为Redis父进程需要做的唯一工作是分叉一个子进程，该子进程将做所有其他工作。父进程将永远不会执行磁盘I/O或类似的工作。</li><li>与AOF相比，RDB允许在大数据集下更快地重新启动。</li></ul><h4 id="6-缺点"><a href="#6-缺点" class="headerlink" title="(6) 缺点"></a>(6) 缺点</h4><ul><li>redis服务出现故障就会丢失当前到最近一次快照之间的数据</li><li>内存数据的全量同步，数据太大会严重影响I/O性能</li></ul><h4 id="7-持久化文件修复"><a href="#7-持久化文件修复" class="headerlink" title="(7) 持久化文件修复"></a>(7) 持久化文件修复</h4><p>在服务宕机的时候，可能会因为最后一点数据没有写入导致一整个快找不能用。redis提供了一个命令来修复。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 进入redis服务器docker exec -it redis /bin/bash# 找到命令cd /usr/local/bin# 修复文件redis-check-rdb <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20230316173058388.png" alt="image-20230316173058388"></p><p>如果遇到报错就表示修复不了，自求多福吧。</p><h4 id="8-快照禁用"><a href="#8-快照禁用" class="headerlink" title="(8) 快照禁用"></a>(8) 快照禁用</h4><p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20230316173227042.png" alt="image-20230316173227042"></p><p>解释为，你可以使用<code>save ""</code>来禁用快照功能</p><h4 id="9-触发rdb的情况"><a href="#9-触发rdb的情况" class="headerlink" title="(9) 触发rdb的情况"></a>(9) 触发rdb的情况</h4><ul><li>达到配置文件的要求</li><li>手动save/bgsave命令</li><li>执行flushall/flushdb命令也会生成dump.rdb文件，不过文件是空的无意义</li><li>执行shutdown且没有开启AOF持久化</li><li>主从复制时，节点自动触发</li></ul><h4 id="10-参数优化"><a href="#10-参数优化" class="headerlink" title="(10) 参数优化"></a>(10) 参数优化</h4><p>除了上述配置的参数外，还有另外一些参数可供优化，都在SNAPSHOTTING  模块下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 默认yes# 如果配置成no，表示你不在乎数据不一致或者有其他的手段发现和控制这种不一致，那么在快照写入失败时，# 也能确保redis继续接受新的写请求stop-writes-on-bgsave-error yes# 默认yes# 对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。# 如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能rdbcompression yes# 默认yes# 在存储快照后，还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可# 以关闭此功能rdbchecksum yes# 在没有持久性的情况下删除复制中使用的RDB文件启用。默认情况下no，此选项是禁用的。rdb-del-sync-files no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-AOF"><a href="#2-4-AOF" class="headerlink" title="2.4 AOF"></a>2.4 AOF</h3><h4 id="1-配置-1"><a href="#1-配置-1" class="headerlink" title="(1) 配置"></a>(1) 配置</h4><p>AOF的配置在APPEND ONLY MODE模块下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 默认是no  启用改为 yes# 是否启用AOF持久化# AOF和RDB持久化可以同时启用，没有问题。# 如果在启动时启用了AOF，Redis将加载AOF，这就是文件# 具有更好的持久性保证。appendonly no# 如果appendfilename被设置为appendonly.aof，以下文件# 名称可以被导出:## - appendonly.aof.1.base.rdb作为一个基础文件.# - appendonly.aof.1.incr.aof, appendonly.aof.2.incr.aof作为增量文件。# - appendonly.aof.manifest作为一个清单文件。appendfilename "appendonly.aof"# 存储持久化文件的目录appenddirname "appendonlydir"# fsync()调用告诉操作系统在磁盘上实际写入数据# 而不是等待输出缓冲区中的更多数据。有些操作系统会真正地冲刷# 磁盘上的数据，其他一些操作系统只是试图尽快完成它。## Redis支持三种不同的模式。## no：不要fsync，只是让操作系统在它想的时候刷新数据。更快。# always: 在每次写入append only log之后进行fsync。慢，最安全。# everysec: 每秒只进行一次fsync。妥协。## 默认是 "everysec"，因为这通常是在速度和数据安全之间的正确折中。# 速度和数据安全之间的妥协。这取决于你是否能将其放宽为# "no"，让操作系统在需要时刷新输出缓冲区。# 它想这样做，以获得更好的性能（但是如果你能接受# 一些数据丢失，可以考虑默认的持久化模式，即快照）。# 相反，使用 "always "会很慢，但比 "everysec "更安全一些。# everysec.appendfsync everysec# aof重写期间是否同步  默认为nono-appendfsync-on-rewrite no# 重写出发的配置# 该配置项表示：触发重写所需要的 aof 文件体积百分比，只有当 aof 文件的增量大于 100% 时才进行重写，也就是大一倍。比如，第一次重写时文件大小为 64M，那么第二次触发重写的体积为 128M，第三次重写为 256M，以此类推。如果将百分比值设置为 0 就表示关闭 AOF 自动重写功能。auto-aof-rewrite-percentage 100# 自动重写的最小大小,及时到达了增量的百分百  也需要满足文件大小大于64m才会触发重写auto-aof-rewrite-min-size 64mb# 如果 aof-load-truncated 被设置为 yes（默认），一个被截断的 AOF 文件会被加载，并且Redis服务器开始发出一个日志来通知用户这个事件。# 否则，如果该选项被设置为 no，服务器就会以错误的方式终止运行并拒绝启动。用户需要在重启前使用 "redis-check-aof "工具修复AOF文件。aof-load-truncated yes# aof + rdb 结合使用，默认yesaof-use-rdb-preamble yes# 记录时间戳，恢复的时候以指定的时间点来恢复。redis7.0有aof-timestamp-enabled no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-如何工作-1"><a href="#2-如何工作-1" class="headerlink" title="(2) 如何工作"></a>(2) 如何工作</h4><p><strong>持久化：</strong></p><ul><li><p>每次Redis收到改变数据集的命令（例如SET），它都会将其追加到AOF中。当你重启Redis时，它将重新运行AOF文件以重建状态。</p></li><li><p>从Redis 7.0.0开始，Redis使用多部分AOF机制。也就是说，原始的单一AOF文件被分割成基础文件（最多一个）和增量文件（可能有多个）。基础文件代表AOF重写时存在的数据的初始（RDB或AOF格式）快照。增量文件包含自上一次创建AOF基础文件以来的增量变化。所有这些文件都放在一个单独的目录中，并由一个清单文件进行跟踪。</p></li></ul><p><strong>日志重写：</strong></p><ul><li><p>随着写操作的进行，AOF会变得越来越大。例如，如果你正在增加一个计数器100次，你最终会在你的数据集中有一个包含最终值的单键，但在你的AOF中有100个条目。这些条目中的99个是不需要重建当前状态的。</p></li><li><p>重写是完全安全的。在Redis继续追加旧文件的同时，一个全新的文件被生成，其操作是创建当前数据集所需的最小集合，一旦这第二个文件准备好了，Redis就会切换这两个文件并开始追加到新文件中。</p></li><li><p>所以Redis支持一个有趣的功能：它能够在后台重建AOF而不中断对客户的服务。每当你发出BGREWRITEAOF，Redis就会在内存中写入重建当前数据集所需的最短命令序列。如果你在Redis 2.2中使用AOF，你将需要不时地运行BGREWRITEAOF。</p></li></ul><h4 id="3-如何恢复-1"><a href="#3-如何恢复-1" class="headerlink" title="(3) 如何恢复"></a>(3) 如何恢复</h4><p> 正常恢复：redis服务启动时会自动读取配置下的持久化文件</p><p>异常恢复：redis服务器目录<code>/usr/local/bin</code>目录下的redis-check-aof工具可以修复aof文件</p><pre class="line-numbers language-none"><code class="language-none">redis-check-aof --fix &lt;filename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-优点"><a href="#4-优点" class="headerlink" title="(4) 优点"></a>(4) 优点</h4><ul><li>使用AOF Redis更持久：你可以有不同的fsync策略：完全没有fsync，每秒fsync，每次查询都fsync。fsync是使用后台线程进行的，主线程会在没有fsync的情况下努力进行写入，所以你只能损失一秒钟的写入量。</li><li>AOF日志是一个仅有附录的日志，所以不存在寻求，也不存在断电时的损坏问题。即使由于某种原因（磁盘满了或其他原因），日志以写了一半的命令结束，redis-check-aof工具也能轻易地修复它。</li><li>当AOF过大时，Redis能够在后台自动重写。重写是完全安全的，因为在Redis继续追加旧文件的同时，一个全新的文件会以创建当前数据集所需的最小操作集产生，一旦这第二个文件准备好了，Redis就会切换这两个文件并开始追加到新文件。</li><li>AOF包含所有操作的日志，这些操作一个接一个，而且是容易理解和解析的格式。你甚至可以很容易地导出一个AOF文件。例如，即使你不小心使用<strong>FLUSHALL</strong>命令刷新了所有的东西，只要在此期间没有对日志进行重写，你仍然可以保存你的数据集，只需停止服务器，删除最新的命令，然后再次重启Redis。</li></ul><h4 id="5-缺点"><a href="#5-缺点" class="headerlink" title="(5) 缺点"></a>(5) 缺点</h4><ul><li>对于相同的数据集，AOF文件通常比相应的RDB文件大。</li><li>AOF可能比RDB慢，这取决于确切的fsync策略。一般来说，在fsync设置为每秒的情况下，性能仍然很高，如果禁用fsync，即使在高负载的情况下，它也应该和RDB完全一样快。但是RDB能够提供更多关于最大延迟的保证，即使是在巨大的写入负载的情况下。</li></ul><p><strong>7.0之前：</strong></p><ul><li>如果在重写期间有对数据库的写操作，AOF会使用大量的内存（这些操作在内存中被缓冲，并在最后被写入新的AOF）。</li><li>所有在重写期间到达的写命令都会被写到磁盘上两次。</li><li>Redis可能会在重写结束时冻结写入和fsync这些写命令到新的AOF文件。</li></ul><h4 id="6-手动触发aof"><a href="#6-手动触发aof" class="headerlink" title="(6) 手动触发aof"></a>(6) 手动触发aof</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 调用该命令可手动触发BGREWRITEAOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-4-RDB-AOF"><a href="#2-4-RDB-AOF" class="headerlink" title="2.4 RDB + AOF"></a>2.4 RDB + AOF</h3><h4 id="1-官方解释："><a href="#1-官方解释：" class="headerlink" title="(1) 官方解释："></a>(1) 官方解释：</h4><p>一般来说，你应该使用这两种持久化方法。如果你非常关心你的数据，但仍然可以忍受在发生灾难时几分钟的数据丢失，你可以简单地单独使用RDB。有很多用户单独使用AOF，但是我们不鼓励这样做，因为不时地有一个RDB快照是一个很好的主意，可以做数据库备份，更快地重新启动，以及在AOF引擎出现错误的时候。</p><h4 id="2-恢复数据的加载流程："><a href="#2-恢复数据的加载流程：" class="headerlink" title="(2) 恢复数据的加载流程："></a>(2) 恢复数据的加载流程：</h4><ul><li>Redis &gt;= 2.4确保避免在RDB快照操作已经进行时触发AOF重写，或在AOF重写进行时允许BGSAVE。这可以防止两个Redis后台进程同时进行大量磁盘I/O。</li><li>当快照操作正在进行，而用户使用BGREWRITEAOF明确请求进行日志重写操作时，服务器将回复一个OK状态代码，告诉用户该操作已被安排，一旦快照完成，重写将开始。</li><li>在AOF和RDB持久化都启用的情况下，Redis重新启动时，<strong>AOF文件将被用来重建原始数据集，因为它被保证是最完整的</strong>。</li></ul><h4 id="3-开启混合方式设置"><a href="#3-开启混合方式设置" class="headerlink" title="(3) 开启混合方式设置"></a>(3) 开启混合方式设置</h4><p>​    设置<code>aof-use-rdb-preamble</code>的值为 yes  yes表示开启，设置为no表示禁用,前提是已经开启了RDB和AOF</p><h4 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h4><p>RDB镜像做全量持久化，AOF做增量持久化</p><p>先使用RDB进行快照存储，然后使用AOF持久化记录所有的写操作，当重写策略满足或手动触发重写的时候，将最新的数据存储为新的RDB记录。这样的话，重启服务的时候会从RDB和AOF两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是RDB格式，一部分是AOF格式。**—-》AOF包括了RDB头部+AOF混写**</p><h3 id="2-5-缓存模式，不需要持久化"><a href="#2-5-缓存模式，不需要持久化" class="headerlink" title="2.5 缓存模式，不需要持久化"></a>2.5 缓存模式，不需要持久化</h3><p>配置关闭</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">save ""appendonly no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>禁用rdb任然可以使用save和bgsave来生成持久化文件</p><p>禁用模式下，仍然可以使用命令BGREWRITEAOF生成aof文件</p><h2 id="3-redis事务"><a href="#3-redis事务" class="headerlink" title="3.redis事务"></a>3.<a href="https://redis.io/docs/manual/transactions/">redis事务</a></h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>Redis Transactions允许在一个步骤中执行一组命令，它们以MULTI、EXEC、DISCARD和WATCH命令为中心。</p><h3 id="3-2-作用"><a href="#3-2-作用" class="headerlink" title="3.2 作用"></a>3.2 作用</h3><p>一个队列中，一次性的顺序的，排他性的执行一系列命令</p><h3 id="3-3-特性"><a href="#3-3-特性" class="headerlink" title="3.3 特性"></a>3.3 特性</h3><p><img src="https://s2.loli.net/2023/04/17/lIwsGEfzxJYVknK.png" alt="image-20230317144841820.png"></p><h3 id="3-4-用法"><a href="#3-4-用法" class="headerlink" title="3.4 用法"></a>3.4 用法</h3><p><img src="https://s2.loli.net/2023/04/17/WGRrUs5oCv89NJA.png" alt="image-20230317145312221.png"></p><p><img src="https://s2.loli.net/2023/04/17/6gDZAyIkQzpUChn.png" alt="image-20230317145621881.png"></p><h2 id="4-redis管道"><a href="#4-redis管道" class="headerlink" title="4.redis管道"></a>4.redis管道</h2><p>Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：</p><ul><li>客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。</li><li>服务端处理命令，并将结果返回给客户端。</li></ul><p>Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。</p><h3 id="4-1-使用"><a href="#4-1-使用" class="headerlink" title="4.1 使用"></a>4.1 使用</h3><p>创建一个cmd.txt</p><p><img src="https://s2.loli.net/2023/04/17/eoigt5cJXNwkORM.png" alt="image-20230317152326426"></p><p>执行这个文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cat cmd.txt | redis-cli -a xin1999 -p 9999 --pipe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/ARDlXGPTHio7hcU.png" alt="image-20230317152252586"></p><h2 id="5-redis集群"><a href="#5-redis集群" class="headerlink" title="5. redis集群"></a>5. redis集群</h2><h3 id="5-1-主从复制"><a href="#5-1-主从复制" class="headerlink" title="5.1 主从复制"></a>5.1 主从复制</h3><p>redis服务器分为Master（主服务器），slave（从服务器），Master以写为主，Slave以读为主</p><p>当Master数据变化的时候，自动将行的数据异步同步到其他slave数据库</p><h4 id="1-作用"><a href="#1-作用" class="headerlink" title="(1) 作用"></a>(1) 作用</h4><ul><li>读写分离</li><li>容灾恢复</li><li>数据备份</li><li>水平扩容支撑高并发</li></ul><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="(2) 配置"></a>(2) 配置</h4><p><strong>配从库不配主库</strong>，拷贝一份redis.conf给从库，然后修改从库的配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 这是必要的配置# masterip 主服务器的配置# masterport 主服务器的ipreplicaof &lt;masterip&gt; &lt;masterport&gt;# 如果主库配置了requirepass，从库就需要配置以下参数# password 主库密码masterauth &lt;password&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令行配置，这是临时命令，重启后就没了</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看复制节点的主从关系及配置info replication# 在运行期间修改slave节点的信息，如果该数据库已经是某个主数据库的从数据库。# 那么会停止和原数据库的同步关系，和新数据库同步slaveof 主库ip 主库端口# 是当前数据库停止与其他数据库的同步，转成主数据库 slave no one<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-工作流程"><a href="#3-工作流程" class="headerlink" title="(3) 工作流程"></a>(3) 工作流程</h4><p><img src="https://s2.loli.net/2023/04/17/qVv3m6aFtSdZsNJ.png" alt="image-20230320104147213"></p><h4 id="4-缺点"><a href="#4-缺点" class="headerlink" title="(4) 缺点"></a>(4) 缺点</h4><ul><li>延时：所有写操作都是在master上操作然后同步到slave服务器。在高并发下就会有很多从节点，导致同步会消耗大量性能与延时</li><li>master宕机无法自动解决：master宕机之后从节点不能变为主机节点，导致写操作不可用</li></ul><p>解决： redis新推出的哨兵机制</p><h3 id="5-2-哨兵机制（sentinel）"><a href="#5-2-哨兵机制（sentinel）" class="headerlink" title="5.2 哨兵机制（sentinel）"></a>5.2 哨兵机制（sentinel）</h3><p><a href="https://redis.io/docs/management/sentinel/">官网</a></p><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="(1) 概念"></a>(1) 概念</h4><p>Redis哨兵是一种Redis服务器高可用性解决方案，它可以在主服务器宕机时自动将从服务器升级为主服务器（哨兵投票），使Redis服务器可以保持高可用性，从而避免出现系统故障导致的数据丢失。</p><h4 id="2-作用"><a href="#2-作用" class="headerlink" title="(2) 作用"></a>(2) 作用</h4><ul><li>监控：监控主从redis是否运行正常</li><li>消息通知：哨兵可以将故障转移的结果发送给客户端</li><li>故障转移：如果master异常，则会进行主从切换，将其中一个从节点作为新的主节点</li><li>配置中心：客户端通过连接哨兵来获得当前redis的主节点地址</li></ul><h4 id="3-配置"><a href="#3-配置" class="headerlink" title="(3) 配置"></a>(3) 配置</h4><p>Sentinel本身被设计为运行在一个有多个Sentinel进程共同合作的配置中。哨兵只是起到监控作用，不存放数据</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 服务监听地址bind# 是否已后台方式启动daemonize# 是否开启保护模式protected-mode# 端口号port# 日志目录logfile# pid文件路径pidfile# 工作目录dir# master-name 主服务器名称# ip 主服务器ip# port 主服务器端口# quorum 法定人数   法定人数是指需要同意主服务器无法到达这一事实的哨兵数量，以便真正将主站标记为故障，并在可能的情况下最终启动故障转移程序。sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;# master-name 主服务器名# password 密码sentinel auth-pass &lt;master-name&gt; &lt;password&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-实例"><a href="#4-实例" class="headerlink" title="(4) 实例"></a>(4) 实例</h4><p>本次实例在docker中演示，并放在同一服务器下。</p><p>准备工作：</p><ol><li><p>需要一主两从的redis服务器，通过上述主从复制的配置进行配置，同过<code>info relication</code>验证</p><p><strong>注意： 主服务器也需要配置<code>masterauth</code>,如果有密码的话，因为master也可能变成slave</strong></p></li><li><p>在<code>/home/docker/redis/conf</code>目录下准备三个文件，分别是<code>sentinel26380.conf</code>,<code>sentinel26381.conf</code>,<code>sentinel26382.conf</code>，并且创建文件夹</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建文件夹mkdir /home/docker/redis/data/log# sentinel26380.confbind 0.0.0.0daemonize yesprotected-mode nologfile "./log/sentinel26380.log"dir "./"port 26380sentinel monitor mymaster 121.36.81.74 9999 2sentinel auth-pass mymaster xin1999# sentinel26381.confbind 0.0.0.0daemonize yesprotected-mode nologfile "./log/sentinel26381.log"dir "./"port 26381sentinel monitor mymaster 121.36.81.74 9999 2sentinel auth-pass mymaster xin1999# sentinel26382.confbind 0.0.0.0daemonize yesprotected-mode nologfile "./log/sentinel26382.log"dir "./"port 26382sentinel monitor mymaster 121.36.81.74 9999 2sentinel auth-pass mymaster xin1999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进入redis容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it redis /bin/bash# 执行创建的sentinel26380.conf,执行之后redis-server /usr/local/etc/redis/sentinel26380.conf --sentinelredis-server /usr/local/etc/redis/sentinel26381.conf --sentinelredis-server /usr/local/etc/redis/sentinel26382.conf --sentinel# 退出容器可查看log的日志,没报错说明成功cat /home/docker/redis/data/log/sentinel26380.logcat /home/docker/redis/data/log/sentinel26381.logcat /home/docker/redis/data/log/sentinel26382.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>模拟master宕机</p><p>直接关闭master主服务器，这里只是测试哨兵机制，把哨兵都放在master中运行，当我们关闭redis容器的时候，烧饼也会被关闭。</p><p>所以最好的做法是再新建一个redis来存放哨兵命令用来测试。</p><p>通过slave服务器查看<code>info replication</code>节点是否有变化</p><p><img src="https://s2.loli.net/2023/04/17/9ZM52CakQzSERve.png" alt="image-20230320163654276"></p><p>最开始9999端口号是master，因为直接关掉了。所以9997变成了master。证明配置成功</p><p><img src="https://s2.loli.net/2023/04/17/39INuApoKHldQPa.png" alt="image-20230320165553903"></p><p>可以看到这是对配置文件做了个重写。</p></li></ol><h4 id="5-流程原理"><a href="#5-流程原理" class="headerlink" title="(5) 流程原理"></a>(5) 流程原理</h4><p>当一个主从配置中的master失效之后，sentinel可以选举出一个新的master用于自动接替原master的工作，主从配置中的其他redis服务器自动指向新的master同步数据。一般建议sentinel采取奇数台，防止某一台sentinel无法连接到master导致误切换。</p><ul><li><p>主观下线（SDown）：所谓主观下线（Subjectively Down， 简称 SDOWN）指的是单个Sentinel实例对服务器做出的下线判断，即单个sentinel认为某个服务下线（有可能是接收不到订阅，之间的网络不通等等原因）。主观下线就是说如果服务器在[sentinel down-after-milliseconds]给定的毫秒数之内没有回应PING命令或者返回一个错误消息， 那么这个Sentinel会主观的(单方面的)认为这个master不可以用了</p></li><li><p>客观下线（ODown）：意思是至少有quorum个sentinel认为这个master有故障才会对这个master进行下线以及故障转移。因为有的时候，某个sentinel节点可能因为自身网络原因导致无法连接master，而此时master并没有出现故障，所以这就需要多个sentinel都一致认为该master有问题，才可以进行下一步操作，这就保证了公平性和高可用。</p></li><li><p>选举领导者哨兵：当主节点被判断为客观下线时，各个节点就会进行协商，选举出一个领导者哨兵，并由该节点进行故障迁移</p><p>选举算法：</p><p>​            监视该主节点的所有哨兵都有可能被选为领导者，选举使用的算法是Raft算法；Raft算法的基本思路<strong>先到先得</strong>（即在一轮选举中，哨兵A向B发送成为领导者的申请，如果B没有同意过其他哨兵，则会同意A成为领导者）</p></li></ul><p><strong>步骤：</strong></p><p><img src="https://s2.loli.net/2023/04/17/W8IvcSCNTVaQ6if.png" alt="image-20230320170914715"></p><h4 id="6-使用建议"><a href="#6-使用建议" class="headerlink" title="(6) 使用建议"></a>(6) 使用建议</h4><ul><li>哨兵节点因为多个，保证高可用</li><li>数量应为基数，方便投票选举</li><li>哨兵节点的配置应该一致</li><li>如果哨兵的节点部署在docker容器里面，<a href="https://redis.io/docs/management/sentinel/#sentinel-docker-nat-and-possible-issues">需要注意端口映射</a></li></ul><h3 id="5-3-集群-Cluster"><a href="#5-3-集群-Cluster" class="headerlink" title="5.3 集群(Cluster )"></a>5.3 集群(Cluster )</h3><p><a href="https://redis.io/docs/reference/cluster-spec/">官网</a>，由于哨兵机制只有一个master，如果要进行高并发操作，就会有很多salve。这样在同步的时候master就会消耗大量性能作为同步并且延时，所以redis集群出现了。</p><h4 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="(1) 概念"></a>(1) 概念</h4><p>redis集群是一个提供在多个redis节点共享数据的程序集。redis集群可以支持多个master</p><h4 id="2-作用-1"><a href="#2-作用-1" class="headerlink" title="(2) 作用"></a>(2) 作用</h4><ul><li>集群支持多个master，而master挂载多个slave</li><li>集群自带哨兵的故障转移机制，内置了高可用支持，<strong>无需再去使用哨兵功能</strong></li><li>客户端与redis节点相连接，不需要连接集群中的所有节点，只需要连接任意一可用节点即可</li></ul><h4 id="3-集群算法"><a href="#3-集群算法" class="headerlink" title="(3) 集群算法"></a>(3) 集群算法</h4><h5 id="1-集群分片"><a href="#1-集群分片" class="headerlink" title="1. 集群分片"></a>1. 集群分片</h5><p>使用Redis集群时我们会将存储的数据分散到多台redis机器上，这称为分片。简言之，集群中的每个Redis实例都被认为是整个数据的一个分片。<strong>Redis Cluster不像独立版的Redis那样支持多个数据库。我们只支持数据库0；不允许使用SELECT命令。</strong></p><p>如何找到给定key的分片？</p><p> 为了找到给定key的分片，我们对key进行CRC16(key)算法处理并通过对总分片数量取模。然后，使用确定性哈希函数，这意味着给定的key将多次始终映射到同一个分片，我们可以推断将来读取特定key的位置。</p><h6 id="2-槽位-slot"><a href="#2-槽位-slot" class="headerlink" title="2. 槽位(slot)"></a>2. 槽位(slot)</h6><p><a href="https://redis.io/docs/reference/cluster-spec/#overview-of-redis-cluster-main-components">官网</a></p><p>redis有16384个哈希槽，每个key通过<code>HASH_SLOT = CRC16(key) mod 16384</code>算法确定key的槽位。集群中每一个节点负责一部分hash槽。理论上集群最多可有16384个节点，但是官方<strong>推荐一个集群的节点少于1000</strong>。</p><p>哈希槽解释：哈希槽实质就是一个数组，数组[0,2^14 -1]形成hash slot空间。</p><p>解决均匀分配的问题，在数据和节点之间又加入了一层，把这层称为哈希槽（slot），用于管理数据和节点之间的关系，现在就相当于节点上放的是槽，槽里放的是数据。</p><p><img src="data:application/octet-stream;base64," alt="graphic"></p><h5 id="3-分片-哈希槽优势"><a href="#3-分片-哈希槽优势" class="headerlink" title="3. 分片+哈希槽优势"></a>3. 分片+哈希槽优势</h5><ul><li>分片的优势就在于数据分散到不同节点，从而提高对大数据的可用性。而由于数据都存储在不同节点，访问数据岂不是很麻烦。</li><li>哈希槽就是为了解决这麻烦，客户端只需要像以前单数据库一样存取数据就行，其余的访问数据就通过哈希槽的算法来为我们找到分片上的数据。</li><li>就算后续需要扩容或者缩减，就需要移动数据。现在是槽为单位移动数据，因为槽的数目是固定的，处理起来比较容易，这样数据移动问题就解决了。</li></ul><h4 id="4-如何搭建"><a href="#4-如何搭建" class="headerlink" title="(4) 如何搭建"></a>(4) 如何搭建</h4><p><a href="https://redis.io/docs/management/scaling/#create-and-use-a-redis-cluster">官网</a>，以三主三从搭建集群测试</p><ol><li><p>准备多台虚拟机，在docker下载redis</p></li><li><p>准备配置文件redis.conf，需要修改的是端口号，其余名称看自己,提前需要创建好文件夹，否则redis可能没有权限创建文件夹</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">bind 0.0.0.0protected-mode noport 6381# 这里定义的日志文件目录是在容器里面的目录，要在宿主机里面看到还需要挂载出去logfile /home/docker/redis/cluster/cluster6381.logpidfile /home/docker/redis/cluster6381.piddbfilename dump6381.rdbappendonly yesappendfilename appendonly6381.aofrequirepass xin1999masterauth xin1999 # 开启集群cluster-enabled yes# 集群存储节点的配置 这是集群自动生成 默认名称为node.confcluster-config-file nodes-6381.confcluster-node-timeout 5000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过docker运行启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#创建挂载目录mkdir -p /home/docker/reids/confmkdir -p /home/docker/reids/clustermkdir -p /home/docker/reids/cluster/data#创建redis.conf文件touch /home/docker/redis/conf/redis.conf# 给文件设置权限chmod -R 755 /home/docker/reids/cluster# 创建运行容器docker run --name redisCluster -p 9998:9998 \-v /home/docker/redis/conf:/usr/local/etc/redis \-v /home/docker/redis/cluster/data:/data \-v /home/docker/redis/cluster/cluster6381.log:/home/docker/redis/cluster/cluster6381.log \-v /home/docker/redis/cluster6381.pid:/home/docker/redis/cluster6381.pid \-d redis:7.0.9 redis-server /usr/local/etc/redis/cluster.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>全部启动完成之后，进入一台redis节点，用命令构建主从关系</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 这里使用的命令是create，因为我们要创建一个新的集群。选项 --cluster-replicas 1 意味着我们希望为每一个创建的主站提供一个副本。其他参数是我想用来创建新集群的实例的地址列表。# redis-cli 将提出一个配置。通过输入 "是 "接受建议的配置。集群将被配置和加入，这意味着实例将被引导到彼此之间的对话。最 后，如果一切顺利，你会看到这样的信息。redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 \127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 \--cluster-replicas 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种写法就是一主一从，如果–cluster-replicas 2，那急么就意味着一主两从以此类推。</p><p>官网有更详细的解释。</p></li><li><p>使用</p><p>使用有一些区别，需要在进入redis中后面加一个-c,客户端连接需要对集群提供支持</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker exec -it redisCluster redis-cli -p 9998 -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>集群常用命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 查看节点信息info replication# 查看集群信息cluster info# 查看集群节点信息cluster node# 查看某个key对应的槽位cluster keyslot key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-容错切换"><a href="#5-容错切换" class="headerlink" title="(5) 容错切换"></a>(5) 容错切换</h4></li></ol><h5 id="1-自动迁移"><a href="#1-自动迁移" class="headerlink" title="1. 自动迁移"></a>1. 自动迁移</h5><p>master不可用时，会通过集群内置的故障转移来使得该master的从节点变为主节点，当master恢复后会变为从机。<br>在该情况下我们需要注意的是：<strong>redis不能保证数据的强一致性，在某些特定的情况下会丢失掉</strong></p><p>特定情况：</p><ul><li>一个主站因为一个分区而无法到达。</li><li>它被它的一个复制体所取代。</li><li>一段时间后，它可能会再次到达。</li><li>一个拥有过时的路由表的客户可能会在集群将其转换为（新主站的）副本之前，向旧主站写入数据。</li></ul><h5 id="2-手动迁移"><a href="#2-手动迁移" class="headerlink" title="2. 手动迁移"></a>2. 手动迁移</h5><p>当主节点宕机之后恢复过来还想让他当主节点，那么就需要手动去使用命令来操作,<a href="https://redis.io/commands/cluster-failover/">命令详解</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 这条命令只能发送到Redis Cluster的复制节点，强制复制节点开始手动故障转移其主实例。CLUSTER FAILOVER [FORCE | TAKEOVER]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-集群扩容"><a href="#6-集群扩容" class="headerlink" title="(6) 集群扩容"></a>(6) 集群扩容</h4><p>扩容一主一从</p><ol><li>还是按照（4）的搭建把实例创建</li><li>加入集群</li><li>分配槽位</li><li>从机加入指定主机</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 加入集群# 将新增的6387作为master节点加入原有集群# redis-cli -a 密码 --cluster add-node 自己实际IP地址:6387 自己实际IP地址:6381# 6387 就是将要作为master新增节点# 6381 就是原来集群节点里面的领路人，相当于6387拜拜6381的码头从而找到组织加入集群redis-cli -a 111111  --cluster add-node 192.168.111.174:6387 192.168.111.175:6381# 分配槽位# 进入6381的redisredis-cli --cluster reshard 192.168.111.175:6381<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="data:application/octet-stream;base64," alt="graphic"></p><ol><li>第一个是填写需要分配多少槽位</li><li>给谁分配的槽位id</li><li>all： 分配</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 从机加入指定主机redis-cli --cluster add-node 从机ip:端口号 主机ip:主机端口号 --cluster-slave --cluster-master-id 主机集群id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="7-集群缩容"><a href="#7-集群缩容" class="headerlink" title="(7) 集群缩容"></a>(7) 集群缩容</h4><h5 id="1-删除从节点"><a href="#1-删除从节点" class="headerlink" title="1. 删除从节点"></a>1. 删除从节点</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">redis-cli --cluster del-node 127.0.0.1:7000 `&lt;node-id&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拿到从节点的nodeId可以直接删除从节点</p><h5 id="2-s主节点删除"><a href="#2-s主节点删除" class="headerlink" title="2. s主节点删除"></a>2. s主节点删除</h5><p>如果该主节点是空的，可以直接删除。如果主节点不是空的，你需要在之前将数据从它那里转移到所有其他的主节点。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 分配槽位给其他不删除的主节点redis-cli --cluster reshard 192.168.111.175:6381<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/YlrPE4k9UScgOK2.png" alt="下载"></p><p><img src="https://s2.loli.net/2023/04/17/SRhYi6zW2FbmTwq.png" alt="下载1"></p><p>完成之后该节点的槽位么有了，可以直接删除</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">redis-cli --cluster del-node 127.0.0.1:7000 `&lt;node-id&gt;`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-通识占位符"><a href="#8-通识占位符" class="headerlink" title="(8) 通识占位符"></a>(8) 通识占位符</h4><p>不在同一个slot槽位下的键值无法使用mset、mget等多键操作</p><p>可以通过{}来定义同一个组的概念，使key中{}内相同内容的键值对放到一个slot槽位去，对照下图类似k1k2k3都映射为x，自然槽位一样</p><p><img src="https://s2.loli.net/2023/04/17/zFCTLhfj5I4gDQx.png" alt="下载3"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webSocket篇</title>
      <link href="/2022/07/13/2022-07-13-websocket-pian/"/>
      <url>/2022/07/13/2022-07-13-websocket-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="一-websocket概念"><a href="#一-websocket概念" class="headerlink" title="一. websocket概念"></a>一. websocket概念</h1><p>websocket是一种协议,诞生于2008年，2011年成为国际标准。其最大的特点就在于服务器可以主动向客户端推送消息，客户端也可以主动向服务器推送消息。实现真正的双向平等对话，是属于服务推送技术的一种。</p><p>WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><p>其他特点包括：</p><ol><li>建立在 TCP 协议之上，服务器端的实现比较容易。</li><li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li><li>数据格式比较轻量，性能开销小，通信高效。</li><li>可以发送文本，也可以发送二进制数据。</li><li>没有同源限制，客户端可以与任意服务器通信。</li><li>协议标识符是 ws （如果加密，则为 wss ），服务器网址就是 URL。 </li></ol><pre class="line-numbers language-none"><code class="language-none">ws://example.com:80/some/path<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="二-为什么需要websocket"><a href="#二-为什么需要websocket" class="headerlink" title="二. 为什么需要websocket"></a>二. 为什么需要websocket</h1><p>我们常用的http协议就可以满足极大一部分的需求了，但是http还是有一个明显的缺陷：通信只能由客户端发起。</p><p>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用”轮询”：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。</p><h1 id="三-客户端API"><a href="#三-客户端API" class="headerlink" title="三. 客户端API"></a>三. 客户端API</h1><h2 id="3-1-WebSocket构造函数"><a href="#3-1-WebSocket构造函数" class="headerlink" title="3.1 WebSocket构造函数"></a>3.1 <strong>WebSocket</strong>构造函数</h2><p>WebSocket 对象作为一个构造函数，用于新建 WebSocket 实例。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行上面语句之后，客户端就会与服务器进行连接。实例对象的所有属性和方法清单，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket">参见这里</a>。</p><h2 id="3-2-webSocket-readyState"><a href="#3-2-webSocket-readyState" class="headerlink" title="3.2 webSocket.readyState"></a>3.2 <strong>webSocket.readyState</strong></h2><p>readyState 属性返回实例对象的当前状态，共有四种。</p><ul><li>CONNECTING：值为0，表示正在连接。</li><li>OPEN：值为1，表示连接成功，可以通信了。</li><li>CLOSING：值为2，表示连接正在关闭。</li><li>CLOSED：值为3，表示连接已经关闭，或者打开连接失败。</li></ul><h2 id="3-3-websocket-onopen"><a href="#3-3-websocket-onopen" class="headerlink" title="3.3  websocket.onopen"></a>3.3  websocket.onopen</h2><p>实例对象的 onopen 属性，用于指定连接成功后的回调函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello server'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果要指定多个回调函数，可以使用 addEventListener 方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Hello Server!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-4-webSocket-onclose"><a href="#3-4-webSocket-onclose" class="headerlink" title="3.4 webSocket.onclose"></a>3.4 <strong>webSocket.onclose</strong></h2><p>实例对象的 onclose 属性，用于指定连接关闭后的回调函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">socket<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"websocket已关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"websocket已关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/13/QjtLf9uR8zgJ4hw.png" alt="image-20220713102032387"></p><p>closeEvent解释<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CloseEvent">请看这里</a></p><h2 id="3-5-webSocket-onmessage"><a href="#3-5-webSocket-onmessage" class="headerlink" title="3.5 webSocket.onmessage"></a>3.5 <strong>webSocket.onmessage</strong></h2><p>实例对象的 onmessage 属性，用于指定收到服务器数据后的回调函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">socket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#receiveMsg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/13/J6tPjZvGf8IbQRp.png" alt="image-20220713105730879"></p><p>messageEvent详解<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MessageEvent">请看这里</a></p><p>注意，服务器数据可能是文本，也可能是二进制数据（ blob 对象或 Arraybuffer 对象）。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> event<span class="token punctuation">.</span>data <span class="token operator">===</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Received data string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data <span class="token keyword">instanceof</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> buffer <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Received arraybuffer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了动态判断收到的数据类型，也可以使用 binaryType 属性，显式指定收到的二进制数据类型</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 收到的是 blob 数据</span>ws<span class="token punctuation">.</span>binaryType <span class="token operator">=</span> <span class="token string">"blob"</span><span class="token punctuation">;</span>ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 收到的是 ArrayBuffer 数据 </span>ws<span class="token punctuation">.</span>binaryType <span class="token operator">=</span> <span class="token string">"arraybuffer"</span><span class="token punctuation">;</span> ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-6-webSocket-send"><a href="#3-6-webSocket-send" class="headerlink" title="3.6 webSocket.send()"></a>3.6 <strong>webSocket.send()</strong></h2><p>实例对象的 send() 方法用于向服务器发送数据。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 发送文本</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'your message'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发送 Blob 对象的例子。</span><span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input[type="file"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发送 ArrayBuffer 对象的例子。</span><span class="token keyword">var</span> img <span class="token operator">=</span> canvas_context<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> binary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> img<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     binary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> img<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>binary<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-7-webSocket-bufferedAmount"><a href="#3-7-webSocket-bufferedAmount" class="headerlink" title="3.7 webSocket.bufferedAmount"></a>3.7 <strong>webSocket.bufferedAmount</strong></h2><p>实例对象的 bufferedAmount 属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>bufferedAmount <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// 发送完毕 </span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token comment">// 发送还没结束 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-8-webSocket-onerror"><a href="#3-8-webSocket-onerror" class="headerlink" title="3.8 webSocket.onerror"></a>3.8 <strong>webSocket.onerror</strong></h2><p>实例对象的 onerror 属性，用于指定报错时的回调函数。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">socket<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// handle error event </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// handle error event </span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/13/ZHE286YIVtd3s1K.png" alt="image-20220713111515566"></p><p>error的event详解<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event">在这里</a></p><h1 id="四-案列实现"><a href="#四-案列实现" class="headerlink" title="四. 案列实现"></a>四. 案列实现</h1><p>基于springboot来简单实现</p><p><img src="https://s2.loli.net/2022/07/13/GH1O2E3viBauk7J.png" alt="image-20220713143252416"></p><p>客户端与服务器建立连接，客户端1给其他客户端发送消息，先发给服务器，由服务器去转发给其他客户端</p><p>创建一个空的maven工程，引入依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.lx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>es-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置类</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">22599</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">thymeleaf</span><span class="token punctuation">:</span>    <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token punctuation">{</span>    <span class="token comment">/***    * @Title: serverEndpointExporter    * @Param: []    * @description: 这个Bean会自动注册使用@ServerEndpoint注解声明的websocket endpoint    * @author: liuxin    * @date: 2022/7/12 10:33    * @return: org.springframework.web.socket.server.standard.ServerEndpointExporter    * @throws:    */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServerEndpointExporter</span> <span class="token function">serverEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>socket连接的配置类，需要的业务操作都在这里</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span><span class="token string">"/websocket/{sid}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketServer</span> <span class="token punctuation">{</span>    <span class="token comment">// 静态变量 用来记录当前的连接数 该对象保证原子性  是线程安全的</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> onlineNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 现成安全的map对象  用来存放webSocket对象  key=用户id  value=连接的Session对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Session</span><span class="token punctuation">&gt;</span></span> sessionPools <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发送消息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">{</span>                session<span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 给指定用户发送消息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Session</span> session <span class="token operator">=</span> sessionPools<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 建立连接成功后调用</span>    <span class="token annotation punctuation">@OnOpen</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"sid"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// 连接加入到SessionPools中</span>        sessionPools<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 连接数量+1</span>        <span class="token function">addOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName <span class="token operator">+</span> <span class="token string">"加入webSocket！当前人数为"</span> <span class="token operator">+</span> onlineNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span><span class="token string">"欢迎"</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">"加入连接！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 关闭连接时调用</span>    <span class="token annotation punctuation">@OnClose</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"sid"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 删除SessionPools中的信息</span>        sessionPools<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 连接数-1</span>        <span class="token function">subOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName <span class="token operator">+</span> <span class="token string">"断开webSocket连接！当前人数为"</span> <span class="token operator">+</span> onlineNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 收到消息时调用</span>    <span class="token annotation punctuation">@OnMessage</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectMapper</span> om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> om<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Session</span> session <span class="token operator">=</span> sessionPools<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"toUserId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">sendMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"sendMsg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 错误时调用</span>    <span class="token annotation punctuation">@OnError</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">,</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发生错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 数量+1</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        onlineNum<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 数量-1</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">subOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        onlineNum<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strings <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller类，这里是使用thymeleaf金泰页面来操作的，这个路由可以跳转到后面写的websocket页面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/websocket"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ModelAndView</span> mav<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"websocket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mav<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器代码基本结束，接下来是前端代码,一个简易的html页面</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>WebSocket<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/jquery-1.10.2.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>h3<span class="token operator">&gt;</span>基于web socket 点对点通讯<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>【当前用户<span class="token constant">ID</span>】：<span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"userId"</span> name<span class="token operator">=</span><span class="token string">"userId"</span> type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>【对方用户<span class="token constant">ID</span>】：<span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"toUserId"</span> name<span class="token operator">=</span><span class="token string">"toUserId"</span> type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">"20"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>【发送信息】： <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"sendMsg"</span> name<span class="token operator">=</span><span class="token string">"sendMsg"</span> type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">"hello websocket"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>【接收信息】： <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"receiveMsg"</span> style<span class="token operator">=</span><span class="token string">"color: purple"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"openBtn"</span><span class="token operator">&gt;</span>开启socket<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"sendBtn"</span><span class="token operator">&gt;</span>发送消息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">var</span> socket<span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#openBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>WebSocket<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"您的浏览器不支持WebSocket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"您的浏览器支持WebSocket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//实现化WebSocket对象，指定要连接的服务器地址与端口 建立连接</span>                <span class="token keyword">var</span> userId <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'userId'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">var</span> socketUrl<span class="token operator">=</span><span class="token string">"ws://127.0.0.1:22599/websocket/"</span><span class="token operator">+</span>userId<span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>socketUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>socket<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    socket<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>socketUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span>                <span class="token comment">//打开事件</span>                socket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"websocket已打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//socket.send("这是来自客户端的消息" + location.href + new Date());</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment">//获得消息事件</span>                socket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#receiveMsg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//发现消息进入 开始处理前端触发逻辑</span>                    <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment">//关闭事件</span>                socket<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"websocket已关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment">//发生了错误事件</span>                socket<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"websocket发生了错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#sendBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>WebSocket<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"您的浏览器不支持WebSocket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"您的浏览器支持WebSocket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> toUserId <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'toUserId'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> sendMsg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'sendMsg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            o<span class="token punctuation">.</span>toUserId <span class="token operator">=</span> toUserId<span class="token punctuation">;</span>            o<span class="token punctuation">.</span>sendMsg <span class="token operator">=</span> sendMsg<span class="token punctuation">;</span>            <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整体项目结构</p><p><img src="https://s2.loli.net/2022/07/13/7YMZ9aqduQzSErG.png" alt="image-20220713145315648"></p><p>启动springboot,访问<code>http://localhost:22599/websocket</code></p><p><img src="https://s2.loli.net/2022/07/13/bfCxm8qUltQaBiy.png" alt="image-20220713145628801"></p><p>这样算是启动成功了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程篇</title>
      <link href="/2022/07/08/2022-07-08-duo-xian-cheng-pian/"/>
      <url>/2022/07/08/2022-07-08-duo-xian-cheng-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><h3 id="1-进程和线程"><a href="#1-进程和线程" class="headerlink" title="1. 进程和线程"></a>1. 进程和线程</h3><h4 id="1-1-进程"><a href="#1-1-进程" class="headerlink" title="1.1 进程"></a>1.1 进程</h4><p>进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。</p><p>在 Windows 中通过查看任务管理器的方式，我们就可以清楚看到 Windows 当前运行的进程（<code>.exe</code> 文件的运行）。</p><p><img src="https://s2.loli.net/2023/04/17/nyRGJ1UDhsCKM76.png" alt="image-20220926164105440"></p><h4 id="1-2-线程"><a href="#1-2-线程" class="headerlink" title="1.2 线程"></a>1.2 线程</h4><p>线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享进程的<strong>堆</strong>和<strong>方法区</strong>资源，但每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><p><strong>总结：</strong> <strong>线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。</strong></p><h3 id="2-并发与并行"><a href="#2-并发与并行" class="headerlink" title="2. 并发与并行"></a>2. 并发与并行</h3><ul><li><strong>并发</strong>：两个及两个以上的作业在同一 <strong>时间段</strong> 内执行。</li><li><strong>并行</strong>：两个及两个以上的作业在同一 <strong>时刻</strong> 执行。</li></ul><p>我们常说的并发编程其实就是指多线程编程</p><h3 id="3-同步和异步"><a href="#3-同步和异步" class="headerlink" title="3. 同步和异步"></a>3. 同步和异步</h3><ul><li><strong>同步</strong> ： 发出一个调用之后，在没有得到结果之前， 该调用就不可以返回，一直等待。</li><li><strong>异步</strong> ：调用在发出之后，不用等待返回结果，该调用直接返回。</li></ul><h2 id="二-为什么使用多线程"><a href="#二-为什么使用多线程" class="headerlink" title="二. 为什么使用多线程"></a>二. 为什么使用多线程</h2><ul><li><strong>从计算机底层来说：</strong> 线程可以比作是轻量级的进程，是程序执行的最小单位,线程间的切换和调度的成本远远小于进程。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。</li><li>最主要的是进程利用系统资源的整体效率会大大提高。</li></ul><h2 id="三-创建线程的方式"><a href="#三-创建线程的方式" class="headerlink" title="三. 创建线程的方式"></a>三. 创建线程的方式</h2><p>通常我们创建线程有五种方式：</p><ul><li>继承Thread类</li><li>实现Runnable接口</li><li>使用Callable和Future来创建</li><li>通过线程池</li></ul><h3 id="1-继承Thread类"><a href="#1-继承Thread类" class="headerlink" title="1. 继承Thread类"></a>1. 继承Thread类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"嘻嘻嘻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/VFK8Bx1zhlw3paM.png" alt="image-20220928142149522"></p><h3 id="2-实现Runnable接口"><a href="#2-实现Runnable接口" class="headerlink" title="2. 实现Runnable接口"></a>2. 实现Runnable接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"嘻嘻嘻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果与上述一致，输出的顺序为随机。通常我们会这样写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"嘻嘻嘻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// 或者使用lamabda表达式</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"嘻嘻嘻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-实现Callable接口"><a href="#3-实现Callable接口" class="headerlink" title="3. 实现Callable接口"></a>3. 实现Callable接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Callable产生结果，Future获取结果</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 使用FutureTask 来封装ThreadRunnable  方便祁东县城的时候可以拿到返回值</span>            <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringFutureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>stringFutureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringFutureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"嘻嘻嘻"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果与上面一致，结果的输出顺序随机</p><h3 id="4-使用线程池"><a href="#4-使用线程池" class="headerlink" title="4. 使用线程池"></a>4. 使用线程池</h3><p>后面会讲到  请接着往下看</p><h2 id="四-使用多线程的问题"><a href="#四-使用多线程的问题" class="headerlink" title="四. 使用多线程的问题"></a>四. 使用多线程的问题</h2><p>并发编程的目的就是为了能提高程序的执行效率提高程序运行速度，但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，比如：内存泄漏、死锁、线程不安全等等。</p><h2 id="五-线程的运行状态"><a href="#五-线程的运行状态" class="headerlink" title="五. 线程的运行状态"></a>五. 线程的运行状态</h2><h3 id="1-新建状态-New-："><a href="#1-新建状态-New-：" class="headerlink" title="1. 新建状态(New)："></a>1. 新建状态(New)：</h3><p>​    当用new操作符创建一个线程时， 例如new Thread(r)，线程还没有开始运行，此时线程处在新建状态。 当一个线程处于新生状态时，程序还没有开始运行线程中的代码</p><h3 id="2-就绪状态-Runnable"><a href="#2-就绪状态-Runnable" class="headerlink" title="2. 就绪状态(Runnable)"></a>2. 就绪状态(Runnable)</h3><p>一个新创建的线程并不自动开始运行，要执行线程，必须调用线程的start()方法。当线程对象调用start()方法即启动了线程，start()方法创建线程运行的系统资源，并调度线程运行run()方法。当start()方法返回后，线程就处于就绪状态。</p><p>处于就绪状态的线程并不一定立即运行run()方法，线程还必须同其他线程竞争CPU时间，只有获得CPU时间才可以运行线程。因为在单CPU的计算机系统中，不可能同时运行多个线程，一个时刻仅有一个线程处于运行状态。因此此时可能有多个线程处于就绪状态。对多个处于就绪状态的线程是由Java运行时系统的线程调度程序(thread scheduler)来调度的。</p><h3 id="3-运行状态-Running"><a href="#3-运行状态-Running" class="headerlink" title="3. 运行状态(Running)"></a>3. 运行状态(Running)</h3><p>当线程获得CPU时间后，它才进入运行状态，真正开始执行run()方法.</p><h3 id="4-阻塞状态-Blocked"><a href="#4-阻塞状态-Blocked" class="headerlink" title="4.  阻塞状态(Blocked)"></a>4.  阻塞状态(Blocked)</h3><p>线程运行过程中，可能由于各种原因进入阻塞状态:<br>1&gt;线程通过调用sleep方法进入睡眠状态；<br>2&gt;线程调用一个在I/O上被阻塞的操作，即该操作在输入输出操作完成之前不会返回到它的调用者；<br>3&gt;线程试图得到一个锁，而该锁正被其他线程持有；<br>4&gt;线程在等待某个触发条件；<br>……           </p><p>所谓阻塞状态是正在运行的线程没有运行结束，暂时让出CPU，这时其他处于就绪状态的线程就可以获得CPU时间，进入运行状态。</p><h3 id="5-死亡状态-Dead"><a href="#5-死亡状态-Dead" class="headerlink" title="5. 死亡状态(Dead)"></a>5. 死亡状态(Dead)</h3><p>有两个原因会导致线程死亡：</p><ol><li><p>run方法正常退出而自然死亡，</p></li><li><p>一个未捕获的异常终止了run方法而使线程猝死。</p><p>为了确定线程在当前是否存活着（就是要么是可运行的，要么是被阻塞了），需要使用isAlive方法。如果是可运行或被阻塞，这个方法返回true； 如果线程仍旧是new状态且不是可运行的， 或者线程死亡了，则返回false.</p></li></ol><h2 id="六-上下文切换"><a href="#六-上下文切换" class="headerlink" title="六. 上下文切换"></a>六. 上下文切换</h2><p>线程在执行过程中会有自己的运行条件和状态（也称上下文），比如上文所说到过的程序计数器，栈信息等。当出现如下情况的时候，线程会从占用 CPU 状态中退出。</p><ul><li>主动让出 CPU，比如调用了 <code>sleep()</code>, <code>wait()</code> 等。（sleep 不会释放锁,<em>但是会让出cpu执行权</em>）</li><li>时间片用完，因为操作系统要防止一个线程或者进程长时间占用 CPU 导致其他线程或者进程饿死。</li><li>调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。</li><li>被终止或结束运行</li></ul><p>这其中前三种都会发生线程切换，线程切换意味着需要保存当前线程的上下文，留待线程下次占用 CPU 的时候恢复现场。并加载下一个将要占用 CPU 的线程上下文。这就是所谓的 <strong>上下文切换</strong>。</p><p>上下文切换是现代操作系统的基本功能，因其每次需要保存信息恢复信息，这将会占用 CPU，内存等系统资源进行处理，也就意味着效率会有一定损耗，如果频繁切换就会造成整体效率低下。</p><h2 id="七-线程死锁"><a href="#七-线程死锁" class="headerlink" title="七. 线程死锁"></a>七. 线程死锁</h2><h3 id="1-什么是死锁"><a href="#1-什么是死锁" class="headerlink" title="1. 什么是死锁"></a>1. 什么是死锁</h3><p>多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。</p><h3 id="2-产生死锁的四个必要条件"><a href="#2-产生死锁的四个必要条件" class="headerlink" title="2. 产生死锁的四个必要条件"></a>2. 产生死锁的四个必要条件</h3><ol><li>互斥条件：该资源任意一个时刻只由一个线程占用。</li><li>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件: 线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</li><li>循环等待条件: 若干线程之间形成一种头尾相接的循环等待资源关系。</li></ol><h3 id="3-如何预防死锁"><a href="#3-如何预防死锁" class="headerlink" title="3.  如何预防死锁"></a>3.  如何预防死锁</h3><p>破坏死锁的产生的必要条件即可：</p><ol><li><strong>破坏请求与保持条件</strong> ：一次性申请所有的资源。</li><li><strong>破坏不剥夺条件</strong> ：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。</li><li><strong>破坏循环等待条件</strong> ：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。</li></ol><h2 id="八-sleep-与-wait"><a href="#八-sleep-与-wait" class="headerlink" title="八. sleep() 与 wait()"></a>八. sleep() 与 wait()</h2><h3 id="1-共同点"><a href="#1-共同点" class="headerlink" title="1. 共同点"></a>1. 共同点</h3><p>两者都可以暂停线程的执行</p><h3 id="2-区别"><a href="#2-区别" class="headerlink" title="2. 区别"></a>2. 区别</h3><ul><li><strong><code>sleep()</code> 方法没有释放锁，而 <code>wait()</code> 方法释放了锁</strong> 。</li><li><code>wait()</code> 通常被用于线程间交互/通信，<code>sleep()</code>通常被用于暂停执行。</li><li><code>wait()</code> 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 <code>notify()</code>或者 <code>notifyAll()</code> 方法。<code>sleep()</code>方法执行完成后，线程会自动苏醒，或者也可以使用 <code>wait(long timeout)</code> 超时后线程会自动苏醒。</li><li><code>sleep()</code> 是 <code>Thread</code> 类的静态本地方法，<code>wait()</code> 则是 <code>Object</code> 类的本地方法</li></ul><p><strong>问： 为什么 <code>wait()</code> 方法不定义在 Thread 中？</strong></p><p><code>wait()</code> 会释放当前线程占用的对象锁，所以释放锁需要操作当前对象</p><p><code>sleep()</code> 是让当前线程暂停执行，不释放对象锁，不需要操作对象</p><p><strong>问： 直接调用线程中的<code>run() </code>方法可以达到多线程的启动吗</strong></p><p>调用 <code>start()</code> 方法方可启动线程并使线程进入就绪状态，直接执行 <code>run()</code> 方法的话不会以多线程的方式执行。</p><h2 id="九-volatile-关键字"><a href="#九-volatile-关键字" class="headerlink" title="九.  volatile 关键字"></a>九.  volatile 关键字</h2><p>volatile只能修饰实例变量或者类变量,<strong>不能修饰方法、局部变量、方法参数等。</strong></p><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h3><ul><li>被<code>volatile </code>关键字修饰的变量可保证多线程间的可见性</li><li>被<code>volatile </code>关键字修饰的变量可防止JVM的指令重排序</li></ul><p>如果我们将一个变量使用 <code>volatile</code> 修饰，这就指示 编译器，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。</p><p><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性（不能保证线程安全）。<code>synchronized</code> 关键字两者都能保证。</p><h3 id="2-什么叫线程间的可见性"><a href="#2-什么叫线程间的可见性" class="headerlink" title="2. 什么叫线程间的可见性"></a>2. 什么叫线程间的可见性</h3><p>可见性是指一个线程修改了某一个共享变量的值时，其他线程能够立即知道这个修改。</p><h3 id="3-指令重排序"><a href="#3-指令重排序" class="headerlink" title="3. 指令重排序"></a>3. 指令重排序</h3><h4 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h4><p>代码在实际运行时，代码指令可能不是严格按照代码语句的顺序执行的。<br>只要程序的最终运行结果与它顺序化执行的结果相等，那么指令的执行顺序可以与代码逻辑顺序不一致，整个过程叫：指令重排序。</p><h4 id="3-2-为什么要进行指令重排序"><a href="#3-2-为什么要进行指令重排序" class="headerlink" title="3.2 为什么要进行指令重排序"></a>3.2 为什么要进行指令重排序</h4><p>大多数现代处理器都会采用将指令乱序执行的方法，在条件允许的情况下，直接执行后面的指令，通过乱序执行的技术处理器可以大大提高执行效率。</p><h4 id="3-3-多线程下的指令重排序"><a href="#3-3-多线程下的指令重排序" class="headerlink" title="3.3 多线程下的指令重排序"></a>3.3 多线程下的指令重排序</h4><p><strong>双重校验锁实现对象单例（线程安全）</strong> ：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getUniqueInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">//先判断对象是否已经实例过，没有实例化过才进入加锁代码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//类对象加锁</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>uniqueInstance</code> 采用 <code>volatile</code> 关键字修饰也是很有必要的， <code>uniqueInstance = new Singleton();</code> 这段代码其实是分为三步执行：</p><ol><li>为 <code>uniqueInstance</code> 分配内存空间</li><li>初始化 <code>uniqueInstance</code></li><li>将 <code>uniqueInstance</code> 指向分配的内存地址</li></ol><p>但是由于 <code>JVM </code>具有指令重排的特性，执行顺序有可能变成 1-&gt;3-&gt;2。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 <code>T1</code> 执行了 1 和 3，此时 <code>T2 </code>调用 <code>getUniqueInstance</code>() 后发现 <code>uniqueInstance</code> 不为空，因此返回 <code>uniqueInstance</code>，但此时 <code>uniqueInstance</code> 还未被初始化.</p><p>而通过volatile修饰的关键字，线程在对这个变量进行读写操作的时候，会通过插入特定的 <strong>内存屏障</strong> 的方式来禁止指令重排序。</p><h2 id="十-synchronized-关键字"><a href="#十-synchronized-关键字" class="headerlink" title="十. synchronized 关键字"></a>十. synchronized 关键字</h2><h3 id="1-作用-1"><a href="#1-作用-1" class="headerlink" title="1. 作用"></a>1. 作用</h3><p><code>synchronized</code> 翻译成中文是同步的的意思，主要解决的是多个线程之间访问资源的同步性，可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><ul><li>修饰实例方法</li><li>修饰静态方法</li><li>修饰代码块</li></ul><ul><li><code>synchronized</code> 关键字加到 <code>static</code> 静态方法和 <code>synchronized(class)</code> 代码块上都是是给 Class 类上锁；</li><li><code>synchronized</code> 关键字加到实例方法上是给对象实例上锁；</li><li>尽量不要使用 <code>synchronized(String a)</code> 因为 <code>JVM </code>中，字符串常量池具有缓存功能。</li></ul><h4 id="1-修饰实例方法"><a href="#1-修饰实例方法" class="headerlink" title="(1) 修饰实例方法"></a>(1) 修饰实例方法</h4><p>给当前对象实例加锁，进入同步代码前要获得 <strong>当前对象实例的锁</strong> 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//业务代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-修饰静态方法"><a href="#2-修饰静态方法" class="headerlink" title="(2) 修饰静态方法"></a>(2) 修饰静态方法</h4><p>给当前类加锁，会作用于类的所有对象实例 ，进入同步代码前要获得 <strong>当前 class 的锁</strong>。</p><p>这是因为静态成员不属于任何一个实例对象，归整个类所有，不依赖于类的特定实例，被类的所有实例共享。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//业务代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>静态 <code>synchronized</code> 方法和非静态 <code>synchronized</code> 方法之间的调用互斥么？不互斥！如果一个线程 A 调用一个实例对象的非静态 <code>synchronized</code> 方法，而线程 B 需要调用这个实例对象所属类的静态 <code>synchronized</code> 方法，是允许的，不会发生互斥现象，因为访问静态 <code>synchronized</code> 方法占用的锁是当前类的锁，而访问非静态 <code>synchronized</code> 方法占用的锁是当前实例对象锁。</p><h4 id="3-修饰代码块"><a href="#3-修饰代码块" class="headerlink" title="(3) 修饰代码块"></a>(3) 修饰代码块</h4><p>对括号里指定的对象/类加锁：</p><ul><li><code>synchronized(object)</code> 表示进入同步代码库前要获得 <strong>给定对象的锁</strong>。</li><li><code>synchronized(类.class)</code> 表示进入同步代码前要获得 <strong>给定 Class 的锁</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//业务代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>问：构造方法可以使用<code>synchronized</code>关键字吗</strong></p><p>不可以，构造方法本身就属于线程安全的。</p><h3 id="3-底层原理"><a href="#3-底层原理" class="headerlink" title="3. 底层原理"></a>3. 底层原理</h3><p>synchronized 关键字底层原理属于 <code>JVM</code> 层面。</p><p><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。在执行<code>monitorenter</code>时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。对象锁的的拥有者线程才可以执行 <code>monitorexit</code> 指令来释放锁。在执行 <code>monitorexit</code> 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。</p><p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取得代之的确实是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。</p><p><strong>总结：</strong></p><ul><li><p><code>volatile</code> 关键字是线程同步的轻量级实现，所以 <code>volatile</code>性能肯定比<code>synchronized</code>关键字要好 。但是 <code>volatile</code> 关键字只能用于变量而 <code>synchronized</code> 关键字可以修饰方法以及代码块 。</p></li><li><p><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性。<code>synchronized</code> 关键字两者都能保证。</p></li><li><p><code>volatile</code>关键字主要用于解决变量在多个线程之间的可见性，而 <code>synchronized</code> 关键字解决的是多个线程之间访问资源的同步性。</p></li></ul><h2 id="十一-ThreadLocal"><a href="#十一-ThreadLocal" class="headerlink" title="十一. ThreadLocal"></a>十一. ThreadLocal</h2><h3 id="1-作用-2"><a href="#1-作用-2" class="headerlink" title="1. 作用"></a>1. 作用</h3><p>通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。<strong>如果想实现每一个线程都有自己的专属本地变量该如何解决呢？</strong></p><p><code>JDK </code>中自带的<code>ThreadLocal</code>类正是为了解决这样的问题。 <strong><code>ThreadLocal</code>类主要解决的就是让每个线程绑定自己的值，可以将<code>ThreadLocal</code>类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。</strong></p><p> <code>ThreadLocal</code> 就是用来避免线程竞争的。</p><h3 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2. 使用"></a>2. 使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalExample</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment">// SimpleDateFormat 不是线程安全的，所以每个线程都要有自己独立的副本</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span> FORMAT_THREAD_LOCAL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token class-name">SimpleDateFormat</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">// 这种写法与上面是一样的  这是java8新推出的</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span> formatter <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd HHmm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadLocalExample</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">""</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread Name= "</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" default Formatter = "</span><span class="token operator">+</span>FORMAT_THREAD_LOCAL<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//formatter pattern is changed here by thread, but it won't reflect to other threads</span>        FORMAT_THREAD_LOCAL<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread Name= "</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" formatter = "</span><span class="token operator">+</span>FORMAT_THREAD_LOCAL<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">Connected to the target VM, address: '127.0.0.1:10992', transport: 'socket'Thread Name= 0 default Formatter = yyyy-MM-dd HHThread Name= 1 default Formatter = yyyy-MM-dd HHThread Name= 0 formatter = yy-M-d ah:mmThread Name= 1 formatter = yy-M-d ah:mmThread Name= 2 default Formatter = yyyy-MM-dd HHThread Name= 3 default Formatter = yyyy-MM-dd HHThread Name= 2 formatter = yy-M-d ah:mmThread Name= 4 default Formatter = yyyy-MM-dd HHThread Name= 3 formatter = yy-M-d ah:mmThread Name= 4 formatter = yy-M-d ah:mmThread Name= 5 default Formatter = yyyy-MM-dd HHThread Name= 6 default Formatter = yyyy-MM-dd HHThread Name= 5 formatter = yy-M-d ah:mmThread Name= 7 default Formatter = yyyy-MM-dd HHThread Name= 8 default Formatter = yyyy-MM-dd HHThread Name= 6 formatter = yy-M-d ah:mmThread Name= 7 formatter = yy-M-d ah:mmThread Name= 9 default Formatter = yyyy-MM-dd HHThread Name= 9 formatter = yy-M-d ah:mmThread Name= 8 formatter = yy-M-d ah:mmDisconnected from the target VM, address: '127.0.0.1:10992', transport: 'socket'Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到线程间的<code>SimpleDateFormat </code>是互不干扰的，在<code>ThreadLocal</code>中为每一个线程都闯创建了<code>SimpleDateFormat</code>副本</p><h3 id="3-原理"><a href="#3-原理" class="headerlink" title="3. 原理"></a>3. 原理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 基于上面部分的一个栗子</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span> FORMAT_THREAD_LOCAL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token class-name">SimpleDateFormat</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 这是源码的部分  重写过setInitialValue 或返回一个对象 T</span>        <span class="token class-name">T</span> value <span class="token operator">=</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取当前线程 </span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取map得到ThreadLocalMap对象  这里的map后续会讲到 </span>        <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判空  如不存在就创建</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token comment">// 创建是为了在ThreadLocalMap添加T对象副本，key就是当前线程</span>            <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// 创建Map  下面先看看t.threadLocals是什么 </span><span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">T</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span>threadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是在thread类下面的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* ThreadLocal values pertaining to this thread. This map is maintained    * by the ThreadLocal class. */</span>   <span class="token class-name">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap</span> threadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token comment">/*    * InheritableThreadLocal values pertaining to this thread. This map is    * maintained by the InheritableThreadLocal class.    */</span>   <span class="token class-name">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap</span> inheritableThreadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面<code>Thread</code>类 源代码可以看出<code>Thread</code> 类中有一个 <code>threadLocals</code> 和 一个 <code>inheritableThreadLocals</code> 变量，它们都是 <code>ThreadLocalMap</code> 类型的变量,我们可以把 <code>ThreadLocalMap</code> 理解为<code>ThreadLocal</code> 类实现的定制化的 <code>HashMap</code>。默认情况下这两个变量都是 null，只有当前线程调用 <code>ThreadLocal</code> 类的 <code>set</code>或<code>get</code>方法时才创建它们，实际上调用这两个方法的时候，我们调用的是<code>ThreadLocalMap</code>类对应的 <code>get()</code>、<code>set()</code>方法。</p><p>继续  再看看上述的<code>new ThreadLocalMap(this, firstValue);</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 可以看到本质上市把我们的数据存到了一个Entry数组中</span><span class="token comment">// 可以解释为  我的每一个线程只会有一个ThreadLocalMap</span><span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> firstKey<span class="token punctuation">,</span> <span class="token class-name">Object</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// map里面是一个entry对象数组  用于存放每一个对象</span>            table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>INITIAL_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> firstKey<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>INITIAL_CAPACITY <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>firstKey<span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">setThreshold</span><span class="token punctuation">(</span>INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20220928105707141.png" alt="image-20220928105707141"></p><p>我们看一张图</p><p><img src="../%E5%A3%81%E7%BA%B8/TheardLocal.png"></p><p>这张图很直观的能表达出层次感</p><h3 id="4-总结："><a href="#4-总结：" class="headerlink" title="4. 总结："></a>4. 总结：</h3><p><strong>一个线程(Thread)对应一个 <code>ThreadLocalMap</code>,<code>ThreadLocalMap</code>对应一个Entry数组，每个Entry数组存放隔离变量的对象。key为当前<code>ThreadLocal</code>对应计算的hash值，value值为隔离变量的对象。</strong></p><p>在多线程下使用ThreadLocal时，会为每一个新的线程创建一个ThreadLocalMap。然后存放ThreadLocal的隔离对象。</p><p>这就可以解释为什么不同线程间的对象是隔离的。每一个线程都会去创建一个对象的副本  存到各自的的ThreadLocalMap的Entry数组中。保证了多线程之间对数据的操作互不干扰</p><p>比如我们在同一个线程中声明了两个 <code>ThreadLocal</code> 对象的话， <code>Thread</code>内部都是使用仅有的那个<code>ThreadLocalMap</code> 存放数据的，<code>ThreadLocalMap</code>的 key 就是 <code>ThreadLocal</code>对象，value 就是 <code>ThreadLocal</code> 对象调用<code>set</code>方法设置的值。</p><h3 id="6-ThreadLocal-内存泄露"><a href="#6-ThreadLocal-内存泄露" class="headerlink" title="6. ThreadLocal 内存泄露"></a>6. ThreadLocal 内存泄露</h3><h4 id="（1）-原因"><a href="#（1）-原因" class="headerlink" title="（1） 原因"></a>（1） 原因</h4><p><code>ThreadLocalMap</code> 中使用的 key 为 <code>ThreadLocal</code> 的弱引用，而 value 是强引用。所以，如果 <code>ThreadLocal</code> 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉。</p><p>这样一来，<code>ThreadLocalMap</code> 中就会出现 key 为 null 的 Entry。假如我们不做任何措施的话，value 永远无法被 GC 回收，这个时候就可能会产生内存泄露。</p><p>当Thread一直没有结束时，Thread中的threadLocals就不会被回收，threadLocals里面存储的Entry如果不手动删除的话，就会一直存在这个threadLocals里面，所以就会出现内存泄漏的问题</p><p><strong>为什么使用弱引用：</strong></p><ul><li>key 使用强引用：引用的<code>ThreadLocal</code>的对象被回收了，但是<code>ThreadLocalMap</code>还持有<code>ThreadLocal</code>的强引用，如果没有手动删除，<code>ThreadLocal</code>不会被回收，导致<code>Entry</code>内存泄漏。</li><li>key 使用弱引用：引用的<code>ThreadLocal</code>的对象被回收了，由于<code>ThreadLocalMap</code>持有<code>ThreadLocal</code>的弱引用，即使没有手动删除，<code>ThreadLocal</code>也会被回收。<code>value</code>在下一次<code>ThreadLocalMap</code>调用<code>set</code>,<code>get</code>的时候会被清除。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>            <span class="token comment">/** The value associated with this ThreadLocal. */</span>            <span class="token class-name">Object</span> value<span class="token punctuation">;</span>            <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                value <span class="token operator">=</span> v<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（2）-解决"><a href="#（2）-解决" class="headerlink" title="（2） 解决"></a>（2） 解决</h4><p><code>ThreadLocalMap</code> 实现中已经考虑了这种情况，在调用 <code>set()</code>、<code>get()</code>、<code>remove()</code> 方法的时候，会清理掉 key 为 null 的记录。使用完 <code>ThreadLocal</code>方法后 最好手动调用<code>remove()</code>方法</p><h2 id="十二-线程池"><a href="#十二-线程池" class="headerlink" title="十二. 线程池"></a>十二. 线程池</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>什么是线程池：</p><p>通俗的来讲就是提供了一个装线程的容器(池子),方便我们使用线程和回收线程</p><h3 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h3><ul><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><p>我们可以通过线程池的构造器来创建，也可以通过创建线程池的工具类来生成</p><p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20220928152936449.png" alt="image-20220928152936449"></p><p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20220928153022952.png" alt="image-20220928153022952"></p><ol><li><code>Executors.newFixedThreadPool</code>：创建一个固定大小的线程池，可控制并发的线程数，超出的线程会在队列中等待。</li><li><code>Executors.newCachedThreadPool</code>：创建一个可缓存的线程池，若线程数超过处理所需，缓存一段时间后会回收，若线程数不够，则新建线程。</li><li><code>Executors.newSingleThreadExecutor</code>：创建单个线程数的线程池，它可以保证先进先出的执行顺序。</li><li><code>Executors.newScheduledThreadPool</code>：创建一个可以执行延迟任务的线程池。</li><li><code>Executors.newSingleThreadScheduledExecutor</code>：创建一个单线程的可以执行延迟任务的线程池。</li><li><code>Executors.newWorkStealingPool</code>：创建一个抢占式执行的线程池（任务执行顺序不确定）【JDK 1.8 添加】。</li><li><code>ThreadPoolExecutor</code>：手动创建线程池的方式，它创建时最多可以设置 7 个参数。</li></ol><h4 id="1-FixedThreadPool"><a href="#1-FixedThreadPool" class="headerlink" title="(1) FixedThreadPool"></a>(1) FixedThreadPool</h4><p>创建一个固定大小的线程池，可控制并发线程数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"execute提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment">// 有返回值</span>            <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> submit <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"submit提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> finalI<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finalI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/j7JwvlUoFgWVuxE.png" alt="image-20220928155040765"></p><p>注意： 执行完并没有关闭程序，是因为我们创建的线程在等待被使用。</p><p>上面有两个执行方法execute与submit。 及诶奥莱说说他们的区别</p><ol><li><strong><code>execute()</code>方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否；</strong></li><li><strong><code>submit()</code>方法用于提交需要返回值的任务。线程池会返回一个 <code>Future</code> 类型的对象，通过这个 <code>Future</code> 对象可以判断任务是否执行成功</strong>，并且可以通过 <code>Future</code> 的 <code>get()</code>方法来获取返回值，<code>get()</code>方法会阻塞当前线程直到任务完成，而使用 <code>get(long timeout，TimeUnit unit)</code>方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。</li></ol><h4 id="2-CachedThreadPool"><a href="#2-CachedThreadPool" class="headerlink" title="(2) CachedThreadPool"></a>(2) CachedThreadPool</h4><p>创建一个可缓存的线程池，若线程数超过任务所需，那么多余的线程会被缓存一段时间后才被回收，若线程数不够，则会新建线程。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"嘻嘻嘻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/SeFzfL8q1x2VGRQ.png" alt="image-20220928160418189"></p><p>可以看到创建了五个线程</p><p><strong>使用场景：</strong></p><p>CachedThreadPool 是根据短时间的任务量来决定创建的线程数量的，所以它适合短时间内有突发大量任务的处理场景。</p><h4 id="3-SingleThreadExecutor"><a href="#3-SingleThreadExecutor" class="headerlink" title="(3) SingleThreadExecutor"></a>(3) SingleThreadExecutor</h4><p>创建单个线程的线程池，它可以保证先进先出的执行顺序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> in <span class="token operator">=</span> i<span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> in <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/S3B1nfklsOKN7FT.png" alt="image-20220928161718319"></p><p><strong>单个线程的线程池有什么意义？</strong></p><p>单个线程的线程池相比于线程来说，它的优点有以下 2 个：</p><ul><li><p>可以复用线程：即使是单个线程池，也可以复用线程。</p></li><li><p>提供了任务管理功能：单个线程池也拥有任务队列，在任务队列可以存储多个任务，这是线程无法实现的，并且当任务队列满了之后，可以执行拒绝策略，这些都是线程不具备的。</p></li></ul><h4 id="4-ScheduledThreadPool"><a href="#4-ScheduledThreadPool" class="headerlink" title="(4) ScheduledThreadPool"></a>(4) ScheduledThreadPool</h4><p>创建一个可以执行延迟任务的线程池。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 五秒之后执行一次</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ScheduledExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行之前"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span>  <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/HuwXFmZIEfVTjop.png" alt="image-20220928164239196"></p><p>我们可以看看他的方法，参数详解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 参数一： 实现Runnable接口的方法</span><span class="token comment">// 参数二： 间隔时间</span><span class="token comment">// 参数三： 时间粒度  </span><span class="token comment">// TimeUnit.DAYS //天</span><span class="token comment">//TimeUnit.HOURS //小时</span><span class="token comment">//TimeUnit.MINUTES //分钟</span><span class="token comment">//TimeUnit.SECONDS //秒</span><span class="token comment">//TimeUnit.MILLISECONDS //毫秒</span><span class="token comment">//TimeUnit.NANOSECONDS //毫微秒</span><span class="token comment">//TimeUnit.MICROSECONDS //微秒</span><span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">,</span><span class="token keyword">long</span> delay<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> callable<span class="token punctuation">,</span><span class="token keyword">long</span> delay<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 参数一： 实现Runnable接口的方法</span><span class="token comment">// 参数二： 初始时间</span><span class="token comment">// 参数三： 间隔时间</span><span class="token comment">// 参数四： 时间粒度 </span><span class="token comment">// 创建并执行一个周期性动作，该动作首先在给定的初始延迟后启用，然后在给定的时间段内启用；</span><span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">,</span><span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span><span class="token keyword">long</span> period<span class="token punctuation">,</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 与上面不同的是  这个方法是在上一次线程执行完成之后的固定时间执行</span><span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">,</span><span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span><span class="token keyword">long</span> delay<span class="token punctuation">,</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>scheduleWithFixedDelay</strong></p><p>初始五秒 睡着五秒  之后等上一次线程执行完成之后在执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">ScheduledExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行之前"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           executorService<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>               <span class="token keyword">try</span> <span class="token punctuation">{</span>                   <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span>  <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/cRnFBz2j8Ssx9Wb.png" alt="image-20220928172452741"></p><p><strong>scheduleAtFixedRate</strong></p><p>初始五秒，睡两秒，三秒执行一次</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ScheduledExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行之前"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span>  <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/XZPIkCiR8KzJFTp.png" alt="image-20220928172711429"></p><p>可以看见  并不影响。问： 如果沉睡五秒会是什么结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ScheduledExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行之前"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span>  <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/BouYyFinaHSM6ZC.png" alt="image-20220928172841454"></p><p>可以看到结果变成了五秒执行一次。</p><h4 id="5-SingleThreadScheduledExecutor"><a href="#5-SingleThreadScheduledExecutor" class="headerlink" title="(5) SingleThreadScheduledExecutor"></a>(5) SingleThreadScheduledExecutor</h4><p>创建一个单线程的可以执行延迟任务的线程池，此线程池可以看作是 ScheduledThreadPool 的单线程池版本。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ScheduledExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行之前"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span>  <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/fSYOBjbC6F2NoDv.png" alt="image-20220928173143143"></p><p>其实就是<code>ScheduledThreadPool</code>线程的单线程版本</p><h4 id="6-newWorkStealingPool"><a href="#6-newWorkStealingPool" class="headerlink" title="(6) newWorkStealingPool"></a>(6) newWorkStealingPool</h4><p>创建一个抢占式执行的线程池（任务执行顺序不确定），此方法是 JDK 1.8 版本新增的，因此只有在 JDK 1.8 以上的程序中才能使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">"被执行"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 确保线程都执行完毕</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>executorService<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/tecZmdjMBUwoV8A.png" alt="image-20220928174113861"></p><h4 id="7-ThreadPoolExecutor"><a href="#7-ThreadPoolExecutor" class="headerlink" title="(7) ThreadPoolExecutor"></a>(7) ThreadPoolExecutor</h4><p><strong>ThreadPoolExecutor 是最原始、也是最推荐的手动创建线程池的方式</strong>，它在创建时最多提供 7 个参数可供设置。</p><p><img src="https://s2.loli.net/2023/04/17/qz3JYnvwWSocu86.png" alt="image-20220928174401599"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"嘻嘻嘻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方对参数解释：</p><ul><li><p>corePoolSize–池中要保留的线程数，即使它们处于空闲状态，除非设置了allowCoreThreadTimeOut</p></li><li><p>maximumPoolSize–池中允许的最大线程数</p></li><li><p>keepAliveTime–当线程数大于核心时，这是多余空闲线程在终止前等待新任务的最长时间。</p></li><li><p>unit–keepAliveTime参数的时间单位</p></li><li><p>workQueue–用于在执行任务之前保留任务的队列。此队列将仅包含execute方法提交的Runnable任务。</p></li><li><p>threadFactory–执行器创建新线程时使用的工厂</p></li><li><p>handler–由于达到线程边界和队列容量而阻止执行时要使用的处理程序</p></li></ul><pre class="line-numbers language-none"><code class="language-none">corePoolSize : 核心线程数定义了最小可以同时运行的线程数量。maximumPoolSize : 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。workQueue: 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。keepAliveTime:当线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；unit : keepAliveTime 参数的时间单位。threadFactory :executor 创建新线程的时候会用到。handler :饱和策略。关于饱和策略下面单独介绍一<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>阿里巴巴《Java开发手册》是这样规定的：</p><p>【强制要求】<strong>线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</strong></p><h3 id="4-ThreadPoolExecutor-饱和策略定义"><a href="#4-ThreadPoolExecutor-饱和策略定义" class="headerlink" title="4. ThreadPoolExecutor 饱和策略定义:"></a>4. <strong><code>ThreadPoolExecutor</code> 饱和策略定义:</strong></h3><p>如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，<code>ThreadPoolTaskExecutor</code> 定义一些策略:</p><ul><li><strong><code>ThreadPoolExecutor.AbortPolicy</code>：</strong> 抛出 <code>RejectedExecutionException</code>来拒绝新任务的处理。</li><li><strong><code>ThreadPoolExecutor.CallerRunsPolicy</code>：</strong> 调用执行自己的线程运行任务，也就是直接在调用<code>execute</code>方法的线程中运行(<code>run</code>)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。</li><li><strong><code>ThreadPoolExecutor.DiscardPolicy</code>：</strong> 不处理新任务，直接丢弃掉。</li><li><strong><code>ThreadPoolExecutor.DiscardOldestPolicy</code>：</strong> 此策略将丢弃最早的未处理的任务请求。</li></ul><p>也就是说：</p><p>Spring 通过 <code>ThreadPoolTaskExecutor</code> 或者我们直接通过 <code>ThreadPoolExecutor</code> 的构造函数创建线程池的时候，当我们不指定 <code>RejectedExecutionHandler</code> 饱和策略的话来配置线程池的时候默认使用的是 <code>ThreadPoolExecutor.AbortPolicy</code>。在默认情况下，<code>ThreadPoolExecutor</code> 将抛出 <code>RejectedExecutionException</code> 来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。 对于可伸缩的应用程序，建议使用 <code>ThreadPoolExecutor.CallerRunsPolicy</code>。当最大池被填满时，此策略为我们提供可伸缩队列。</p><h2 id="十二-线程安全"><a href="#十二-线程安全" class="headerlink" title="十二. 线程安全"></a>十二. 线程安全</h2><p>提到多线程，那肯定要说道线程安全。</p><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>线程安全是指在多线程情况下，对某一共享资源对其操作，可能会出现与预期不符合的结果。</p><h3 id="2-预防"><a href="#2-预防" class="headerlink" title="2. 预防"></a>2. 预防</h3><h4 id="（1）互斥同步锁"><a href="#（1）互斥同步锁" class="headerlink" title="（1）互斥同步锁"></a>（1）互斥同步锁</h4><h5 id="synchronized关键字加锁"><a href="#synchronized关键字加锁" class="headerlink" title="synchronized关键字加锁"></a><strong>synchronized关键字加锁</strong></h5><p>jdk1.6之后，synchronized锁有四种状态</p><ol><li>原本是“无锁”状态</li><li>一个线程加锁，将线程id写入对象头markwork，升级为“偏向锁”</li><li>多个线程cas加锁，轻量竞争，升级为“轻量级锁”</li><li>cas自旋10次（jdk参数-XX:BiasedLockingStartupDelay=10可调）不成功（锁膨胀），重度竞争，升级为”重量级锁“</li></ol><h5 id="lock锁"><a href="#lock锁" class="headerlink" title="lock锁"></a><strong>lock锁</strong></h5><p>lock是一个接口，主要继承lock的有以下几个</p><p><strong>ReentrantLock</strong><br>        重入锁也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。避免死锁问题的,synchronized也可重入。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/17/DZKunwyXi93paLO.png" alt="image-20220929112740814"></p><p><strong>ReentrantReadWriteLock</strong><br>        读写锁，可以分别获取读锁或写锁。也就是说将数据的读写操作分开，分成2个锁来分配给线程，从而使得多个线程可以同时进行读操作。读锁使用共享模式；写锁使用独占模式；读锁可以在没有写锁的时候被多个线程同时持有，写锁是独占的。当有读锁时，写锁就不能获得；而当有写锁时，除了获得写锁的这个线程可以获得读锁外，其他线程不能获得读锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取写锁。</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取读锁。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>#### （2）非阻塞同步</code></pre><p>非阻塞同步的意思是多个线程在竞争相同的数据时候不会发生阻塞，从而能够在更加细粒度的维度上进行协调，从而极大的减少线程调度的开销，从而提升效率。非阻塞算法不存在锁的机制也就不存在死锁的问题。</p><p>通俗点就是我们常说的乐观锁</p><h5 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h5><p>实现乐观锁的一个操作位CAS（compare and swap（比较与替换）</p><p>CAS实际是普遍处理器都支持的一条指令，这条指令通过判断当前内存值V、旧的预期值A、即将更新的值B是否相等来对比并设置新值，如果相等则变量没有被其他线程更改，就把B值赋予V；如果不相等则做自旋操作。从而实现变量的<strong>原子性</strong>。</p><p>JDK提供的原子操作类就是基于CAS来实现原子性，比如：<strong>AtomicInteger、AtomicIntegerArray、AtomicDouble、AtomicBoolean等</strong></p><h5 id="CAS问题"><a href="#CAS问题" class="headerlink" title="CAS问题"></a>CAS问题</h5><p><strong>ABA问题</strong></p><p>个线程把变量从A-&gt;B再变成A,这时另一个线程执行CAS时会认为这个变量没有被修改过还是原来的A，这就是造成了ABA问题。</p><p>针对ABA的问题，JDK也提供了<strong>AtomicStampedReference、AtomicMarkableReference</strong>通过版本号、标记符来解决ABA问题</p><p><strong>自旋问题</strong></p><p>就是如果有很多线程，cas()方法的while循环会一直执行，如果长时间的执行就会造成资源的浪费。</p><h2 id="十三-AQS"><a href="#十三-AQS" class="headerlink" title="十三. AQS"></a>十三. AQS</h2><h3 id="1-概念-2"><a href="#1-概念-2" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>AQS 是一个用来构建锁和同步器的框架，使用 AQS 能简单且高效地构造出大量应用广泛的同步器，比如我们提到的 <code>ReentrantLock</code>，<code>Semaphore</code>，其他的诸如 <code>ReentrantReadWriteLock</code>，<code>SynchronousQueue</code>，<code>FutureTask</code> 等等皆是基于 AQS 的。当然，我们自己也能利用 AQS 非常轻松容易地构造出符合我们自己需求的同步器。</p><h3 id="2-核心思想"><a href="#2-核心思想" class="headerlink" title="2. 核心思想"></a>2. 核心思想</h3><p>AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</p><p><strong>AQS 定义两种资源共享方式</strong></p><ul><li><p>Exclusive（独占）：只有一个线程能执行，如<code>ReentrantLock</code></p><p>。又可分为公平锁和非公平锁：</p><ul><li>公平锁：按照线程在队列中的排队顺序，先到者先拿到锁</li><li>非公平锁：当线程要获取锁时，无视队列顺序直接去抢锁，谁抢到就是谁的</li></ul></li><li><p>Share（共享）：多个线程可同时执行 如<code>CountDownLatch</code>、<code>Semaphore</code>、 <code>CyclicBarrier</code>、<code>ReadWriteLock</code></p></li></ul><h3 id="3-AQS组件"><a href="#3-AQS组件" class="headerlink" title="3. AQS组件"></a>3. AQS组件</h3><ul><li><strong><code>Semaphore</code>(信号量)-允许多个线程同时访问：</strong> <code>synchronized</code> 和 <code>ReentrantLock</code> 都是一次只允许一个线程访问某个资源，<code>Semaphore</code>(信号量)可以指定多个线程同时访问某个资源。</li><li><strong><code>CountDownLatch </code>（倒计时器）：</strong> <code>CountDownLatch</code> 是一个同步工具类，用来协调多个线程之间的同步。这个工具通常用来控制线程等待，它可以让某一个线程等待直到倒计时结束，再开始执行。</li><li><strong><code>CyclicBarrier</code>(循环栅栏)：</strong> <code>CyclicBarrier</code> 和 <code>CountDownLatch</code> 非常类似，它也可以实现线程间的技术等待，但是它的功能比 <code>CountDownLatch</code> 更加复杂和强大。主要应用场景和 <code>CountDownLatch</code> 类似。<code>CyclicBarrier</code> 的字面意思是可循环使用（<code>Cyclic</code>）的屏障（<code>Barrier</code>）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。<code>CyclicBarrier</code> 默认的构造方法是 <code>CyclicBarrier(int parties)</code>，其参数表示屏障拦截的线程数量，每个线程调用 <code>await()</code> 方法告诉 <code>CyclicBarrier</code> 我已经到达了屏障，然后当前线程被阻塞。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树篇</title>
      <link href="/2022/07/04/2022-07-04-shu-pian/"/>
      <url>/2022/07/04/2022-07-04-shu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="一-概念"><a href="#一-概念" class="headerlink" title="一. 概念"></a>一. 概念</h1><p>树就是一种类似现实生活中的树的数据结构（倒置的树），常见的树有二叉树与多叉树</p><p><img src="https://s2.loli.net/2022/07/07/LipB86jJScyqIX9.png"></p><p>如上图所示，通过上面这张图说明一下树中的常用概念：</p><ul><li><strong>节点</strong> ：树中的每个元素都可以统称为节点。</li><li><strong>根节点</strong> ：顶层节点或者说没有父节点的节点。上图中 A 节点就是根节点。</li><li><strong>父节点</strong> ：若一个节点含有子节点，则这个节点称为其子节点的父节点。上图中的 B 节点是 D 节点、E 节点的父节点。</li><li><strong>子节点</strong> ：一个节点含有的子树的根节点称为该节点的子节点。上图中 D 节点、E 节点是 B 节点的子节点。</li><li><strong>兄弟节点</strong> ：具有相同父节点的节点互称为兄弟节点。上图中 D 节点、E 节点的共同父节点是 B 节点，故 D 和 E 为兄弟节点。</li><li><strong>叶子节点</strong> ：没有子节点的节点。上图中的 D、F、H、I 都是叶子节点。</li><li><strong>节点的高度</strong> ：该节点到叶子节点的最长路径所包含的边数。</li><li><strong>节点的深度</strong> ：根节点到该节点的路径所包含的边数</li><li><strong>节点的层数</strong> ：节点的深度+1。</li><li><strong>树的高度</strong> ：根节点的高度。</li></ul><h1 id="二-二叉树"><a href="#二-二叉树" class="headerlink" title="二.  二叉树"></a>二.  二叉树</h1><p><strong>二叉树</strong>（Binary tree）是每个节点最多只有两个分支（即不存在分支度大于 2 的节点）的树结构。</p><p><strong>二叉树</strong> 的分支通常被称作“<strong>左子树</strong>”或“<strong>右子树</strong>”。并且，<strong>二叉树</strong> 的分支具有左右次序，不能随意颠倒。</p><p>常见的二叉树有： <strong>满二叉树、完全二叉树、平衡二叉树</strong></p><h2 id="2-1-二叉树存储"><a href="#2-1-二叉树存储" class="headerlink" title="2.1  二叉树存储"></a>2.1  二叉树存储</h2><p>二叉树的存储主要分为 <strong>链式存储</strong> 和 <strong>顺序存储</strong></p><h3 id="2-1-1-链式存储"><a href="#2-1-1-链式存储" class="headerlink" title="2.1.1 链式存储"></a>2.1.1 链式存储</h3><p>和链表类似，二叉树的链式存储依靠指针将各个节点串联起来，不需要连续的存储空间。</p><p>每个节点包括三个属性：</p><ul><li>数据 data。data 不一定是单一的数据，根据不同情况，可以是多个具有不同类型的数据。</li><li>左节点指针 left</li><li>右节点指针 right。</li></ul><p>可是 JAVA 没有指针啊！那就直接引用对象呗</p><p><img src="https://s2.loli.net/2022/07/07/mEaNu8eM6hTFoK2.png"></p><h3 id="2-1-2-顺序存储"><a href="#2-1-2-顺序存储" class="headerlink" title="2.1.2 顺序存储"></a>2.1.2 顺序存储</h3><p>顺序存储就是利用数组进行存储，数组中的每一个位置仅存储节点的data，不存储左右子节点的指针，子节点的索引通过数组下标完成。根节点的序号为1，对于每一个节点Node，假设他存储的数组中下表为i的位置，那么它的左子节点就存储在2i的位置，它的右子节点存储在下标为2i+1的位置。</p><p>一棵完全二叉树的数组顺序存储如下图：</p><p><img src="https://s2.loli.net/2022/07/07/4ALobCeM3X7NKEi.png"></p><p>普通二叉树顺序存储如图：</p><p><img src="https://s2.loli.net/2022/07/07/felP8uUyFOiBHvj.png"></p><p>可以看到，如果我们要存储的二叉树不是完全二叉树，在数组中就会出现空隙，导致内存利用率降低</p><h2 id="2-2-二叉树遍历"><a href="#2-2-二叉树遍历" class="headerlink" title="2.2 二叉树遍历"></a>2.2 二叉树遍历</h2><h3 id="2-2-1-先序遍历"><a href="#2-2-1-先序遍历" class="headerlink" title="2.2.1 先序遍历"></a>2.2.1 先序遍历</h3><p>二叉树的先序遍历，就是先输出根结点，再遍历左子树，最后遍历右子树，遍历左子树和右子树的时候，同样遵循先序遍历的规则，也就是说，我们可以递归实现先序遍历。</p><p><img src="https://s2.loli.net/2022/07/07/3PkS2Y9sftInJ65.png"></p><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2-中序遍历"><a href="#2-2-2-中序遍历" class="headerlink" title="2.2.2 中序遍历"></a>2.2.2 中序遍历</h3><p>二叉树的中序遍历，就是先递归中序遍历左子树，再输出根结点的值，再递归中序遍历右子树，大家可以想象成一巴掌把树压扁，父结点被拍到了左子节点和右子节点的中间.</p><p><img src="https://s2.loli.net/2022/07/07/rTQLbEFi7wugGX5.png"></p><p>一巴掌拍下来：</p><p><img src="https://s2.loli.net/2022/07/07/HGxmzreJDXK63uw.png"></p><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-3-后序遍历"><a href="#2-2-3-后序遍历" class="headerlink" title="2.2.3 后序遍历"></a>2.2.3 后序遍历</h3><p>二叉树的后序遍历，就是先递归后序遍历左子树，再递归后序遍历右子树，最后输出根结点的值</p><p><img src="https://s2.loli.net/2022/07/07/ebzh2o7HU8sf6YB.png"></p><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-二叉树分类"><a href="#2-3-二叉树分类" class="headerlink" title="2.3 二叉树分类"></a>2.3 二叉树分类</h2><h3 id="2-3-1-满二叉树"><a href="#2-3-1-满二叉树" class="headerlink" title="2.3.1  满二叉树"></a>2.3.1  满二叉树</h3><p>一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是 <strong>满二叉树</strong>。</p><p><img src="https://s2.loli.net/2022/07/07/R5liTq1pwXVZg2z.png"></p><h3 id="2-3-2-完全二叉树"><a href="#2-3-2-完全二叉树" class="headerlink" title="2.3.2 完全二叉树"></a>2.3.2 完全二叉树</h3><p>除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则这个二叉树就是 <strong>完全二叉树</strong> 。</p><p><img src="https://s2.loli.net/2022/07/07/6ElTAQfJzjRkmCB.png"></p><h3 id="2-3-3-平衡二叉树"><a href="#2-3-3-平衡二叉树" class="headerlink" title="2.3.3 平衡二叉树"></a>2.3.3 平衡二叉树</h3><p><strong>平衡二叉树</strong> 是一棵二叉排序树，且具有以下性质：</p><ol><li>可以是一棵空树</li><li>如果不是空树，它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。</li></ol><p>平衡二叉树的常用实现方法有 <strong>红黑树</strong>、<strong>AVL 树</strong>、<strong>替罪羊树</strong>、<strong>加权平衡树</strong>、<strong>伸展树</strong> 等。</p><p>为什么要有平衡二叉树？</p><p>来看一个图</p><p><img src="https://s2.loli.net/2022/07/07/YJRWfQPzxjoUtua.png"></p><p>普通的二叉树会出现这种情况，它还是一颗树，但是结构已经算链表了。我们管它叫 <strong>斜树</strong>。</p><p>二叉树相比于链表，由于父子节点以及兄弟节点之间往往具有某种特殊的关系，这种关系使得我们在树中对数据进行<strong>搜索</strong>和<strong>修改</strong>时，相对于链表更加快捷便利。</p><p>但是，如果二叉树退化为一个链表了，那么那么树所具有的优秀性质就难以表现出来，效率也会大打折，为了避免这样的情况，我们希望每个做 “家长”（父结点） 的，都 <strong>一碗水端平</strong>，分给左儿子和分给右儿子的尽可能一样多，相差最多不超过一层，如下图所示：</p><p><img src="https://s2.loli.net/2022/07/07/y2HYeK31b4VAFoa.png"></p><h4 id="1-AVL树"><a href="#1-AVL树" class="headerlink" title="1. AVL树"></a>1. AVL树</h4><h4 id="2-红黑树"><a href="#2-红黑树" class="headerlink" title="2. 红黑树"></a>2. 红黑树</h4><p>红黑树是一个自平衡二叉查找树（也叫作不完全平衡二叉查找树）</p><h4 id="（1）红黑树需要遵循的规则"><a href="#（1）红黑树需要遵循的规则" class="headerlink" title="（1）红黑树需要遵循的规则"></a>（1）红黑树需要遵循的规则</h4><ol><li><strong>节点分为红色或者黑色。</strong></li><li><strong>根节点必为黑色。</strong></li><li><strong>叶子节点都为黑色，且为 null。</strong></li><li><strong>连接红色节点的两个子节点都为黑色（红黑树不会出现相邻的红色节点）。</strong></li><li><strong>从任意节点出发，到其每个叶子节点的路径中包含相同数量的黑色节点。</strong></li><li><strong>新加入到红黑树的节点为红色节点。</strong></li></ol><p><img src="https://s2.loli.net/2022/07/07/7ylidDmKeSGowLz.png"></p><p>后续的颜色变化与旋转都是根据这些规则来，这些规则延伸出来的意思</p><ol><li><strong>从根节点到叶子结点的最长路径不大于最短路径的2倍</strong></li></ol><p>根节点到每个叶子节点的黑色节点数量是一样的，那么纯由黑色节点组成的路径就是最短路径。</p><p>根据规则 4 和规则 3，若有红色节点，则必然有一个连接的黑色节点，当红色节点和黑色节点数量相同时，就是最长路径，也就是黑色节点（或红色节点）*2。</p><ol start="2"><li><strong>为什么说新加入到红黑树中的节点为红色节点</strong></li></ol><p>在我们对红黑树进项操作的时候，它本身就处于平衡状态，也就是规则5。这样我们进行插入的时候，新加入的节点如果是黑色节点，必然会破坏平衡，如果是红色节点，就有可能不会破坏平衡</p><h4 id="（2）-维持平衡的方式"><a href="#（2）-维持平衡的方式" class="headerlink" title="（2） 维持平衡的方式"></a>（2） 维持平衡的方式</h4><p>维持平衡主要通过两种方式【变色】和【旋转】，【旋转】又分【左旋】和【右旋】，两种方式可相互结合。</p><p>触发条件：当不满足上述规则时（感觉像废话）</p><p><strong>左旋：</strong>逆时针旋转两个节点，让一个节点被其右子节点取代，而该节点成为右子节点的左子节点。</p><p><strong>左旋操作步骤如下：</strong>首先断开节点 PL 与右子节点 G 的关系，同时将其右子节点的引用指向节点 C2；然后断开节点 G 与左子节点 C2 的关系，同时将 G 的左子节点的应用指向节点 PL。</p><p><img src="https://s2.loli.net/2022/07/07/NZzMemjUVihEsdX.png"></p><p><strong>右旋：</strong>顺时针旋转两个节点，让一个节点被其左子节点取代，而该节点成为左子节点的右子节点。</p><p><strong>右旋操作步骤如下：</strong>首先断开节点 G 与左子节点 PL 的关系，同时将其左子节点的引用指向节点 C2；然后断开节点 PL 与右子节点 C2 的关系，同时将 PL 的右子节点的应用指向节点 G。</p><p><img src="https://s2.loli.net/2022/07/07/bQviAfs4YSMWpju.png"></p><p><img src="https://s2.loli.net/2022/07/07/Z9ebjNPCvQkqVdm.png" alt="image-20220707163005805"></p><p><strong>红黑树删除总结</strong></p><p>红黑树删除的情况比较多，但也就存在以下情况：</p><ul><li><p>删除的是根节点，则直接将根节点置为 null。</p></li><li><p>待删除节点的左右子节点都为 null，删除时将该节点置为 null。</p></li><li><p>待删除节点的左右子节点有一个有值，则用有值的节点替换该节点即可。</p></li><li><p>待删除节点的左右子节点都不为 null，则找前驱或者后继，将前驱或者后继的值复制到该节点中，然后删除前驱或者后继。(</p><p><strong>前驱：</strong>左子树中值最大的节点（可得出其最多只有一个非 null 子节点，可能都为 null）。</p><p><strong>后继：</strong>右子树中值最小的节点（可得出其最多只有一个非 null 子节点，可能都为 null）。</p><p>)</p></li><li><p>节点删除后可能会造成红黑树的不平衡，这时我们需通过【变色】+【旋转】的方式来调整，使之平衡，</p></li></ul><h1 id="三-B树、B-树"><a href="#三-B树、B-树" class="headerlink" title="三. B树、B+树"></a>三. B树、B+树</h1><p>B树是一种自平衡树，是AVL树的一般化，它维护有序数据并允许以对数时间进行搜索，顺序访问，插入和删除。与AVL树不同的是，B树非常适合读取和写入相对较大的数据块（如光盘）的存储系统。它通常用于数据库和文件系统。</p><h2 id="1-B树的定义"><a href="#1-B树的定义" class="headerlink" title="1. B树的定义"></a>1. B树的定义</h2><p>一颗m阶的B树满足如下条件：</p><ul><li>每个节点最多只有m个子节点。</li><li>除根节点外，每个非叶子节点具有至少有 m/2（向下取整）个子节点。</li><li>非叶子节点的根节点至少有两个子节点。</li><li>有k颗子树的非叶节点有k-1个键，键按照递增顺序排列。</li><li>叶节点都在同一层中。</li></ul><p><img src="https://s2.loli.net/2022/07/07/fMRNWCIQ8zt1Di3.png"></p><p><strong>什么是B树的阶 ？</strong><br>B树中一个节点的子节点数目的最大值，用m表示，假如最大值为4，则为4阶，如图，所有节点中，节点[13,16,19]拥有的子节点数目最多，四个子节点（灰色节点），所以可以定义上面的图片为4阶B树。</p><h2 id="2-B树出现的意义"><a href="#2-B树出现的意义" class="headerlink" title="2. B树出现的意义"></a>2. B树出现的意义</h2><p>B树的出现是为了弥补不同的存储级别之间的访问速度上的巨大差异，实现高效的 I/O。平衡二叉树的查找效率是非常高的，并可以通过降低树的深度来提高查找的效率。但是当数据量非常大，树的存储的元素数量是有限的，这样会导致二叉查找树结构由于树的深度过大而造成磁盘I/O读写过于频繁，进而导致查询效率低下。另外数据量过大会导致内存空间不够容纳平衡二叉树所有结点的情况。B树是解决这个问题的很好的结构。</p><h2 id="3-B树检索"><a href="#3-B树检索" class="headerlink" title="3. B树检索"></a>3. B树检索</h2><p>根据要查找的关键码key，在根节点的关键码集合中进行顺序或二分法检索，若key = ki，则检索成功；<br>否则，key一定在某 ki 和 ki+1 之间，用一个指针在所指节点继续查找，重复上述检索过程，直到检索成功；或指针为空，则检索失败。<br>整个检索过程中访外次数与B树的高度成正比。</p><h2 id="4-B-树定义"><a href="#4-B-树定义" class="headerlink" title="4. B+ 树定义"></a>4. B+ 树定义</h2><p>一颗m阶的B+树满足如下条件：</p><ul><li>每个节点最多只有m个子节点。</li><li>除根节点外，每个非叶子节点具有至少有 m/2（向下取整）个子节点。</li><li>非叶子节点的根节点至少有两个子节点。</li><li>有k颗子树的非叶节点有k个键，键按照递增顺序排列。</li><li>叶节点都在同一层中。</li></ul><p><img src="https://s2.loli.net/2022/07/07/FS5hrsi2qKmykIj.png"></p><h2 id="5-B-树与B树的差异"><a href="#5-B-树与B树的差异" class="headerlink" title="5. B+树与B树的差异"></a>5. B+树与B树的差异</h2><p><img src="https://s2.loli.net/2022/07/07/I9OkJzNroRmMbcA.png" alt="image-20220707175011546"></p><p>(1）B+树的磁盘读写代价更低</p><p>B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了；</p><p>(2）B+树查询效率更加稳定</p><p>由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当；</p><p>(3）B+树便于范围查询（最重要的原因，范围查找是数据库的常态）</p><p>B树在提高了IO性能的同时并没有解决元素遍历的我效率低下的问题，正是为了解决这个问题，B+树应用而生。B+树只需要去遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作或者说效率太低。</p><p>补充：B树的范围查找用的是中序遍历，而B+树用的是在链表上遍历。</p><h1 id="四-磁盘IO与预读"><a href="#四-磁盘IO与预读" class="headerlink" title="四. 磁盘IO与预读"></a>四. 磁盘IO与预读</h1><p>计算机存储设备一般分为两种：内存储器(main memory)和外存储器(external memory)。 计算机的存储结构见：虚拟内存(Virtual Memory)——1.1 DRAM 缓存的组织结构，图。</p><p>内存储器为内存，内存存取速度快，但容量小，价格昂贵，而且不能长期保存数据(在不通电情况下数据会消失)。</p><p>外存储器即为磁盘读取，磁盘读取数据靠的是机械运动，每次读取数据花费的时间可以分为寻道时间、旋转延迟、传输时间三个部分，寻道时间指的是磁臂移动到指定磁道所需要的时间，主流磁盘一般在5ms以下；旋转延迟就是我们经常听说的磁盘转速，比如一个磁盘7200转，表示每分钟能转7200次，也就是说1秒钟能转120次，旋转延迟就是1/120/2 = 4.17ms；传输时间指的是从磁盘读出或将数据写入磁盘的时间，一般在零点几毫秒，相对于前两个时间可以忽略不计。那么访问一次磁盘的时间，即一次磁盘IO的时间约等于5+4.17 = 9ms左右，听起来还挺不错的，但要知道一台500 -MIPS的机器每秒可以执行5亿条指令，因为指令依靠的是电的性质，换句话说执行一次IO的时间可以执行40万条指令，数据库动辄十万百万乃至千万级数据，每次9毫秒的时间，显然是个灾难。</p><p><strong>事实1 ： 不同容量的存储器，访问速度差异悬殊。</strong></p><p>磁盘(ms级别) &lt;&lt; 内存(ns级别)， 100000倍<br>若内存访问需要1s，则一次外存访问需要一天<br>为了避免1次外存访问，宁愿访问内存100次…所以将最常用的数据存储在最快的内存储器中</p><p><strong>事实2 ： 从磁盘中读 1 B，与读写 1KB 的时间成本几乎一样</strong></p><p>从以上数据中可以总结出一个道理，索引查询的数据主要受限于硬盘的I/O速度，查询I/O次数越少，速度越快，所以B树的结构才应需求而生；B树的每个节点的元素可以视为一次I/O读取，树的高度表示最多的I/O次数，在相同数量的总元素个数下，每个节点的元素个数越多，高度越低，查询所需的I/O次数越少；假设，一次硬盘一次I/O数据为8K，索引用int(4字节)类型数据建立，理论上一个节点最多可以为2000个元素，200020002000=8000000000，80亿条的数据只需3次I/O（理论值），可想而知，B树做为索引的查询效率有多高；<br>另外也可以看出同样的总元素个数，查询效率和树的高度密切相关</p><p>要是不懂的话，<a href="https://mp.weixin.qq.com/s?__biz=Mzg5NDY2MDk4Mw==&amp;mid=2247488133&amp;idx=1&amp;sn=169533ab3946f2f018478d6d2abf532a&amp;scene=21#wechat_redirect">这里有合理的解释</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GC篇</title>
      <link href="/2022/06/29/2022-06-29-gc-pian/"/>
      <url>/2022/06/29/2022-06-29-gc-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="一-GC常见问题"><a href="#一-GC常见问题" class="headerlink" title="一. GC常见问题"></a>一. GC常见问题</h1><ul><li>如何判断对象是否死亡（两种方法）。</li><li>简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。</li><li>如何判断一个常量是废弃常量</li><li>如何判断一个类是无用的类</li><li>垃圾收集有哪些算法，各自的特点？</li><li>HotSpot 为什么要分为新生代和老年代？</li><li>常见的垃圾回收器有哪些？</li><li>介绍一下 CMS,G1 收集器。</li><li>Minor Gc 和 Full GC 有什么不同呢？</li></ul><h1 id="二-GC概念"><a href="#二-GC概念" class="headerlink" title="二. GC概念"></a>二. GC概念</h1><p>GC就是我们成说的垃圾回收，这是针对于java内存一块的。Java 堆是垃圾收集器管理的主要区域，因此也被称作<strong>GC 堆</strong>，由于现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代：再细致一点有：Eden 空间、From Survivor、To Survivor 空间等。<strong>进一步划分的目的是更好地回收内存，或者更快地分配内存。</strong></p><p><img src="https://s2.loli.net/2022/07/04/sexSOzQFDuTIY1q.png"></p><p>上图所示的Eden区、From Survivor0(“From”)区、To Survivor1(“To”)区都属于新生代、Old Memory区属于老年代。</p><p>大部分情况，对象都首先谁在Eden区分配，在一次新生代垃圾回收后，如果对象还存活，则会进入s0或者s1，并且对象的年龄还会加1（Eden区-&gt;Survivor区后对象的初始年龄变为1），当他的年龄增加到一定程度（默认为大于15岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <code>-XX:MaxTenuringThreshold</code> 来设置默认值，这个值会在虚拟机运行过程中进行调整，可以通过<code>-XX:+PrintTenuringDistribution</code>来打印出当次 GC 后的 Threshold。</p><p><strong>注意：</strong>“Hotspot 遍历所有对象时，按照年龄从小到大对其所占用的大小进行累积，当累积的某个年龄大小超过了 survivor 区的一半时，取这个年龄和 MaxTenuringThreshold 中更小的一个值，作为新的晋升年龄阈值”。</p><p>经过这次 GC 后，Eden 区和”From”区已经被清空。这个时候，”From”和”To”会交换他们的角色，也就是新的”To”就是上次 GC 前的“From”，新的”From”就是上次 GC 前的”To”。不管怎样，都会保证名为 To 的 Survivor 区域是空的。Minor GC 会一直重复这样的过程，在这个过程中，有可能当次 Minor GC 后，Survivor 的”From”区域空间不够用，有一些还达不到进入老年代条件的实例放不下，则放不下的部分会提前进入老年代。</p><h2 id="2-1-对象分配"><a href="#2-1-对象分配" class="headerlink" title="2.1 对象分配"></a>2.1 对象分配</h2><p>点击运行配置</p><p><img src="https://s2.loli.net/2022/07/04/2p7DBq9fLyUtuo3.png" alt="image-20220630103044560"></p><p>点击Modify options 选中 add VM options</p><p>添加<code>-XX:+PrintGCDetails</code></p><p><img src="https://s2.loli.net/2022/07/04/lQ3LyJxrOGu2Nm1.png" alt="image-20220630103417340"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GCTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1<span class="token punctuation">,</span> allocation2<span class="token punctuation">;</span>        allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">244000</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">900</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后这个列子点击运行</p><p><img src="https://s2.loli.net/2022/07/04/lW3kpOwzGjMiTRQ.png" alt="image-20220630103849017"></p><p><strong>解释一下：</strong>大多数情况下，对象在新生代中 eden 区分配。当 eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC，但是当虚拟机又发现分配的内存无法存入Survivor 空间，所以只好通过 <strong>分配担保机制</strong> 把新生代的对象提前转移到老年代中去。老年代上的空间足够存放 ，所以不会出现 Full GC。执行 Minor GC 后，后面分配的对象如果能够存在 eden 区的话，还是会在 eden 区分配内存。老年代也存不上，直接报错了<code>java.lang.NegativeArraySizeException</code></p><p><img src="https://s2.loli.net/2022/07/04/wzQEi2BYF1ZKJbd.png" alt="image-20220630104155816"></p><p>即时什么都不做还是会分配到一定的空间</p><h3 id="2-1-1-大对象直接进入老年代"><a href="#2-1-1-大对象直接进入老年代" class="headerlink" title="2.1.1 大对象直接进入老年代"></a>2.1.1 大对象直接进入老年代</h3><p>大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。</p><p><strong>原因：</strong>为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率。</p><h3 id="2-1-2-长期存活的对象将进入老年代"><a href="#2-1-2-长期存活的对象将进入老年代" class="headerlink" title="2.1.2 长期存活的对象将进入老年代"></a>2.1.2 长期存活的对象将进入老年代</h3><p>虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这一点，虚拟机给每个对象一个对象年龄（Age）计数器。</p><p>然后就是上文有提到的晋升老年代的一些条件</p><h3 id="2-1-3-主要进行GC的区域"><a href="#2-1-3-主要进行GC的区域" class="headerlink" title="2.1.3 主要进行GC的区域"></a>2.1.3 主要进行GC的区域</h3><p>针对 HotSpot VM 的实现，它里面的 GC 其实准确分类只有两大种：</p><p>部分收集 (Partial GC)：</p><ul><li>新生代收集（Minor GC / Young GC）：只对新生代进行垃圾收集；</li><li>老年代收集（Major GC / Old GC）：只对老年代进行垃圾收集。需要注意的是 Major GC 在有的语境中也用于指代整堆收集；</li><li>混合收集（Mixed GC）：对整个新生代和部分老年代进行垃圾收集。</li></ul><p>整堆收集 (Full GC)：收集整个 Java 堆和方法区。</p><h3 id="2-1-4-空间分配担保"><a href="#2-1-4-空间分配担保" class="headerlink" title="2.1.4 空间分配担保"></a>2.1.4 空间分配担保</h3><p>空间分配担保是为了确保在 Minor GC 之前老年代本身还有容纳新生代所有对象的剩余空间。</p><p>JDK 6 Update 24 之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行 Minor GC，否则将进行 Full GC。</p><h2 id="2-2-对象死亡"><a href="#2-2-对象死亡" class="headerlink" title="2.2 对象死亡"></a>2.2 对象死亡</h2><p>堆中几乎存放着所有的实例，对堆的垃圾回收低一步就是要判断那些对象已经死亡（即不能再被任何途径使用的对象）</p><h3 id="2-2-1-引用计数法"><a href="#2-2-1-引用计数法" class="headerlink" title="2.2.1 引用计数法"></a>2.2.1 引用计数法</h3><p>给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加1；当引用失效，计数器就减1；任何时候计数器为 0 的对象就是不可能再被使用的。这个算法有个缺陷，<strong>它很难解决对象之间相互循环引用的问题。</strong> </p><p>举个栗子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceCountingGc</span> <span class="token punctuation">{</span>    <span class="token class-name">Object</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ReferenceCountingGc</span> objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ReferenceCountingGc</span> objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>objA<span class="token punctuation">.</span>instance <span class="token operator">=</span> objB<span class="token punctuation">;</span>objB<span class="token punctuation">.</span>instance <span class="token operator">=</span> objA<span class="token punctuation">;</span>objA <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>objB <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了对象 objA 和 objB 相互引用着对方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的引用计数器都不为 0，于是引用计数算法无法通知 GC 回收器回收他们。</p><h3 id="2-2-2-可达性分析算法"><a href="#2-2-2-可达性分析算法" class="headerlink" title="2.2.2 可达性分析算法"></a>2.2.2 可达性分析算法</h3><p>这个算法的基本思想就是通过一系列的称为 <strong>“GC Roots”</strong> 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的，需要被回收。反过来就是可达的对象不会被回收，其他的就会被回收</p><p><strong>哪些对象可以作为 GC Roots 呢？</strong></p><ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li><li>本地方法栈(Native 方法)中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>所有被同步锁持有的对象</li></ul><p><strong>对象可以被回收，就代表一定会被回收吗？</strong></p><p>即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对象死亡，至少要经历两次标记过程；可达性分析法中不可达的对象被第一次标记，被判定为需要被执行回收，被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关联，否则就会被真的回收。</p><h3 id="2-2-3-引用"><a href="#2-2-3-引用" class="headerlink" title="2.2.3 引用"></a>2.2.3 引用</h3><p>无论是通过引用计数法判断对象引用数量，还是通过可达性分析法判断对象的引用链是否可达，判定对象的存活都与“引用”有关。</p><p><img src="https://s2.loli.net/2022/07/04/HUuFsSXLfpMjkGW.png" alt="image-20220630140121499"></p><h4 id="1-强引用"><a href="#1-强引用" class="headerlink" title="1. 强引用"></a>1. 强引用</h4><p><strong>强引用</strong>是最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“Object obj=new Object()”这种引用关系。</p><p><strong>强引用有引用变量指向时永远不会被垃圾回收，JVM宁愿抛出OutOfMemory错误也不会回收这种对象。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testStrongReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-软引用（SoftReference）"><a href="#2-软引用（SoftReference）" class="headerlink" title="2. 软引用（SoftReference）"></a>2. 软引用（SoftReference）</h4><p>如果一个对象具有软引用，<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&amp;spm=1001.2101.3001.7020">内存</a>空间足够，垃圾回收器就不会回收它；</p><p>如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。</p><p>软引用可用来实现内存敏感的高速缓存,比如网页缓存、图片缓存等。使用软引用能防止内存泄露，增强程序的健壮性。<br><code>SoftReference</code>的特点是它的一个实例保存对一个Java对象的软引用， 该软引用的存在不妨碍垃圾收集线程对该Java对象的回收。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> pen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"penguin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pen<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通知JVM进行内存回收</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pen<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内存足够  不会被回收</p><p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20220630145114212.png" alt="image-20220630145114212"></p><h4 id="3-弱引用（WeakReference）"><a href="#3-弱引用（WeakReference）" class="headerlink" title="3. 弱引用（WeakReference）"></a>3. 弱引用（WeakReference）</h4><p>弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，<strong>被弱引用关联的对象只 能生存到下一次垃圾收集发生为止</strong>。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只 被弱引用关联的对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"penguin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通知JVM进行内存回收</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/04/vqZsrVpnWO4i1d9.png" alt="image-20220630145354030"></p><p><strong>弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中</strong></p><h4 id="4-虚引用（PhantomReference）"><a href="#4-虚引用（PhantomReference）" class="headerlink" title="4.虚引用（PhantomReference）"></a>4.虚引用（PhantomReference）</h4><p>虚引用存在于每一个对象里面，不会对对象的存活造成任何影响，唯一用处就是：能在对象被GC时收到系统通知</p><p> <strong><em>\</em>若某个对象与虚引用关联，那么在任何时候都可能被JVM回收掉。虚引用不能单独使用，必须配合引用队列一起使用。**</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/04/yR74VfvSaP9cjDL.png" alt="image-20220630171255682"></p><h2 id="2-3-废弃常量判断"><a href="#2-3-废弃常量判断" class="headerlink" title="2.3 废弃常量判断"></a>2.3 废弃常量判断</h2><p>运行时常量池主要回收的是废弃的常量。那么，我们如何判断一个常量是废弃常量呢？</p><p><img src="https://s2.loli.net/2022/07/04/4yg5AqaOUQMLE9C.png" alt="image-20220630172027180"></p><p>假如在字符串常量池中存在字符串 “abc”，如果当前没有任何 String 对象引用该字符串常量的话，就说明常量 “abc” 就是废弃常量，如果这时发生内存回收的话而且有必要的话，”abc” 就会被系统清理出常量池了。</p><h2 id="2-4-无用类判断"><a href="#2-4-无用类判断" class="headerlink" title="2.4 无用类判断"></a>2.4 无用类判断</h2><p>方法区主要回收的是无用的类，那么如何判断一个类是无用的类的呢？</p><p><strong>“无用的类”</strong> ：</p><ul><li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li><li>加载该类的 <code>ClassLoader</code> 已经被回收。</li><li>该类对应的 <code>java.lang.Class</code> 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><p>虚拟机可以对满足上述 3 个条件的无用类进行回收，这里说的仅仅是“可以”，而并不是和对象一样不使用了就会必然被回收。</p><h1 id="三-垃圾收集算法"><a href="#三-垃圾收集算法" class="headerlink" title="三. 垃圾收集算法"></a>三. 垃圾收集算法</h1><h2 id="3-1-标记-清除算法"><a href="#3-1-标记-清除算法" class="headerlink" title="3.1 标记-清除算法"></a>3.1 标记-清除算法</h2><p>该算法分为“标记”和“清除”阶段：首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。</p><p><strong>缺陷：</strong></p><ol><li>效率问题</li><li>空间问题（标记清除后会产生大量不连续的碎片）</li></ol><h2 id="3-2-标记-复制算法"><a href="#3-2-标记-复制算法" class="headerlink" title="3.2 标记-复制算法"></a>3.2 标记-复制算法</h2><p>为了解决效率问题，“标记-复制”收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。</p><h2 id="3-3-标记-整理算法"><a href="#3-3-标记-整理算法" class="headerlink" title="3.3 标记-整理算法"></a>3.3 标记-整理算法</h2><p>根据老年代的特点提出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉边界以外的内存。</p><h2 id="3-4-分代收集算法"><a href="#3-4-分代收集算法" class="headerlink" title="3.4 分代收集算法"></a>3.4 分代收集算法</h2><p>当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将 java 堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。</p><p><strong>比如在新生代中，每次收集都会有大量对象死去，所以可以选择”标记-复制“算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。</strong></p><h1 id="四-垃圾收集器"><a href="#四-垃圾收集器" class="headerlink" title="四. 垃圾收集器"></a>四. 垃圾收集器</h1><p>如果说算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。</p><h2 id="4-1-Serial-收集器"><a href="#4-1-Serial-收集器" class="headerlink" title="4.1 Serial 收集器"></a>4.1 Serial 收集器</h2><p>是一个<strong>单线程</strong>收集器，它的 <strong>“单线程”</strong> 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ <strong>“Stop The World”</strong> ），直到它收集结束。</p><p><strong>新生代采用标记-复制算法，老年代采用标记-整理算法。</strong></p><p><strong>优点：</strong></p><p>简单高效（与其他收集器的单线程相比）。Serial 收集器对于运行在 Client 模式下的虚拟机来说是个不错的选择。</p><h2 id="4-2-ParNew-收集器"><a href="#4-2-ParNew-收集器" class="headerlink" title="4.2 ParNew 收集器"></a>4.2 ParNew 收集器</h2><p><strong>Serial</strong>  收集器的<strong>多线程</strong>版本 ，除了使用多线程进行垃圾收集外，其余行为（控制参数、收集算法、回收策略等等）和 Serial 收集器完全一样。</p><p><strong>优点：</strong></p><p>它是许多运行在 Server 模式下的虚拟机的首要选择，除了 Serial 收集器外，只有它能与 CMS 收集器（真正意义上的并发收集器，后面会介绍到）配合工作。</p><h2 id="4-3-Parallel-Scavenge-收集器"><a href="#4-3-Parallel-Scavenge-收集器" class="headerlink" title="4.3 Parallel Scavenge 收集器"></a>4.3 Parallel Scavenge 收集器</h2><p>Parallel Scavenge 收集器也是使用标记-复制算法的<strong>多线程</strong>收集器。Parallel Scavenge 收集器<strong>关注点是吞吐量</strong>（高效率的利用 CPU）。所谓吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值。</p><p>Parallel Scavenge 收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量，如果对于收集器运作不太了解，手工优化存在困难的时候，使用 Parallel Scavenge 收集器配合自适应调节策略，把内存管理优化交给虚拟机去完成也是一个不错的选择。</p><p><strong>新生代采用标记-复制算法，老年代采用标记-整理算法。</strong></p><p><strong>这是 JDK1.8 默认收集器</strong></p><p>JDK1.8 默认使用的是 Parallel Scavenge + Parallel Old，如果指定了-XX:+UseParallelGC 参数，则默认指定了-XX:+UseParallelOldGC，可以使用-XX:-UseParallelOldGC 来禁用该功能</p><h2 id="4-4-Serial-Old-收集器"><a href="#4-4-Serial-Old-收集器" class="headerlink" title="4.4  Serial Old 收集器"></a>4.4  Serial Old 收集器</h2><p><strong>Serial 收集器的老年代版本</strong>，它同样是一个单线程收集器。它主要有两大用途：一种用途是在 JDK1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用，另一种用途是作为 CMS 收集器的后备方案。</p><h2 id="4-5-Parallel-Old-收集器"><a href="#4-5-Parallel-Old-收集器" class="headerlink" title="4.5  Parallel Old 收集器"></a>4.5  Parallel Old 收集器</h2><p><strong>Parallel Scavenge 收集器的老年代版本</strong>。使用多线程和“标记-整理”算法。在注重吞吐量以及 CPU 资源的场合，都可以优先考虑 Parallel Scavenge 收集器和 Parallel Old 收集器。</p><h2 id="4-6-CMS-收集器"><a href="#4-6-CMS-收集器" class="headerlink" title="4.6  CMS  收集器"></a>4.6  CMS  收集器</h2><p><strong>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用</strong></p><p><strong>CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。</strong></p><p>从名字中的<strong>Mark Sweep</strong>这两个词可以看出，CMS 收集器是一种 <strong>“标记-清除”算法</strong>实现的，它的运作过程相比于前面几种垃圾收集器来说更加复杂一些。整个过程分为四个步骤：</p><ul><li><strong>初始标记：</strong> 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；</li><li><strong>并发标记：</strong> 同时开启 GC 和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方。</li><li><strong>重新标记：</strong> 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li><strong>并发清除：</strong> 开启用户线程，同时 GC 线程开始对未标记的区域做清扫。</li></ul><p>主要优点：<strong>并发收集、低停顿</strong>。</p><p>缺点：</p><ul><li><strong>对 CPU 资源敏感；</strong></li><li><strong>无法处理浮动垃圾；</strong></li><li><strong>它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。</strong></li></ul><h2 id="4-7-G1-收集器"><a href="#4-7-G1-收集器" class="headerlink" title="4.7 G1 收集器"></a>4.7 G1 收集器</h2><p><strong>G1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征.</strong></p><p>被视为 JDK1.7 中 HotSpot 虚拟机的一个重要进化特征。它具备以下特点：</p><ul><li><strong>并行与并发</strong>：G1 能充分利用 CPU、多核环境下的硬件优势，使用多个 CPU（CPU 或者 CPU 核心）来缩短 Stop-The-World 停顿时间。部分其他收集器原本需要停顿 Java 线程执行的 GC 动作，G1 收集器仍然可以通过并发的方式让 java 程序继续执行。</li><li><strong>分代收集</strong>：虽然 G1 可以不需要其他收集器配合就能独立管理整个 GC 堆，但是还是保留了分代的概念。</li><li><strong>空间整合</strong>：与 CMS 的“标记-清理”算法不同，G1 从整体来看是基于“标记-整理”算法实现的收集器；从局部上来看是基于“标记-复制”算法实现的。</li><li><strong>可预测的停顿</strong>：这是 G1 相对于 CMS 的另一个大优势，降低停顿时间是 G1 和 CMS 共同的关注点，但 G1 除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为 M 毫秒的时间片段内。</li></ul><p>G1 收集器的运作大致分为以下几个步骤：</p><ul><li><strong>初始标记</strong></li><li><strong>并发标记</strong></li><li><strong>最终标记</strong></li><li><strong>筛选回收</strong></li></ul><p><strong>G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region(这也就是它的名字 Garbage-First 的由来)</strong></p><h2 id="4-8-ZGC-收集器"><a href="#4-8-ZGC-收集器" class="headerlink" title="4.8 ZGC 收集器"></a>4.8 ZGC 收集器</h2><p>与 CMS 中的 ParNew 和 G1 类似，ZGC 也采用标记-复制算法，不过 ZGC 对该算法做了重大改进。</p><p>在 ZGC 中出现 Stop The World 的情况会更少！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM篇</title>
      <link href="/2022/06/28/2022-06-28-jvm-pian/"/>
      <url>/2022/06/28/2022-06-28-jvm-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="一-什么是JVM"><a href="#一-什么是JVM" class="headerlink" title="一.  什么是JVM"></a>一.  什么是JVM</h1><p>jvm是java虚拟机的缩写，它是一个虚构的计算机，是通过在实际的计算机上仿真模拟计算机功能来实现的。jvm屏蔽了具体操作系统平台的相关信息，java程序只需要生成在java虚拟机上运行的字节码（二进制），就可以在多种平台上不加修改的运行。jvm在执行字节码时，实际上最终还是把字节码解释成具体平台上的机器指令执行。</p><h3 id="JVM主要组成部分及其作用"><a href="#JVM主要组成部分及其作用" class="headerlink" title="JVM主要组成部分及其作用"></a><a href="https://so.csdn.net/so/search?q=JVM&amp;spm=1001.2101.3001.7020">JVM</a>主要组成部分及其作用</h3><ul><li><p>Class loader(类加载器)：根据给定的全限定名类名(如：java.lang.Object)来装载class文件到运行时数据区中的方法区；</p></li><li><p>Execution engine（执行引擎）：执行引擎也叫解释器，负责解释命令，交由操作系统执行；</p></li><li><p>Native Interface(本地接口)：与native libraries交互，是其它编程语言交互的接口。</p></li><li><p>Runtime data area(运行时数据区域)：这就是我们常说的JVM的内存，我们所有所写的程序都被加载到这里，之后才开始运行</p></li></ul><p><strong>作用 ：</strong>首先通过编译器把 Java 代码转换成字节码，类加载器（ClassLoader）再把字节码加载到内存中，将其放在运行时数据区（Runtime data area）的方法区内，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能</p><p>JVM<strong>内存区域</strong>分为五个部分,分别是堆,方法区,虚拟机栈,本地方法栈,程序计数器。</p><p><img src="https://s2.loli.net/2022/06/28/upf2q6XoVnER9tN.png"></p><h1 id="二-运行时数据区域"><a href="#二-运行时数据区域" class="headerlink" title="二. 运行时数据区域"></a>二. 运行时数据区域</h1><p>Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。</p><p><img src="https://s2.loli.net/2022/06/28/vO4fBTDAl9tjrXu.png"></p><p><strong>线程私有的：</strong></p><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li></ul><p><strong>线程共享的：</strong></p><ul><li>堆</li><li>方法区</li><li>直接内存 (非运行时数据区的一部分)</li></ul><h2 id="2-1-程序计数器"><a href="#2-1-程序计数器" class="headerlink" title="2.1  程序计数器"></a>2.1  程序计数器</h2><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。</p><p>从上面的介绍中我们知道了程序计数器主要有两个作用：</p><ul><li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li><li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li></ul><p>⚠️ 注意 ：程序计数器是唯一一个不会出现 <code>OutOfMemoryError</code> 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</p><h2 id="2-2-Java-虚拟机栈"><a href="#2-2-Java-虚拟机栈" class="headerlink" title="2.2 Java 虚拟机栈"></a>2.2 Java 虚拟机栈</h2><p>与程序计数器一样，Java 虚拟机栈（后文简称栈）也是线程私有的，它的生命周期和线程相同，随着线程的创建而创建，随着线程的死亡而死亡。</p><p>栈是jvm运行时数据区域的一个核心，除了一些native方法调用是通过本地方发栈实现的，其他所有的java方法调用都是通过栈来实现的，也需要和其他运行时数据区域比如程序计数器配合。</p><p>方法调用数据须要通过栈进行传递，每一次方法调用都会 对应一个对应的栈帧被压入栈中，每一个方法调用结束后，都会有一个栈帧被弹出。</p><p>栈由一个个栈帧组成，而每个栈帧都拥有：</p><ul><li>局部变量</li><li>操作数栈</li><li>动态链接</li><li>方法返回地址</li></ul><p>栈帧都为先入后出的数据结构，只支持入栈和出栈两种操作</p><p> <strong>栈帧随着方法调用而创建，随着方法结束而销毁。无论方法正常完成还是异常完成都算作方法结束。</strong></p><p>简单总结一下程序运行中栈可能会出现两种错误：</p><ul><li><strong><code>StackOverFlowError</code>：</strong> 若栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 <code>StackOverFlowError</code> 错误。</li><li><strong><code>OutOfMemoryError</code>：</strong> 如果栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出<code>OutOfMemoryError</code>异常。</li></ul><p><img src="https://s2.loli.net/2022/06/28/pen168ALIiqx2y7.png"></p><h3 id="2-2-1-局部变量表"><a href="#2-2-1-局部变量表" class="headerlink" title="2.2.1 局部变量表"></a>2.2.1 局部变量表</h3><p>主要存放了编译期间可知的各种数据类型（boolean，byte，char，short，int，float，long，double）、对象引用（reference（通俗点就是地址）类型，它不同于对象本身，可能是一个指向对象起止地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）</p><p><img src="https://s2.loli.net/2022/06/28/rYIVNRjzC8132mS.png" alt="image-20220628110327165"></p><h3 id="2-2-2-操作数栈"><a href="#2-2-2-操作数栈" class="headerlink" title="2.2.2 操作数栈"></a>2.2.2 操作数栈</h3><p>主要作为方法调用的中转站使用，用于存放方法执行过程中产生的中间计算结果。另外，计算过程中产生的临时变量也会放在操作数栈中。</p><h3 id="2-2-3-动态链接"><a href="#2-2-3-动态链接" class="headerlink" title="2.2.3 动态链接"></a>2.2.3 动态链接</h3><p>主要服务一个方法需要调用其他方法的场景。在 Java 源文件被编译成字节码文件时，所有的变量和方法引用都作为符号引用（Symbilic Reference）保存在 Class 文件的常量池里。当一个方法要调用其他方法，需要将常量池中指向方法的符号引用转化为其在内存地址中的直接引用。动态链接的作用就是为了将符号引用转换为调用方法的直接引用。</p><p><img src="https://s2.loli.net/2022/06/28/uMVOPhtYNdsbnjz.png"></p><h2 id="2-3-本地方发栈"><a href="#2-3-本地方发栈" class="headerlink" title="2.3 本地方发栈"></a>2.3 本地方发栈</h2><p>和虚拟机栈所发挥的作用非常相似，区别是： <strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在Hotspot JVM中，直接将本地方法栈和虚拟机栈合二为一。</p><p>本地方法的作用是融合不同的编程语言为Java所用，它的初衷是融合C/C++程序</p><h2 id="2-4-堆"><a href="#2-4-堆" class="headerlink" title="2.4 堆"></a>2.4 堆</h2><p>java虚拟机所管理的内存中最大的一块，java堆是所有线程共享的一块区域，在虚拟机启动创建时。<strong>次内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</strong></p><p>从 JDK 1.7 开始已经默认开启逃逸分析，如果某些方法中的对象引用没有被返回或者未被外面使用（也就是未逃逸出去），那么对象可以直接在栈上分配内存。</p><p>java堆是垃圾收集器管理的主要区域，因此也被称作GC堆。所以java堆还可以细分为：新生代和老年代</p><p>下图所示的 Eden 区、两个 Survivor 区 S0 和 S1 都属于新生代，中间一层属于老年代，最下面一层属于永久代。</p><p><img src="https://s2.loli.net/2022/06/28/nmF9VJtjaPdTY8H.png"></p><p><strong>JDK 8 版本之后 PermGen(永久) 已被 Metaspace(元空间) 取代，元空间使用的是直接内存</strong></p><p>大部分情况，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 S0 或者 S1，并且对象的年龄还会加 1(Eden 区-&gt;Survivor 区后对象的初始年龄变为 1)，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <code>-XX:MaxTenuringThreshold</code> 来设置。</p><h2 id="2-5-方法区"><a href="#2-5-方法区" class="headerlink" title="2.5 方法区"></a>2.5 方法区</h2><p>方法区属于是jvm运行时数据区域的一块逻辑区域，是各个线程共享的内存区域。</p><p>《Java 虚拟机规范》只是规定了有方法区这么个概念和它的作用，方法区到底要如何实现那就是虚拟机自己要考虑的事情了。也就是说，在不同的虚拟机实现上，方法区的实现是不同的。</p><p>当虚拟机要使用一个类时，他需要读取并解析Class文件获取相关信息，再将信息存放入方法区。方法区会存储已被虚拟机加载的<strong>类信息、字段信息、方法信息、敞亮、静态变量、即时编译器编译后的代码缓存等数据。</strong></p><p><strong>方法区和永久代以及元空间的关系</strong>，通俗来讲就像接口和方法之间的实现关系</p><p><img src="https://s2.loli.net/2022/06/28/q5svOrpweAxj7MG.png"></p><p><strong>为什么要将永久代替换为元空间呢？</strong></p><p>答： 整个永久代有一个 JVM 本身设置的固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。</p><pre class="line-numbers language-none"><code class="language-none">当元空间溢出时会得到如下错误： java.lang.OutOfMemoryError: MetaSpace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以使用 <code>-XX：MaxMetaspaceSize</code> 标志设置最大元空间大小，默认值为 unlimited，这意味着它只受系统内存的限制。<code>-XX：MetaspaceSize</code> 调整标志定义元空间的初始大小如果未指定此标志，则 Metaspace 将根据运行时的应用程序需求动态地重新调整大小。</p><p>2、元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 <code>MaxPermSize</code> 控制了, 而由系统的实际可用空间来控制，这样能加载的类就更多了。</p><p><strong>方法区常用参数：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">MetaspaceSize</span><span class="token operator">=</span><span class="token class-name">N</span> <span class="token comment">//设置 Metaspace 的初始（和最小大小）</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">MaxMetaspaceSize</span><span class="token operator">=</span><span class="token class-name">N</span> <span class="token comment">//设置 Metaspace 的最大大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与永久代很大的不同就是，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。</p><p><strong>运行时常量池</strong></p><p>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有用于存放编译期生成的各种字面量（Literal）和符号引用（Symbolic Reference）的 <strong>常量池表(Constant Pool Table)</strong> 。</p><p>字面量是源代码中的固定值的表示法，即通过字面我们就能知道其值的含义。字面量包括整数、浮点数和字符串字面量，符号引用包括类符号引用、字段符号引用、方法符号引用和接口方法符号引用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1就是字面量  a是变量名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="C:/Users/whb02/AppData/Roaming/Typora/typora-user-images/image-20220628160236579.png" alt="image-20220628160236579"></p><p>常量池表会在类加载后存放到方法区的运行时常量池中。</p><p>运行时常量池的功能类似于传统编程语言的符号表，尽管它包含了比典型符号表更广泛的数据。</p><p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 <code>OutOfMemoryError</code> 错误。</p><p><strong>字符串常量池</strong></p><p><strong>字符串常量池</strong> 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。</p><p>HotSpot 虚拟机中字符串常量池的实现是</p><pre class="line-numbers language-none"><code class="language-none">`src/hotspot/share/classfile/stringTable.cpp` ,`StringTable` 本质上就是一个`HashSet&lt;String&gt;` ,容量为 `StringTableSize`（可以通过 `-XX:StringTableSize` 参数来设置）。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>StringTable</code> 中保存的是字符串对象的引用，字符串对象的引用指向堆中的字符串对象</strong></p><p><img src="https://s2.loli.net/2022/06/28/NQkFl5Bx7RohU2X.png" alt="image-20220628154747376"></p><p><strong>JDK 1.7 为什么要将字符串常量池移动到堆中？</strong></p><p>主要是因为永久代（方法区实现）的 GC 回收效率太低，只有在整堆收集 (Full GC)的时候才会被执行 GC。Java 程序中通常会有大量的被创建的字符串等待回收，将字符串常量池放到堆中，能够更高效及时地回收字符串内存。</p><h2 id="2-6-直接内存"><a href="#2-6-直接内存" class="headerlink" title="2.6 直接内存"></a>2.6 直接内存</h2><p>直接内存并不是虚拟机运行时数据的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁的使用。而且也可能导致 OutOfMemoryError 错误出现。</p><pre class="line-numbers language-none"><code class="language-none">JDK1.4 中新加入的 NIO(New Input/Output) 类，引入了一种基于通道（Channel）与缓存区（Buffer）的 I/O 方式，它可以直接使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样就能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆之间来回复制数据。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本机直接内存的分配不会受到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。</p><h1 id="三-HotSpot-虚拟机对象探秘"><a href="#三-HotSpot-虚拟机对象探秘" class="headerlink" title="三.  HotSpot 虚拟机对象探秘"></a>三.  HotSpot 虚拟机对象探秘</h1><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p>Java 对象的创建过程我建议最好是能默写出来，并且要掌握每一步在做什么。</p><h4 id="Step1-类加载检查"><a href="#Step1-类加载检查" class="headerlink" title="Step1:类加载检查"></a>Step1:类加载检查</h4><p>虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p><h4 id="Step2-分配内存"><a href="#Step2-分配内存" class="headerlink" title="Step2:分配内存"></a>Step2:分配内存</h4><p>在<strong>类加载检查</strong>通过后，接下来虚拟机将为新生对象<strong>分配内存</strong>。对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。<strong>分配方式</strong>有 <strong>“指针碰撞”</strong> 和 <strong>“空闲列表”</strong> 两种，<strong>选择哪种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定</strong>。</p><p><strong>内存分配的两种方式</strong> （补充内容，需要掌握）：</p><ul><li>指针碰撞 ：<ul><li>适用场合 ：堆内存规整（即没有内存碎片）的情况下。</li><li>原理 ：用过的内存全部整合到一边，没有用过的内存放在另一边，中间有一个分界指针，只需要向着没用过的内存方向将该指针移动对象内存大小位置即可。</li><li>使用该分配方式的 GC 收集器：Serial, ParNew</li></ul></li><li>空闲列表 ：<ul><li>适用场合 ： 堆内存不规整的情况下。</li><li>原理 ：虚拟机会维护一个列表，该列表中会记录哪些内存块是可用的，在分配的时候，找一块儿足够大的内存块儿来划分给对象实例，最后更新列表记录。</li><li>使用该分配方式的 GC 收集器：CMS</li></ul></li></ul><p>选择以上两种方式中的哪一种，取决于 Java 堆内存是否规整。而 Java 堆内存是否规整，取决于 GC 收集器的算法是”标记-清除”，还是”标记-整理”（也称作”标记-压缩”），值得注意的是，复制算法内存也是规整的。</p><p><strong>内存分配并发问题（补充内容，需要掌握）</strong></p><p>在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情，作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：</p><ul><li><strong>CAS+失败重试：</strong> CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。<strong>虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</strong></li><li><strong>TLAB：</strong> 为每一个线程预先在 Eden 区分配一块儿内存，JVM 在给线程中的对象分配内存时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，再采用上述的 CAS 进行内存分配</li></ul><h4 id="Step3-初始化零值"><a href="#Step3-初始化零值" class="headerlink" title="Step3:初始化零值"></a>Step3:初始化零值</h4><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。</p><h4 id="Step4-设置对象头"><a href="#Step4-设置对象头" class="headerlink" title="Step4:设置对象头"></a>Step4:设置对象头</h4><p>初始化零值完成之后，<strong>虚拟机要对对象进行必要的设置</strong>，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <strong>这些信息存放在对象头中。</strong> 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p><h4 id="Step5-执行-init-方法"><a href="#Step5-执行-init-方法" class="headerlink" title="Step5:执行 init 方法"></a>Step5:执行 init 方法</h4><p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，<code>&lt;init&gt;</code> 方法还没有执行，所有的字段都还为零。所以一般来说，执行 new 指令之后会接着执行 <code>&lt;init&gt;</code> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全产生出来。</p><h1 id="四-对象的内存布局"><a href="#四-对象的内存布局" class="headerlink" title="四. 对象的内存布局"></a>四. 对象的内存布局</h1><p>在 Hotspot 虚拟机中，对象在内存中的布局可以分为 3 块区域：<strong>对象头</strong>、<strong>实例数据</strong>和<strong>对齐填充</strong>。</p><p><strong>Hotspot 虚拟机的对象头包括两部分信息</strong>，<strong>第一部分用于存储对象自身的运行时数据</strong>（哈希码、GC 分代年龄、锁状态标志等等），<strong>另一部分是类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><p><strong>实例数据部分是对象真正存储的有效信息</strong>，也是在程序中所定义的各种类型的字段内容。</p><p><strong>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起占位作用。</strong> 因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍，换句话说就是对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p><h3 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h3><p>建立对象就是为了使用对象，我们的 Java 程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式由虚拟机实现而定，目前主流的访问方式有：<strong>使用句柄</strong>、<strong>直接指针</strong>。</p><h4 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h4><p>如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springOauth2</title>
      <link href="/2022/06/22/2022-06-22-springauth2/"/>
      <url>/2022/06/22/2022-06-22-springauth2/</url>
      
        <content type="html"><![CDATA[<h1 id="一-Oauth2简介"><a href="#一-Oauth2简介" class="headerlink" title="一. Oauth2简介"></a>一. Oauth2简介</h1><h2 id="1-1-什么是OAuth2"><a href="#1-1-什么是OAuth2" class="headerlink" title="1.1 什么是OAuth2"></a>1.1 什么是OAuth2</h2><ul><li><strong>OAuth</strong> 是一个开放标准，该标准允许用户让第三方应用访问该用户在某一网站上存储的私密资源（如头像、照片、视频等），而在这个过程中无须将用户名和密码提供给第三方应用。实现这一功能是通过提供一个令牌（<strong>token</strong>），而不是用户名和密码来访问他们存放在特定服务提供者的数据。</li><li>每一个令牌授权一个特定的网站在特定的时段内访问特定的资源。这样，<strong>OAuth</strong> 让用户可以授权第三方网站灵活地访问存储在另外一些资源服务器的特定信息，而非所有内容。目前主流的 <strong>qq</strong>，微信等第三方授权登录方式都是基于 <strong>OAuth2</strong> 实现的。</li><li><strong>OAuth 2</strong> 是 <strong>OAuth</strong> 协议的下一版本，但不向下兼容 <strong>OAuth 1.0</strong>。</li><li>传统的 <strong>Web</strong> 开发登录认证一般都是基于 <strong>Session</strong> 的，但是因为移动端（<strong>Android</strong>、<strong>iOS</strong>、微信小程序等）要么不支持<strong>Cookie</strong>（微信小程序），要么使用非常不便，对于这些问题，使用 <strong>OAuth 2</strong> 认证都能解决。</li></ul><h2 id="1-2-授权流程"><a href="#1-2-授权流程" class="headerlink" title="1.2 授权流程"></a>1.2 授权流程</h2><p><img src="https://s2.loli.net/2022/08/05/fzVYc314AP7B6rl.png" alt="image-20220713171114815"></p><ol><li>客户端（第三方应用）向用户请求授权。</li><li>用户单击客户端所呈现的服务授权页面上的同意授权按钮后，服务端返回一个授权许可凭证给客户端。</li><li>客户端拿着授权许可凭证去授权服务器申请令牌。</li><li>授权服务器验证信息无误后，发放令牌给客户端。</li><li>客户端拿着令牌去资源服务器访问资源。</li><li>资源服务器验证令牌无误后开放资源。</li></ol><h2 id="1-3-OAuth-2-角色"><a href="#1-3-OAuth-2-角色" class="headerlink" title="1.3  OAuth 2 角色"></a>1.3  OAuth 2 角色</h2><p><strong>资源所有者</strong>（<strong>Resource Owner</strong>）：即代表授权客户端访问本身资源信息的用户，客户端访问用户帐户的权限仅限于用户授权的“范围”。</p><p><strong>客户端</strong>（<strong>Client</strong>）：即代表意图访问受限资源的第三方应用。在访问实现之前，它必须先经过用户者授权，并且获得的授权凭证将进一步由授权服务器进行验证。</p><p><strong>授权服务器</strong>（<strong>Authorization Server</strong>）：授权服务器用来验证用户提供的信息是否正确，并返回一个令牌给第三方应用。</p><p><strong>资源服务器</strong>（<strong>Resource Server</strong>）：资源服务器是提供给用户资源的服务器，例如头像、照片、视频等。</p><h2 id="1-4-OAuth-2-授权模式"><a href="#1-4-OAuth-2-授权模式" class="headerlink" title="1.4  OAuth 2 授权模式"></a>1.4  OAuth 2 授权模式</h2><p><strong>OAuth</strong> 协议的授权模式共分为 <strong>4</strong> 种，分别说明如下：</p><p><strong>授权码模式</strong>：授权码模式（<strong>authorization code</strong>）是功能最完整、流程最严谨的授权模式。它的特点就是通过客户端的服务器与授权服务器进行交互，国内常见的第三方平台登录功能基本 都是使用这种模式。</p><p><strong>简化模式</strong>：简化模式不需要客户端服务器参与，直接在浏览器中向授权服务器中请令牌，一般若网站是纯静态页面，则可以采用这种方式。</p><p><strong>密码模式</strong>：密码模式是用户把用户名密码直接告诉客户端，客户端使用这些信息向授权服务器中请令牌。这需要用户对客户端高度信任，例如客户端应用和服务提供商是同一家公司。</p><p><strong>客户端模式</strong>：客户端模式是指客户端使用自己的名义而不是用户的名义向服务提供者申请授权。严格来说，客户端模式并不能算作OAuth协议要解决的问题的一种解决方案，但是，对于开发者而言，在一些前后端分离应用或者为移动端提供的认证授权服务器上使用这种模式还是非常方便的</p><h1 id="二-入门案例"><a href="#二-入门案例" class="headerlink" title="二. 入门案例"></a>二. 入门案例</h1><p><img src="https://s2.loli.net/2022/08/05/vOmglrZIopiuEnG.png" alt="image-20220715145338805"></p><p>搭建两个模块，授权服务器和资源服务器。</p><h3 id="授权服务器"><a href="#授权服务器" class="headerlink" title="授权服务器"></a>授权服务器</h3><p>pom依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.lx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>auth-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">&gt;</span></span>Dalston.SR5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>Hoxton.SR11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">// 开启资源服务器注解</span><span class="token comment">// 资源服务器会对所有的请求进行拦截认证，当然除了oauth相关的请求之外。</span><span class="token comment">// 同时会创建一个拦截器OAuth2AuthenticationProcessingFilter，该拦截器会对请求头Authorization中的值进行相关验证。</span><span class="token annotation punctuation">@EnableResourceServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AuthServerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Oauth2配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">// 开启授权服务</span><span class="token annotation punctuation">@EnableAuthorizationServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Oauth2Config</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizationServerConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CLIENT_ID <span class="token operator">=</span> <span class="token string">"cms"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SECRET_CHAR_SEQUENCE <span class="token operator">=</span> <span class="token string">"{noop}secret"</span><span class="token punctuation">;</span> <span class="token comment">// {noop}secret  使用原文密码  不加密</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SCOPE_READ <span class="token operator">=</span> <span class="token string">"read"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SCOPE_WRITE <span class="token operator">=</span> <span class="token string">"write"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> TRUST <span class="token operator">=</span> <span class="token string">"trust"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> USER <span class="token operator">=</span><span class="token string">"user"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> ALL <span class="token operator">=</span> <span class="token string">"all"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ACCESS_TOKEN_VALIDITY_SECONDS <span class="token operator">=</span> <span class="token number">30</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FREFRESH_TOKEN_VALIDITY_SECONDS <span class="token operator">=</span> <span class="token number">30</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">;</span>    <span class="token comment">// 密码模式授权模式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> GRANT_TYPE_PASSWORD <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">;</span>    <span class="token comment">//授权码模式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> AUTHORIZATION_CODE <span class="token operator">=</span> <span class="token string">"authorization_code"</span><span class="token punctuation">;</span>    <span class="token comment">//refresh token模式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> REFRESH_TOKEN <span class="token operator">=</span> <span class="token string">"refresh_token"</span><span class="token punctuation">;</span>    <span class="token comment">//简化授权模式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> IMPLICIT <span class="token operator">=</span> <span class="token string">"implicit"</span><span class="token punctuation">;</span>    <span class="token comment">//指定哪些资源是需要授权验证的</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> RESOURCE_ID <span class="token operator">=</span> <span class="token string">"resource_id"</span><span class="token punctuation">;</span>    <span class="token comment">// 客户端信息配置</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ClientDetailsServiceConfigurer</span> clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        clients                <span class="token comment">// 使用内存存储</span>                <span class="token punctuation">.</span><span class="token function">inMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 标记客户端id</span>                <span class="token punctuation">.</span><span class="token function">withClient</span><span class="token punctuation">(</span>CLIENT_ID<span class="token punctuation">)</span>                <span class="token comment">// 客户端安全码</span>                <span class="token punctuation">.</span><span class="token function">secret</span><span class="token punctuation">(</span>SECRET_CHAR_SEQUENCE<span class="token punctuation">)</span>                <span class="token comment">// 为true 直接自动授权成功返回code</span>                <span class="token punctuation">.</span><span class="token function">autoApprove</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment">// 重定向uri</span>                <span class="token punctuation">.</span><span class="token function">redirectUris</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8084/cms/login"</span><span class="token punctuation">)</span>                <span class="token comment">// 允许授权的范围</span>                <span class="token punctuation">.</span><span class="token function">scopes</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span>                <span class="token comment">// tocken 时间 秒</span>                <span class="token punctuation">.</span><span class="token function">accessTokenValiditySeconds</span><span class="token punctuation">(</span>ACCESS_TOKEN_VALIDITY_SECONDS<span class="token punctuation">)</span>                <span class="token comment">// 刷新token 时间 秒</span>                <span class="token punctuation">.</span><span class="token function">refreshTokenValiditySeconds</span><span class="token punctuation">(</span>FREFRESH_TOKEN_VALIDITY_SECONDS<span class="token punctuation">)</span>                <span class="token comment">// 允许授权的类型</span>                <span class="token punctuation">.</span><span class="token function">authorizedGrantTypes</span><span class="token punctuation">(</span>GRANT_TYPE_PASSWORD<span class="token punctuation">,</span>AUTHORIZATION_CODE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerEndpointsConfigurer</span> endpoints<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        endpoints<span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token function">memoryTokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 认真服务器安全配置</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerSecurityConfigurer</span> security<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        security                <span class="token comment">//.realm(RESOURCE_ID)</span>                <span class="token comment">// 开启/oauth/tocken_key验证端口认证权限访问</span>                <span class="token punctuation">.</span><span class="token function">tokenKeyAccess</span><span class="token punctuation">(</span><span class="token string">"isAuthenticated()"</span><span class="token punctuation">)</span>                <span class="token comment">// 开启/oauth/check_token验证端口认证权限访问</span>                <span class="token punctuation">.</span><span class="token function">checkTokenAccess</span><span class="token punctuation">(</span><span class="token string">"isAuthenticated()"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">checkTokenAccess</span><span class="token punctuation">(</span><span class="token string">"permitAll()"</span><span class="token punctuation">)</span>                <span class="token comment">// 允许表单认证</span>                <span class="token punctuation">.</span><span class="token function">allowFormAuthenticationForClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">memoryTokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 最基本的InMemoryTokenStore生成token</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryTokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Spring Security配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AuthenticationManager</span> <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//登录用户配置</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"lx"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"{noop}123"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 静态资源放行配置</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">WebSecurity</span> web<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 解决静态资源来接问题</span>        web<span class="token punctuation">.</span><span class="token function">ignoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/asserts/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        web<span class="token punctuation">.</span><span class="token function">ignoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/favicon.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 权限配置</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http                <span class="token comment">// 配置登录并允许访问</span>                <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 配置 Basic 登录</span>                <span class="token comment">// .and.httpBasic()</span>                <span class="token comment">// 配置登出页面</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>                <span class="token comment">// 配置允许访问的连接</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/oauth/**"</span><span class="token punctuation">,</span><span class="token string">"/login/**"</span><span class="token punctuation">,</span><span class="token string">"logout/**"</span><span class="token punctuation">,</span><span class="token string">"/api/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 其余所有请求全部都要鉴权认证</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 关闭跨域保护</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动测试，输入<code>http://localhost:8888/oauth/check_token?token=2222</code> 因为现在我们还没有获取到token，就随意输入</p><p><img src="https://s2.loli.net/2022/08/05/DRIPfd93xQu68J5.png" alt="image-20220715151458990"></p><h3 id="资源服务器"><a href="#资源服务器" class="headerlink" title="资源服务器"></a>资源服务器</h3><p>pom依赖与资源服务器一样</p><p>aaplication.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8084</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /cms  <span class="token comment"># 配置作用 由最开始的 http://localhost:8084 变为 http://localhost:8084/cms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>启动类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">// 开启资源服务器</span><span class="token annotation punctuation">@EnableResourceServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CmsApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">CmsApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 资源服务器主要对令牌进行一个校验</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Oauth2ResourceServerConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceServerConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CHECK_TOKEN_URL <span class="token operator">=</span> <span class="token string">"http://localhost:8888/oauth/check_token"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ResourceServerSecurityConfigurer</span> resources<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用远程TokenService验证令牌，每次验证都提交个人验证服务器，效率较低</span>        <span class="token comment">// 验证地址  http://localhost:8888/oauth/check_token</span>        <span class="token class-name">RemoteTokenServices</span> tokenService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteTokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenService<span class="token punctuation">.</span><span class="token function">setCheckTokenEndpointUrl</span><span class="token punctuation">(</span>CHECK_TOKEN_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenService<span class="token punctuation">.</span><span class="token function">setClientId</span><span class="token punctuation">(</span><span class="token string">"cms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenService<span class="token punctuation">.</span><span class="token function">setClientSecret</span><span class="token punctuation">(</span><span class="token string">"secret"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resources<span class="token punctuation">.</span><span class="token function">tokenServices</span><span class="token punctuation">(</span>tokenService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Security配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 所有路径的资源都需要认证过后访问</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 跨域保护关闭</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller  为了方便测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getCurrentUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getCurrentUser</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> authentication<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试，输入<code>http://localhost:8084/cms/index</code></p><p><img src="https://s2.loli.net/2022/08/05/Ox2vULcdPqgks6t.png" alt="image-20220715165806521"></p><h2 id="2-1-授权码模式"><a href="#2-1-授权码模式" class="headerlink" title="2.1 授权码模式"></a>2.1 授权码模式</h2><p>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌</p><p><img src="https://s2.loli.net/2022/08/05/oZIFAX1KB98Olsp.png"></p><p>第三方授权一般就是授权码模式，流程如下：</p><ol><li>客户端携带client_id、redirect_uri，中间通过代理者访问授权服务器，如果已经登录过会直接返回redirect_uri，没有登录过就跳转到登录页面</li><li>授权服务器对客户端进行身份验证(通过用户代理，让用户输入用户名和密码) </li><li>授权通过，会重定向到redirect_uri并携带授权码code作为uri参数</li><li>客户端携带授权码访问授权服务器</li><li>验证授权码通过，返回acceptToken</li></ol><p>授权服务器配置的时候可以配置授权服务器的类型</p><p><img src="https://s2.loli.net/2022/08/05/oq4tvHAjYDZpgSR.png" alt="image-20220715172150284"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="（1）-申请授权码"><a href="#（1）-申请授权码" class="headerlink" title="（1） 申请授权码"></a>（1） 申请授权码</h4><p>Get请求： <code>http://localhost:8888/oauth/authorize?client_id=cms&amp;client_secret=secret&amp;response_type=code&amp;redirect_uri=https://www.baidu.com</code></p><p>参数解释：</p><pre class="line-numbers language-none"><code class="language-none">client_id：客户端id，和授权配置类中设置的客户端id一致。response_type：授权码模式固定为code client_secret: 客户端安全吗，与授权配置类中的secret一致redirect_uri: 重定向地址  登陆成功后会跳转的地址（可以不填） 客户端必须配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/05/Veg3r9LjUSv6sbl.png" alt="image-20220715183851004"></p><p>因为没登录，所以会返回SpringSecurity的默认登录页面，具体代码是 <code>http.formLogin().permitAll()</code>; ，如果要弹窗登录的，可以配置 <code>http.httpBasic()</code>; ，这种配置是没有登录页面的，自定义登录页面可以这样配置<code>http.formLogin().loginPage("/login").permitAll()</code></p><p><img src="https://s2.loli.net/2022/08/05/ZC5mEkHjPLgI27p.png" alt="image-20220715180502760"></p><p><img src="https://s2.loli.net/2022/08/05/gL6jCJV8Yf4GZlx.png" alt="image-20220715181914501"></p><p>账号密码是在配置里面写死的，后续会优化，现在只是做一个简单的案例  账号lx  密码123  点击登录</p><p><img src="https://s2.loli.net/2022/08/05/TiUk1Kz6ntlbSvw.png" alt="image-20220715182027407"></p><p><img src="https://s2.loli.net/2022/08/05/en3QlNrthAkJ6HM.png" alt="image-20220715182202788"></p><p>登陆成功后会跳转到配置好的重定向地址，并且会附带上授权码code的值</p><p><img src="https://s2.loli.net/2022/08/05/y8HNbr7u26PK1vL.png" alt="image-20220715181821387"></p><h4 id="（2）-申请令牌"><a href="#（2）-申请令牌" class="headerlink" title="（2） 申请令牌"></a>（2） 申请令牌</h4><p>拿到授权码之后，就可以申请令牌了，因为是post请求，这里使用工具请求</p><p>输入地址：<code>http://localhost:8888/oauth/token?code=Cbu9UW&amp;grant_type=authorization_code&amp;redirect_uri=https://www.baidu.com&amp;scope=all</code></p><pre class="line-numbers language-none"><code class="language-none">grant_type：授权类型，填写authorization_code，表示授权码模式 code：授权码，就是刚刚获取的授权码，注意：授权码只使用一次就无效了，需要重新申请。 redirect_uri：申请授权码时的跳转url，一定和申请授权码时用的redirect_uri一致。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还需要在auth中 类型为<code>basic auth</code> 中配置</p><p><img src="https://s2.loli.net/2022/07/19/j9zUTZwH1c7Gaq5.png" alt="image-20220715182523098"></p><p>账号密码为配置类里面的客户端id与安全码</p><p><img src="https://s2.loli.net/2022/07/19/5BDsvJMcZ3Y4AyF.png" alt="image-20220715184333858"></p><p>点击发送</p><p><img src="https://s2.loli.net/2022/07/19/F31agHWvL6rqVl8.png" alt="image-20220715184702506"></p><pre class="line-numbers language-none"><code class="language-none">access_token：访问令牌，携带此令牌访问资源 token_type：有MAC Token与Bearer Token两种类型，两种的校验算法不同，RFC 6750建议Oauth2采 用 Bearer Token（http://www.rfcreader.com/#rfc6750）。 refresh_token：刷新令牌，使用此令牌可以延长访问令牌的过期时间。 在授权模式下加入该模式就会看到这个参数expires_in：过期时间，单位为秒。 scope：范围，与定义的客户端范围一致。 jti：当前token的唯一标识<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/05/v1r2ZiowshKjzn8.png" alt="image-20220715185415618"></p><p>这样我们再做一次上述的操作就可以看到刷新令牌</p><p><img src="https://s2.loli.net/2022/08/05/UtJDFICNMcBieEZ.png" alt="image-20220715185354539"></p><h4 id="（3）-令牌校验"><a href="#（3）-令牌校验" class="headerlink" title="（3） 令牌校验"></a>（3） 令牌校验</h4><p><code>http://localhost:8888/oauth/check_token?token=b3b21c21-444f-4ba6-bfdc-c988882307fb</code></p><p><img src="https://s2.loli.net/2022/08/05/zM5H8T3OwnRDCZu.png" alt="image-20220715185700666"></p><h4 id="（4）使用令牌"><a href="#（4）使用令牌" class="headerlink" title="（4）使用令牌"></a>（4）使用令牌</h4><p>访问我们资源服务器中的controller</p><p>访问路径：<code>http://localhost:8084/cms/index?access_token=b3b21c21-444f-4ba6-bfdc-c988882307fb</code></p><p><img src="https://s2.loli.net/2022/08/05/Z3E6CkmDgQrAtTL.png" alt="image-20220715185931999"></p><p>如果令牌错误或者过期则访稳不到该资源</p><h2 id="2-2-简化模式"><a href="#2-2-简化模式" class="headerlink" title="2.2 简化模式"></a>2.2 简化模式</h2><p>简化模式（implicit grant type）不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了”授权码”这个步骤，因此称简化模式。简化模式是相对于授权码模式而言的</p><h3 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h3><p><img src="https://s2.loli.net/2022/08/05/axfUhgvjsCXt5mb.png" alt="image-20220718105227115"></p><p>简化模式，流程如下：</p><ol><li>客户端携带client_id、redirect_uri，中间通过代理者访问授权服务器，如果已经登录过会直接返回redirect_uri，没有登录过就跳转到登录页面</li><li>授权服务器对客户端进行身份验证(通过用户代理，让用户输入用户名和密码) </li><li>授权通过，会重定向到redirect_uri并携带授权码token作为uri参数</li><li>客户端携带授权码访问资源服务器</li><li>验证token通过，返回资源</li></ol><p>配置</p><p><img src="https://s2.loli.net/2022/07/19/s3vQxUOjZJKdMfI.png" alt="image-20220718110621885"></p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><h4 id="（1）申请令牌"><a href="#（1）申请令牌" class="headerlink" title="（1）申请令牌"></a>（1）申请令牌</h4><p>访问授权链接，在浏览器访问就可以，授权码模式response_type参数传token</p><pre class="line-numbers language-none"><code class="language-none">Get请求：http://localhost:8888/oauth/authorize?client_id=cms&amp;redirect_uri=http://127.0.0.1:8084/cms/login&amp;response_type=token&amp;scope=all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数详解：</p><pre class="line-numbers language-none"><code class="language-none">client_id：客户端id，和授权配置类中设置的客户端id一致。response_type：简化模式固定为token scop：客户端范围，和授权配置类中设置的scop一致。 redirect_uri：跳转uri，当授权码申请成功后会跳转到此地址,需要与配置的uri一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为没登录，所以会返回SpringSecurity的默认登录页面，具体代码是 http .formLogin().permitAll(); ，如果要弹窗登录的，可以配置 http.httpBasic(); ，这种配置是没有登录页面的，自定义登录页面可以这样配置http.formLogin().loginPage(“/login”).permitAll() ，参考OAuth2Config代码。登录过后变会出现如下页面。</p><p><img src="https://s2.loli.net/2022/08/05/knFjVHogt9msZ4T.png" alt="image-20220718110830620"></p><h4 id="（2）令牌校验"><a href="#（2）令牌校验" class="headerlink" title="（2）令牌校验"></a>（2）令牌校验</h4><p>Spring Security Oauth2提供校验令牌的端点</p><pre class="line-numbers language-none"><code class="language-none">Get: http://localhost:8888/oauth/check_token?token=dc07f589-e3c9-4f99-98a5-7d5d1219547a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/19/C5Bx3kK1HmSIGT7.png" alt="image-20220718111125028"></p><h4 id="（3）使用令牌"><a href="#（3）使用令牌" class="headerlink" title="（3）使用令牌"></a>（3）使用令牌</h4><p>还是访问资源服务的index接口</p><pre class="line-numbers language-none"><code class="language-none">http://localhost:8084/cms/index?access_token=dc07f589-e3c9-4f99-98a5-7d5d1219547a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/05/VLyoxWEpaX5qe7z.png" alt="image-20220718111323112"></p><p>如果没有使用或者错误使用则会访问不了资源信息</p><h3 id="简化模式和授权码模式的区别"><a href="#简化模式和授权码模式的区别" class="headerlink" title="简化模式和授权码模式的区别"></a>简化模式和授权码模式的区别</h3><p>授权码模式User-agent（浏览器）只是持有授权码（code）使用授权码获得令牌，授权码，只能校验一次，这样即使授权码泄露，令牌相对安全，而简化模式由user agent(浏览器)，直接持有令牌，相对不安全</p><h2 id="2-3-客户端模式"><a href="#2-3-客户端模式" class="headerlink" title="2.3 客户端模式"></a>2.3 客户端模式</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>客户端模式（client credentials）：客户端模式（client credentials）适用于没有前端的命令行应用，即在命令行下请求令牌</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 客户端模式</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CLIENT_CREDENTIALS <span class="token operator">=</span> <span class="token string">"client_credentials"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/05/kyibD1Op6H7XtrT.png" alt="image-20220718113342290"></p><p>客户端模式，流程如下：</p><ol><li> 获取token<code> http://localhost:8888/oauth/token?client_id=cms&amp;client_secret=secret&amp;grant_type=client_credentials&amp;scope=all</code></li><li>拿到acceptToken之后，就可以直接访问资源</li></ol><p>参数列表：</p><pre class="line-numbers language-none"><code class="language-none">client_id：客户端id，和授权配置类中设置的客户端id一致。 client_secret：客户端秘钥，和授权配置类中设置的客户端secret一致。 response_type：密码模式固定为client_credentials scop：客户端范围，和授权配置类中设置的scop一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><h4 id="（1）-申请令牌"><a href="#（1）-申请令牌" class="headerlink" title="（1） 申请令牌"></a>（1） 申请令牌</h4><p><img src="https://s2.loli.net/2022/08/05/dG6QTfNrjUovqOe.png" alt="image-20220718113601969"></p><h4 id="（2）使用令牌"><a href="#（2）使用令牌" class="headerlink" title="（2）使用令牌"></a>（2）使用令牌</h4><pre class="line-numbers language-none"><code class="language-none">http://localhost:8084/cms/index?access_token=9221ff76-7486-4cc4-9899-360147cb1b63<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/05/fDRI5qVEm2pNuHY.png" alt="image-20220718113708037"></p><h2 id="2-4-密码模式"><a href="#2-4-密码模式" class="headerlink" title="2.4 密码模式"></a>2.4 密码模式</h2><h3 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h3><p>密码模式（resource owner password credentials）：密码模式中，用户向客户端提供自己的用户名和密码，这通常用在用户对客户端高度信任的情况</p><p><img src="https://s2.loli.net/2022/08/05/m4PC7cDWq8VGwFb.png" alt="image-20220718142253431"></p><p>密码授权一般就是授权码模式，流程如下：</p><ol><li>用户访问客户端，提供URI连接包含用户名和密码信息给授权服务器</li><li>授权服务器对客户端进行身份验证</li><li>授权通过，返回acceptToken给客户端</li></ol><p><img src="https://s2.loli.net/2022/08/05/wcOF92kyVuzxPLU.png" alt="image-20220718142516711"></p><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><h4 id="（1）申请令牌-1"><a href="#（1）申请令牌-1" class="headerlink" title="（1）申请令牌"></a>（1）申请令牌</h4><p>此链接需要使用 http Basic认证。 什么是http Basic认证？ http协议定义的一种认证方式，将客户端id和客户端密码按照“客户端ID:客户端密码”的格式拼接，并用base64编 码，放在header中请求服务端，</p><p>一个例子： <code>Authorization：BasicWGNXZWJBcHA6WGNXZWJBcHA=WGNXZWJBcHA6WGNXZWJBcHA=</code> 是用户名:密码的base64编码。认证失败服务端返回 401 Unauthorized。 </p><pre class="line-numbers language-none"><code class="language-none">POST:http://localhost:8888/oauth/token?password=123&amp;username=lx&amp;grant_type=password&amp;scope=all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数解释：</p><pre class="line-numbers language-none"><code class="language-none">grant_type：授权类型，填写password，表示密码模式 username:用户名 password:密码scop：客户端范围，和授权配置类中设置的scop一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/05/COBJWR1iLxYfIqM.png" alt="image-20220718143957159"></p><p>还需要在auth配置</p><p><img src="https://s2.loli.net/2022/08/05/pS6RxqXJlK1Wmkw.png" alt="image-20220718144028849"></p><p>点击发送</p><p><img src="https://s2.loli.net/2022/08/05/crJ8gEkyAihMdp2.png" alt="image-20220718144054305"></p><p>返回的参数信息如下：</p><pre class="line-numbers language-none"><code class="language-none">access_token：访问令牌，携带此令牌访问资源 token_type：有MAC Token与Bearer Token两种类型，两种的校验算法不同，RFC 6750建议Oauth2采 用 Bearer Token   （http://www.rfcreader.com/#rfc6750）。refresh_token：刷新令牌，使用此令牌可以延长访问令牌的过期时间。expires_in：过期时间，单位为秒。 scope：范围，与定义的客户端范围一致。 jti：当前token的唯一标识<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（2）令牌校验-1"><a href="#（2）令牌校验-1" class="headerlink" title="（2）令牌校验"></a>（2）令牌校验</h4><pre class="line-numbers language-none"><code class="language-none">Get: http://localhost:8888/oauth/check_token?token=f471ae2e-6888-4368-920e-4b663332bdb0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/05/CpF4hizPW8t2LNU.png" alt="image-20220718144414883"></p><h4 id="（3）使用令牌-1"><a href="#（3）使用令牌-1" class="headerlink" title="（3）使用令牌"></a>（3）使用令牌</h4><pre class="line-numbers language-none"><code class="language-none">http://localhost:8084/cms/index?access_token=f471ae2e-6888-4368-920e-4b663332bdb0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/05/ltWhLKe2qO6m8VU.png" alt="image-20220718144524547"></p><h2 id="2-5-令牌的存储方式"><a href="#2-5-令牌的存储方式" class="headerlink" title="2.5 令牌的存储方式"></a>2.5 令牌的存储方式</h2><p>对于token存储有如下方式，分别进行介绍：</p><ul><li>InMemoryTokenStore，默认存储，保存在内存</li><li>JdbcTokenStore，access_token存储在数据库</li><li>JwtTokenStore，JWT这种方式比较特殊，这是一种无状态方式的存储，不进行内存、数据库存储，只是JWT中携带全面的用户信息，保存在jwt中携带过去校验就可以，系统中采用JwtTokenStore</li><li>RedisTokenStore，将 access_token 存到 redis 中。</li><li>JwkTokenStore，将 access_token 保存到 JSON Web Key。</li></ul><p><code>ctrl+alt+B</code>查看该接口的实现类</p><p><img src="https://s2.loli.net/2022/08/05/dAb9j7PaISCBqtw.png" alt="image-20220718150216978"></p><h1 id="三-微服务搭建"><a href="#三-微服务搭建" class="headerlink" title="三. 微服务搭建"></a>三. 微服务搭建</h1><p>本次使用密码模式，存储方式采用JwtTokenStore</p><h2 id="3-1-导入数据库脚本"><a href="#3-1-导入数据库脚本" class="headerlink" title="3.1 导入数据库脚本"></a>3.1 导入数据库脚本</h2><p>官网给我们提供了几个表的脚本sql，<a href="https://github.com/spring-attic/spring-security-oauth/blob/main/spring-security-oauth2/src/test/resources/schema.sql">点击这里</a>可以查看，具体几个重要的脚本如下</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> oauth_client_details <span class="token punctuation">(</span>  client_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  resource_ids <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  client_secret <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  scope <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  authorized_grant_types <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  web_server_redirect_uri <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  authorities <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  access_token_validity <span class="token keyword">INTEGER</span><span class="token punctuation">,</span>  refresh_token_validity <span class="token keyword">INTEGER</span><span class="token punctuation">,</span>  additional_information <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  autoapprove <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> oauth_access_token <span class="token punctuation">(</span>  token_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  token LONGVARBINARY<span class="token punctuation">,</span>  authentication_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>  user_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  client_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  authentication LONGVARBINARY<span class="token punctuation">,</span>  refresh_token <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> oauth_refresh_token <span class="token punctuation">(</span>  token_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  token LONGVARBINARY<span class="token punctuation">,</span>  authentication LONGVARBINARY<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表结构的详解内容<a href="https://blog.csdn.net/yangxiao_hui/article/details/109100140?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-109100140-blog-108582704.pc_relevant_aa&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-109100140-blog-108582704.pc_relevant_aa&amp;utm_relevant_index=2">点击这里</a>，目前本项目只需要<code>oauth_client_details</code>就行，其余两个表采用数据库存储模式使用的</p><p><img src="https://s2.loli.net/2022/08/05/KiPRqznbpI6QgHt.png" alt="image-20220720102024586"></p><p>该表的作用其实就是把我们前面写在代码里面的客户信息配置存储到数据库中，如下图的信息</p><p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20220720102307006.png" alt="image-20220720102307006"></p><h2 id="3-2-搭建服务工程"><a href="#3-2-搭建服务工程" class="headerlink" title="3.2 搭建服务工程"></a>3.2 搭建服务工程</h2><p>创建auth-center授权中心微服务工程，采用密码模式颁发令牌授权</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        监控--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        eureka注册发现--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        微服务之间的接口调用--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        熔断机制--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        config配置项--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        重试机制--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.retry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-retry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--oauth2--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mysql驱动--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.46<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--引入其他模块--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.lxs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>legou-security-instance<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nonFilteredFileExtensions</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nonFilteredFileExtension</span><span class="token punctuation">&gt;</span></span>cert<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nonFilteredFileExtension</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nonFilteredFileExtension</span><span class="token punctuation">&gt;</span></span>jks<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nonFilteredFileExtension</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nonFilteredFileExtensions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动类："><a href="#启动类：" class="headerlink" title="启动类："></a>启动类：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">// 开启资源服务器</span><span class="token annotation punctuation">@EnableResourceServer</span><span class="token comment">// 开启注册发现</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token comment">// 开启feign调用</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token comment">// 开启器熔断</span><span class="token annotation punctuation">@EnableCircuitBreaker</span><span class="token keyword">public</span> <span class="token keyword">class</span>  <span class="token class-name">AuthApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AuthApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="yml"><a href="#yml" class="headerlink" title="yml:"></a>yml:</h4><p>bootstrap.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> auth<span class="token punctuation">-</span>center  <span class="token key atrule">main</span><span class="token punctuation">:</span>    <span class="token key atrule">allow-bean-definition-overriding</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>auth-center.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9098</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">org.springframework.security</span><span class="token punctuation">:</span> DEBUG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一些配置，比如eureka的注册，数据库的连接，熔断的机制等等配置，是配置在config下的application.yml下的。在服务启动加载配置类的时候会把application.yml下的配置与以上两个配置一起拼接，application.yml内容如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#从Eureka Server服务的列表只读备份，然后缓存在本地</span>    <span class="token key atrule">registry-fetch-interval-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment">#`每隔30秒`会重新获取并更新数据</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>8761/eureka/  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 当调用getHostname获取实例的hostname时，返回ip而不是host名称</span>    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 10秒即过期</span>    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment"># 5秒一次心跳</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#开启熔断</span><span class="token comment"># 线程隔离</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>  <span class="token key atrule">command</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">execution</span><span class="token punctuation">:</span>        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>          <span class="token key atrule">thread</span><span class="token punctuation">:</span>            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">60000</span> <span class="token comment">#熔断超时时间</span>          <span class="token key atrule">strategy</span><span class="token punctuation">:</span> SEMAPHORE<span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">60000</span> <span class="token comment">#通信超时时间</span>  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">60000</span> <span class="token comment">#连接超时时间</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8888</span>      <span class="token key atrule">fail-fast</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 即在获取不到远程配置时，立即失败，但是用下边的配置进行重试</span>      <span class="token key atrule">retry</span><span class="token punctuation">:</span>        <span class="token key atrule">initial-interval</span><span class="token punctuation">:</span> <span class="token number">2000</span> <span class="token comment">#最初重试间隔为 1000 毫秒</span>        <span class="token key atrule">max-interval</span><span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token comment">#最长重试间隔为 2000 毫秒</span>        <span class="token key atrule">multiplier</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment">#每次重试失败后，重试间隔所增加的倍数</span>        <span class="token key atrule">max-attempts</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment">#最多重试 6 次</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.45.110<span class="token punctuation">:</span>3306/legou<span class="token punctuation">?</span>characterEncoding=utf8<span class="token important">&amp;characterSetResults=utf8&amp;autoReconnect=true&amp;failOverReadOnly=false</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">hikari</span><span class="token punctuation">:</span>      <span class="token key atrule">idle-timeout</span><span class="token punctuation">:</span> <span class="token number">60000</span>      <span class="token key atrule">maximum-pool-size</span><span class="token punctuation">:</span> <span class="token number">30</span>      <span class="token key atrule">minimum-idle</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>    <span class="token key atrule">default-property-inclusion</span><span class="token punctuation">:</span> always    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd    <span class="token key atrule">time-zone</span><span class="token punctuation">:</span> GMT+8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义UserDetailsService"><a href="#自定义UserDetailsService" class="headerlink" title="自定义UserDetailsService"></a>自定义UserDetailsService</h4><p>我们颁发的令牌，会携带用户信息，包括角色，这些用户信息，需要使用RBAC微服务查询获得，然后通过JWT令牌载荷存储，所以这里我们按照spring security规范实现自定义UserDetailsService，获取用户角色权限RBAC数据，存储到令牌。定义一个service包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//自定义userdetailservice</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">UserDetailServiceImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里是调用了一个用户微服务，自定义的</span>    <span class="token comment">// 其目的就是为了获取数据库中用户的相关信息</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserClient</span> userClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">PasswordEncoder</span> passwordEncoder<span class="token punctuation">;</span><span class="token comment">//BCryptPasswordEncoder 密码加密方法</span>    <span class="token comment">// 重写UserDetailsService中的方法</span>    <span class="token comment">// 通过方法名也能看得出，通过用户名加载用户，返回一个UserDetails对象</span>    <span class="token comment">// 所以我们需要通过拿到的用户名去获取用户相关信息，并把部分信息存储于UserDetails对象中返回</span>    <span class="token comment">// 一般有用户名,用户密码,用户权限等等</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>lxs<span class="token punctuation">.</span>legou<span class="token punctuation">.</span>security<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span>User</span> user <span class="token operator">=</span> userClient<span class="token punctuation">.</span><span class="token function">getByUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> grantedAuthorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"current user = "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取用户的授权</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Role</span><span class="token punctuation">&gt;</span></span> roles <span class="token operator">=</span> userClient<span class="token punctuation">.</span><span class="token function">selectRolesByUserId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//声明授权文件</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Role</span> role <span class="token operator">:</span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>role <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">GrantedAuthority</span> grantedAuthority <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">"ROLE_"</span> <span class="token operator">+</span> role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//spring Security中权限名称必须满足ROLE_XXX</span>                    grantedAuthorities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>grantedAuthority<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"granted authorities = "</span> <span class="token operator">+</span> grantedAuthorities<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> grantedAuthorities<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="oauth2配置类"><a href="#oauth2配置类" class="headerlink" title="oauth2配置类"></a>oauth2配置类</h4><p>创建一个config包,定义一个<code>AuthorizationServerConfiguration.java</code>类，令牌的授权配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAuthorizationServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationServerConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizationServerConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"authenticationManagerBean"</span><span class="token punctuation">)</span>    <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span><span class="token comment">//配置文件配置的数据库信息</span>    <span class="token comment">// 令牌的存储方式  采用jwt存储</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span><span class="token function">jwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// jwt配置</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">JwtAccessTokenConverter</span> <span class="token function">jwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 采用非对称加密算法 后续会讲解</span>        <span class="token class-name">KeyStoreKeyFactory</span> keyStoreKeyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyStoreKeyFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"kaikeba.jks"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"kaikeba"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//证书路径和密钥库密码</span>        <span class="token class-name">JwtAccessTokenConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        converter<span class="token punctuation">.</span><span class="token function">setKeyPair</span><span class="token punctuation">(</span>keyStoreKeyFactory<span class="token punctuation">.</span><span class="token function">getKeyPair</span><span class="token punctuation">(</span><span class="token string">"kaikeba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//密钥别名</span>        <span class="token keyword">return</span> converter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token comment">//声明 ClientDetails实现 需要访问数据库</span>    <span class="token keyword">public</span> <span class="token class-name">ClientDetailsService</span> <span class="token function">clientDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcClientDetailsService</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//配置客户端详情服务（ClientDetailsService），客户端详情信息在这里进行初始化。</span>    <span class="token comment">// 你能够把客户端详情信息写死在这里或者是通过数据库来存储调取详情信息</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ClientDetailsServiceConfigurer</span> clients<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//直接读取数据库，需要保证数据库配置有客户端信息（oauth_client_details），否则资源服务器无法获取认证数据</span>        clients<span class="token punctuation">.</span><span class="token function">withClientDetails</span><span class="token punctuation">(</span><span class="token function">clientDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//配置授权（authorization）以及令牌（token）的访问端点和令牌服务(token services)，还有token的存储方式(tokenStore)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerEndpointsConfigurer</span> endpoints<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        endpoints<span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tokenEnhancer</span><span class="token punctuation">(</span><span class="token function">jwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 配置tokenServices参数</span>        <span class="token class-name">DefaultTokenServices</span> tokenServices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTokenServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 令牌的存储的持久化策略</span>        tokenServices<span class="token punctuation">.</span><span class="token function">setTokenStore</span><span class="token punctuation">(</span>endpoints<span class="token punctuation">.</span><span class="token function">getTokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 是否刷新令牌</span>        tokenServices<span class="token punctuation">.</span><span class="token function">setSupportRefreshToken</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 客户端的实现方法</span>        tokenServices<span class="token punctuation">.</span><span class="token function">setClientDetailsService</span><span class="token punctuation">(</span>endpoints<span class="token punctuation">.</span><span class="token function">getClientDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 一个访问令牌增强器，将在新令牌保存到令牌存储之前应用到它。</span>        tokenServices<span class="token punctuation">.</span><span class="token function">setTokenEnhancer</span><span class="token punctuation">(</span>endpoints<span class="token punctuation">.</span><span class="token function">getTokenEnhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 访问令牌的默认有效期（以秒为单位）。</span>        tokenServices<span class="token punctuation">.</span><span class="token function">setAccessTokenValiditySeconds</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>DAYS<span class="token punctuation">.</span><span class="token function">toSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30天</span>        endpoints<span class="token punctuation">.</span><span class="token function">tokenServices</span><span class="token punctuation">(</span>tokenServices<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 令牌端点的验证</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthorizationServerSecurityConfigurer</span> security<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 允许表单认证</span>        security<span class="token punctuation">.</span><span class="token function">allowFormAuthenticationForClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 开启/oauth/token_key验证端口无权限访问</span>                <span class="token punctuation">.</span><span class="token function">tokenKeyAccess</span><span class="token punctuation">(</span><span class="token string">"permitAll()"</span><span class="token punctuation">)</span>                <span class="token comment">// 开启/oauth/check_token验证端口认证权限访问</span><span class="token comment">//                .checkTokenAccess("isAuthenticated()");</span>                <span class="token punctuation">.</span><span class="token function">checkTokenAccess</span><span class="token punctuation">(</span><span class="token string">"permitAll()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SecurityConfiguration配置类"><a href="#SecurityConfiguration配置类" class="headerlink" title="SecurityConfiguration配置类"></a>SecurityConfiguration配置类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">//1: 加载了WebSecurityConfiguration配置类, 配置安全认证策略。</span><span class="token comment">// 2: 加载了AuthenticationConfiguration, 配置了认证信息。</span><span class="token comment">// 可以理解为开启web认证</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment">// 注入自定义userdetailservice</span><span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>    <span class="token comment">// 密码加密方式</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//return PasswordEncoderFactories.createDelegatingPasswordEncoder();//兼容多种密码的加密方式</span>    <span class="token punctuation">}</span>    <span class="token comment">// 认证服务器的产生  在AuthorizationServerConfiguration里面用到</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">AuthenticationManager</span> <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 所有请求的授权端点配置</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">requestMatchers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//所有请求都加入HttpSecurity(多个HttpSecurity过滤)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/oauth/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开放/oauth/开头的所有请求</span>    <span class="token punctuation">}</span>    <span class="token comment">// 使用自定义的userDetailsService与密码的加密规则</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//注入自定义的UserDetailsService，采用BCrypt加密</span>        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>userDetailsService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h2><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><p>启动和本微服务相关的服务，启动成功后这里的授权微服务端口号为9098</p><p>数据库的<code>oauth_client_details</code>插入如下语句，</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>oauth_client_details<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'client'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$fg3GizKZ5K3s4sngyWOdleFxm3/7xnSUr/T7zzxkT9HFTGPDLrrWy'</span><span class="token punctuation">,</span> <span class="token string">'read,write'</span><span class="token punctuation">,</span> <span class="token string">'password,refresh_token'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'ROLE_ADMIN,ROLE_USER'</span><span class="token punctuation">,</span> <span class="token number">7200</span><span class="token punctuation">,</span> <span class="token number">7200</span><span class="token punctuation">,</span> <span class="token string">'{}'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>oauth_client_details<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'client_1'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$cqDiBXGunn/GcEeKvZX62eABaQyjyf3eJEW7AIL98uiq8UM.VZZfi'</span><span class="token punctuation">,</span> <span class="token string">'read,write'</span><span class="token punctuation">,</span> <span class="token string">'client_credentials'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'ROLE_ADMIN,ROLE_USER'</span><span class="token punctuation">,</span> <span class="token number">7200</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'{}'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>oauth_client_details<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'client_2'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$cqDiBXGunn/GcEeKvZX62eABaQyjyf3eJEW7AIL98uiq8UM.VZZfi'</span><span class="token punctuation">,</span> <span class="token string">'read'</span><span class="token punctuation">,</span> <span class="token string">'client_credentials'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'ROLE_USER'</span><span class="token punctuation">,</span> <span class="token number">7200</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'{}'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/05/UAtFaNhd8MPkGcg.png" alt="image-20220720145354421"></p><p>进行测试</p><pre class="line-numbers language-none"><code class="language-none">POST:http://localhost:9098/oauth/token?password=admin&amp;grant_type=password&amp;scop=read&amp;username=admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>得到如下页面即表示成功</p><p><img src="https://s2.loli.net/2022/08/05/AGHu7jPTXhKJzBY.png" alt="image-20220720145459114"></p><p>进行令牌校验,访问</p><pre class="line-numbers language-none"><code class="language-none">http://localhost:9098/oauth/check_token?token=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NTgzMDY5MzMsInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiUk9MRV9NQU5BR0VSIiwiUk9MRV9BRE1JTiJdLCJqdGkiOiI5ODM5N2NmOC1jZjgzLTRlN2EtYTNiYi0zN2Y1NTJhY2FhYjEiLCJjbGllbnRfaWQiOiJjbGllbnQiLCJzY29wZSI6WyJyZWFkIiwid3JpdGUiXX0.E3-2JALcPY3oHUUdMol21yuoh7R5W7bZsovKBGfBmn4BKXrZN_RH1TfY-XdlX72OtNH_WiNAVY0rKahTc1LI3DUQkOh00zIRYdYyv1_n5FZm1v_9MaTyxy-EsR0DG5_BSoeWLU3QDkAAPW2aiXKhg7eJ6Da8NvqW4DvjXr4qEyyWofJb4ktZIYUuuIkCuIkgnf49AVV03PwSqIG1ZCI8lhADOW6Xf1mE5gdK6uMbLcBTRgpfAMRGLcvXm7EUNrB-Z4TUQ0_mCYkEDt4ZgVP7kRFzH0LBUCl4jh4Kw5INtRYS2U90aeXeGAjT_rQPggxdPigeW5S53Ehblch-4pF-PA<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/05/93rf5tcgEdpLsxG.png" alt="image-20220720145738857"></p><h1 id="四-oauth2-非对称加密简介"><a href="#四-oauth2-非对称加密简介" class="headerlink" title="四. oauth2-非对称加密简介"></a>四. oauth2-非对称加密简介</h1><p>非对称加密算法需要两个密钥：<a href="https://baike.baidu.com/item/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5/7453570">公开密钥</a>（publickey:简称公钥）和私有密钥（privatekey:简称私 钥）。公钥与私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密。因为加密和解密 使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。</p><p>甲方生成一对<strong>秘钥</strong>并将<strong>公钥公开</strong>，乙方拿到甲方的<strong>公钥</strong>对数据进行<strong>加密</strong>，甲方需要用<strong>私钥</strong>才能对数据进行<strong>解密</strong></p><h2 id="4-1-私钥签名令牌公钥验证"><a href="#4-1-私钥签名令牌公钥验证" class="headerlink" title="4.1 私钥签名令牌公钥验证"></a>4.1 私钥签名令牌公钥验证</h2><p><img src="https://s2.loli.net/2022/08/05/fCIgiB2EJW5Oxcw.png" alt="image-20220803165831778"></p><h2 id="4-2-资源服务授权流程"><a href="#4-2-资源服务授权流程" class="headerlink" title="4.2 资源服务授权流程"></a>4.2 资源服务授权流程</h2><h3 id="（1）传统授权流程"><a href="#（1）传统授权流程" class="headerlink" title="（1）传统授权流程"></a>（1）传统授权流程</h3><p><img src="https://s2.loli.net/2022/08/05/2w7aZl3p8t5ImuO.png" alt="image-20220803170035184"></p><p>资源服务器授权流程如上图，客户端先去授权服务器申请令牌，申请令牌后，携带令牌访问资源服务器，资源服务器访问授权服务校验令牌的合法性，授权服务会返回校验结果，如果校验成功会返回用户信息给资源服务器，资源服务器如果接收到的校验结果通过了，则返回资源给客户端。</p><p>传统授权方法的问题是用户每次请求资源服务，资源服务都需要携带令牌访问认证服务去校验令牌的合法性，并根 据令牌获取用户的相关信息，性能低下。</p><h3 id="（2）公钥私钥授权流程"><a href="#（2）公钥私钥授权流程" class="headerlink" title="（2）公钥私钥授权流程"></a>（2）公钥私钥授权流程</h3><p><img src="https://s2.loli.net/2022/08/05/qmtNzTEyWVHBAkP.png" alt="image-20220803170607587"></p><p>传统的授权模式性能低下，每次都需要请求授权服务校验令牌合法性，我们可以利用公钥私钥完成对令牌的加密，如果加密解密成功，则表示令牌合法，如果加密解密失败，则表示令牌无效不合法，合法则允许访问资源服务器的资源，解密失败，则不允许访问资源服务器资源。</p><p>流程如下：</p><pre class="line-numbers language-none"><code class="language-none">1、客户端请求认证服务申请令牌 2、认证服务生成令牌认证服务采用非对称加密算法，使用私钥生成令牌。 3、客户端携带令牌访问资源服务客户端在Http header 中添加： Authorization：Bearer 令牌。 4、资源服务请求认证服务校验令牌的有效性资源服务接收到令牌，使用公钥校验令牌的合法性。 5、令牌有效，资源服务向客户端响应资源信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-生成公钥私钥"><a href="#4-3-生成公钥私钥" class="headerlink" title="4.3 生成公钥私钥"></a>4.3 生成公钥私钥</h2><p>JDK 1.4版本之后就自带一个keytool可以生成非对称秘钥</p><p><img src="https://s2.loli.net/2022/08/05/mGyctboOBV7KEQI.png" alt="image-20220803173010410"></p><p>查看相关命令可以使用 –help，  如生成秘钥相关命令</p><p><img src="https://s2.loli.net/2022/08/05/QmBDKEL4PTZuljM.png" alt="image-20220803173320805"></p><p>生成秘钥命令</p><pre class="line-numbers language-none"><code class="language-none">keytool -genkeypair -alias liuxin -keyalg RSA -keypass liuxin -keystore liuxin.jks -storepass liuxin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的时候需要填一些信息</p><p><img src="https://s2.loli.net/2022/08/05/CQFoeV9DrWYbtL5.png" alt="image-20220803174943919"></p><p>查看</p><pre class="line-numbers language-none"><code class="language-none">keytool -list -keystore liuxin.jks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/08/05/QW1SZGMBJIR9O3s.png" alt="image-20220803175052838"></p><p>删除</p><pre class="line-numbers language-none"><code class="language-none">keytool -delete -alias liuxin -keystore liuxin.jsk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-4-导出公钥"><a href="#4-4-导出公钥" class="headerlink" title="4.4 导出公钥"></a>4.4 导出公钥</h2><p>openssl是一个加解密工具包，这里使用openssl来导出公钥信息</p><p>安装 openssl：<a href="http://slproweb.com/products/Win32OpenSSL.html">http://slproweb.com/products/Win32OpenSSL.html</a></p><p>安装成功之后需要配置环境变量，路劲为openssl的bin目录下</p><p><img src="https://s2.loli.net/2022/08/05/VN2YCbsrI49zAcE.png" alt="image-20220804092641865"></p><p>完成之后校验</p><p><img src="https://s2.loli.net/2022/08/05/Fn7Evot1I6clSVw.png" alt="image-20220804092728689"></p><p>证明配置成功，在keytool文件夹下面输入以下代码</p><pre class="line-numbers language-none"><code class="language-none">keytool -list -rfc --keystore liuxin.jks | openssl x509 -inform pem -pubkey<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20220804092855009.png" alt="image-20220804092855009"></p><p>这就是生成的公钥，创建一个public.key文件，把公钥复制出来粘贴进文件里</p><p><img src="https://s2.loli.net/2022/08/05/chVenPqQbO2Xf1y.png" alt="image-20220804094323894"></p><h2 id="4-5-JWT令牌"><a href="#4-5-JWT令牌" class="headerlink" title="4.5 JWT令牌"></a>4.5 JWT令牌</h2><h3 id="（1）-私钥生成令牌"><a href="#（1）-私钥生成令牌" class="headerlink" title="（1） 私钥生成令牌"></a>（1） 私钥生成令牌</h3><p>写一个测试类，来测试用私钥来颁发令牌，这里在以前的auth测试项目中写的一个测试类JWTTest</p><p><img src="https://s2.loli.net/2022/08/05/Y7vzmNfb5WeiBKc.png" alt="image-20220805170400999"></p><p>私钥颁发令牌</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>codehaus<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ClassPathResource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span></span><span class="token class-name">Jwt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span></span><span class="token class-name">JwtHelper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>sign<span class="token punctuation">.</span></span><span class="token class-name">RsaSigner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>oauth2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>token<span class="token punctuation">.</span>store<span class="token punctuation">.</span></span><span class="token class-name">KeyStoreKeyFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">KeyPair</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">PrivateKey</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span></span><span class="token class-name">RSAPrivateKey</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName : JWTtest * @Description : JWTtest * @Author : liuxin * @Date: 2022-08-05 16:21 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 存储密钥的工厂对象</span>        <span class="token class-name">KeyStoreKeyFactory</span> keyStoreKeyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyStoreKeyFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"liuxin.jks"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"liuxin"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 密钥对 公钥-》私钥</span>        <span class="token class-name">KeyPair</span> keyPair <span class="token operator">=</span> keyStoreKeyFactory<span class="token punctuation">.</span><span class="token function">getKeyPair</span><span class="token punctuation">(</span><span class="token string">"liuxin"</span><span class="token punctuation">,</span> <span class="token string">"liuxin"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 私钥</span>        <span class="token class-name">PrivateKey</span> privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 自定义payload信息</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> tokenMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"liuxin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tokenMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"roles"</span><span class="token punctuation">,</span><span class="token string">"admin, r01, r02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用工具类  使用私钥颁发令牌</span>        <span class="token class-name">Jwt</span> jwt <span class="token operator">=</span> <span class="token class-name">JwtHelper</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>tokenMap<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RsaSigner</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RSAPrivateKey</span><span class="token punctuation">)</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><p><img src="https://s2.loli.net/2022/08/05/j4APyBFvxecO5XJ.png" alt="image-20220805170852954"></p><p>如果执行报错，比如无法加载文件之类的,就在pom加上这个</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>**/*.jks<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.jks<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）-公钥解析令牌"><a href="#（2）-公钥解析令牌" class="headerlink" title="（2） 公钥解析令牌"></a>（2） 公钥解析令牌</h3><p>上面用私钥生成好令牌后，我们用公钥去解析令牌,把生成好的公钥复制一下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testVerify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 令牌</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token string">"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlcyI6ImFkbWluLCByMDEsIHIwMiIsIm5hbWUiOiJsaXV4aW4iLCJpZCI6MTIzfQ.dFX0TPGfAdaPKUwJwM0TkZAHhrNkIF-sq7cwFnpgCfV3FZlA0kKprz_PiujRG9vM-_HEsB2TeLyxpQansKaLUloo2qqVY5uMxz12NYUXY4fRF_KDI_PceemsEnIAEKAt31tgCUhUubV7E4YMl3_2D-usIB5rd6j8HTxbS1jwj4cLywg3DPtf5yN2wJzAwP-VWMocVLUbJL3kQf0W9Sy-ZWBx9CibzA9IdNa_viu1WKgYibztZVTEwATSKQrWg56dJSyKgwgI8XDjfDfZt4A0sHGErC3aO_b5_1LVoTbOfmDAk84IFevh-m-OBr-gM-hO71ajaX4joZc_Bnz33PZmjA"</span><span class="token punctuation">;</span>        <span class="token comment">// 公钥</span>        <span class="token class-name">String</span> publicKey <span class="token operator">=</span> <span class="token string">"-----BEGIN PUBLIC KEY-----\n"</span> <span class="token operator">+</span>                <span class="token string">"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt2t5IfSBGmoDnGyDT9Sd\n"</span> <span class="token operator">+</span>                <span class="token string">"5cZtHt+DnKd/D+Rd1TBaJldbAeacsDCfGZ7xqKclTWF5WnsMu3cczt+eXWvkd9hj\n"</span> <span class="token operator">+</span>                <span class="token string">"LrniI0iQdguc5ZCzbhsB5mVHt3I2yEHVYyZbYSUfXPfXv3taboN8BpKOl9j/SAyo\n"</span> <span class="token operator">+</span>                <span class="token string">"WSKGe4iamOUIJxRsdxVgjmSxbjYME5YjaWlS9MbQLqMLNwFHWk0C6UtEK2HrTEXT\n"</span> <span class="token operator">+</span>                <span class="token string">"G83Aon+Rc5JotYPZna9So6lMH9f6cMKf3vqOOIAmHOEIbTNwGarFbu7rnzsoqGy7\n"</span> <span class="token operator">+</span>                <span class="token string">"NkvKzknUiHipuEsK/blyEjbQZvS9vJiMIIVcza55rcU+SAYSu04S9fnPq1VC6cgP\n"</span> <span class="token operator">+</span>                <span class="token string">"xwIDAQAB\n"</span> <span class="token operator">+</span>                <span class="token string">"-----END PUBLIC KEY-----"</span><span class="token punctuation">;</span>        <span class="token comment">// 令牌校验</span>        <span class="token class-name">Jwt</span> jwt <span class="token operator">=</span> <span class="token class-name">JwtHelper</span><span class="token punctuation">.</span><span class="token function">decodeAndVerify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RsaVerifier</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> claims <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><p><img src="https://s2.loli.net/2022/08/05/HzqF6wTZSj4EmKo.png" alt="image-20220805171828865"></p><h1 id="五-资源服务器搭建"><a href="#五-资源服务器搭建" class="headerlink" title="五. 资源服务器搭建"></a>五. 资源服务器搭建</h1><p>基本上所有微服务都是资源服务。授权服务器采用私钥加密生成令牌，对外向资源服务器提供公钥，资源服务器使 用公钥 来校验令牌的</p><p>合法性。 将公钥拷贝到 public.key文件中，将此文件拷贝到每一个需要的资源服务工程的classpath下。</p><p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20220812173631948.png" alt="image-20220812173631948"></p><p>把前面生成的公钥拷贝到该模块的resources下</p><h3 id="pom中多一个依赖"><a href="#pom中多一个依赖" class="headerlink" title="pom中多一个依赖"></a>pom中多一个依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--oauth2--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-oauth2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bootstarp-yml"><a href="#bootstarp-yml" class="headerlink" title="bootstarp.yml"></a>bootstarp.yml</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> security<span class="token punctuation">-</span>service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20220812173906636.png" alt="image-20220812173906636"></p><h3 id="config模块下管理的yml"><a href="#config模块下管理的yml" class="headerlink" title="config模块下管理的yml"></a>config模块下管理的yml</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9002</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token important">*:mybatis/*/*.xml</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.lxs.legou.<span class="token important">*.po</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment"># 下划线驼峰转换</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">lazy-loading-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">aggressive-lazy-loading</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token comment">#file: demo.log</span>  <span class="token key atrule">pattern</span><span class="token punctuation">:</span>    <span class="token key atrule">console</span><span class="token punctuation">:</span> <span class="token string">"%d - %msg%n"</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">org.springframework.web</span><span class="token punctuation">:</span> debug    <span class="token key atrule">com.lxs</span><span class="token punctuation">:</span> debug<span class="token key atrule">security</span><span class="token punctuation">:</span>  <span class="token key atrule">oauth2</span><span class="token punctuation">:</span>    <span class="token key atrule">resource</span><span class="token punctuation">:</span>      <span class="token key atrule">jwt</span><span class="token punctuation">:</span>        <span class="token key atrule">key-uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>9098/oauth/token_key<span class="token comment">#如果使用JWT，可以获取公钥用于 token 的验签</span>    <span class="token key atrule">client</span><span class="token punctuation">:</span>      <span class="token key atrule">access-token-uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>9098/oauth/token<span class="token comment">#令牌端点</span>      <span class="token key atrule">user-authorization-uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>9098/oauth/authorize<span class="token comment">#授权端点</span>      <span class="token key atrule">client-id</span><span class="token punctuation">:</span> client      <span class="token key atrule">client-secret</span><span class="token punctuation">:</span> <span class="token number">123456</span>      <span class="token key atrule">grant-type</span><span class="token punctuation">:</span> password      <span class="token key atrule">scope</span><span class="token punctuation">:</span> read<span class="token punctuation">,</span>write<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动类：-1"><a href="#启动类：-1" class="headerlink" title="启动类："></a>启动类：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token comment">// 开启注册发现</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token comment">// 开启feign远程调用</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token comment">// 开启熔断</span><span class="token annotation punctuation">@EnableCircuitBreaker</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SecurityApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="config包下"><a href="#config包下" class="headerlink" title="config包下"></a>config包下</h3><h4 id="JwtConfig-java"><a href="#JwtConfig-java" class="headerlink" title="JwtConfig.java"></a>JwtConfig.java</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> public_cert <span class="token operator">=</span> <span class="token string">"public.key"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">JwtAccessTokenConverter</span> jwtAccessTokenConverter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"tokenStore"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">TokenStore</span> <span class="token function">tokenStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JwtTokenStore</span><span class="token punctuation">(</span>jwtAccessTokenConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">protected</span> <span class="token class-name">JwtAccessTokenConverter</span> <span class="token function">jwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JwtAccessTokenConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtAccessTokenConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Resource</span> resource <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span>public_cert<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> publicKey<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            publicKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">FileCopyUtils</span><span class="token punctuation">.</span><span class="token function">copyToByteArray</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        converter<span class="token punctuation">.</span><span class="token function">setVerifierKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置校验公钥</span>        converter<span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">"liuxin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置证书签名密码，否则报错</span>        <span class="token keyword">return</span> converter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ResourceServerConfiguration-java"><a href="#ResourceServerConfiguration-java" class="headerlink" title="ResourceServerConfiguration.java"></a>ResourceServerConfiguration.java</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableResourceServer</span> <span class="token comment">// 开启资源服务</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//激活方法上的PreAuthorize注解</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceServerConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceServerConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TokenStore</span> tokenStore<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//                .antMatchers("/user/**", "/security/user/**").permitAll() //所有用户微服务未认证可以访问</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">,</span> <span class="token string">"/security/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/book/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"ADMIN"</span><span class="token punctuation">)</span> <span class="token comment">//用于测试</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">ResourceServerSecurityConfigurer</span> resources<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        resources<span class="token punctuation">.</span><span class="token function">tokenStore</span><span class="token punctuation">(</span>tokenStore<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SecurityConfig-java"><a href="#SecurityConfig-java" class="headerlink" title="SecurityConfig.java"></a>SecurityConfig.java</h4><p>加密算法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//return PasswordEncoderFactories.createDelegatingPasswordEncoder();//兼容多种密码的加密方式</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch</title>
      <link href="/2022/04/12/elastic-search/"/>
      <url>/2022/04/12/elastic-search/</url>
      
        <content type="html"><![CDATA[<h1 id="一-全文检索基础"><a href="#一-全文检索基础" class="headerlink" title="一.全文检索基础"></a>一.全文检索基础</h1><h2 id="1-什么是全文检索"><a href="#1-什么是全文检索" class="headerlink" title="1.什么是全文检索"></a>1.什么是全文检索</h2><p>将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，从而达到搜索相对较快的目的。这部分从非结构化数据中提取出的然后重新组织的信息，我们称之索引。</p><h2 id="2-全文检索流程"><a href="#2-全文检索流程" class="headerlink" title="2. 全文检索流程"></a>2. 全文检索流程</h2><p><img src="https://s2.loli.net/2022/04/11/Z4yu2rk8hdjc3Hb.png" alt="image-20220411135120871"></p><h2 id="3-相关概念"><a href="#3-相关概念" class="headerlink" title="3.相关概念"></a>3.相关概念</h2><h3 id="3-1-索引库"><a href="#3-1-索引库" class="headerlink" title="3.1 索引库"></a>3.1 索引库</h3><p>索引库就是存储索引的保存在磁盘上的一系列的文件。里面存储了建立好的索引信息以及文档对象。一个索引库相当于数据库中的一张表。</p><h3 id="3-2-document对象"><a href="#3-2-document对象" class="headerlink" title="3.2 document对象"></a>3.2 document对象</h3><p>获取原始内容的目的是为了索引，在索引前需要将原始内容创建成文档（Document），文档中包括一个一个的域（Field），域中存储内容。每个文档都有一个唯一的编号，就是文档id。document对象相当于表中的一条记录。</p><p><img src="https://s2.loli.net/2022/04/11/APUJcvfCTbg2y8I.png" alt="image-20220411135900873"></p><h3 id="3-3-field对象"><a href="#3-3-field对象" class="headerlink" title="3.3 field对象"></a>3.3 field对象</h3><p>​    如果我们把document看做是数据库中一条记录的话，field相当于是记录中的字段。一般有，file_name,file_path,file_content等。</p><p>field还有如下属性：</p><ul><li><strong>是否分词</strong>：是否对域的内容进行分词处理。前提是我们要对域的内容进行查询。</li><li><strong>是否索引</strong>：将Field分析后的词或整个Field值进行索引，只有索引方可搜索到。</li><li><strong>是否存储</strong>：将Field值存储在文档中，存储在文档中的Field才可以从Document中获取比如：商品名称、订单号，凡是将来要从Document中获取的Field都要存储。</li></ul><h2 id="4-term对象"><a href="#4-term对象" class="headerlink" title="4.term对象"></a>4.term对象</h2><p>term对象从文档对象中拆分出来的每个单词叫做一个Term，不同的域中拆分出来的相同的单词是不同的term。term中包含两部分一部分是文档的域名，另一部分是单词的内容。term是创建索引的关键词对象。</p><h1 id="二-ElasticSearch简介"><a href="#二-ElasticSearch简介" class="headerlink" title="二.ElasticSearch简介"></a>二.ElasticSearch简介</h1><h2 id="1-什么是ElasticSearch"><a href="#1-什么是ElasticSearch" class="headerlink" title="1.什么是ElasticSearch"></a>1.什么是ElasticSearch</h2><p>Elaticsearch，简称为es， es是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。es也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><h1 id="三-ElasticSearch相关概念-术语"><a href="#三-ElasticSearch相关概念-术语" class="headerlink" title="三.ElasticSearch相关概念(术语)"></a>三.ElasticSearch相关概念(术语)</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>Elasticsearch是面向文档(document oriented)的，这意味着它可以存储整个对象或文档(document)。然而它不仅仅是存储，还会索引(index)每个文档的内容使之可以被搜索。在Elasticsearch中，你可以对文档（而非成行成列的数据）进行索引、搜索、排序、过滤。Elasticsearch比传统关系型数据库如下：</p><pre class="line-numbers language-none"><code class="language-none">RelationalDB-&gt;Databases-&gt;Tables-&gt;Rows-&gt;ColumnsElasticsearch-&gt;Indices&nbsp;-&gt;Types-&gt;Documents-&gt;Fields<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-Elasticsearch核心概念"><a href="#2-Elasticsearch核心概念" class="headerlink" title="2.Elasticsearch核心概念"></a>2.Elasticsearch核心概念</h2><h3 id="2-1索引-index"><a href="#2-1索引-index" class="headerlink" title="2.1索引 index"></a>2.1索引 index</h3><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p><h3 id="2-2类型-type"><a href="#2-2类型-type" class="headerlink" title="2.2类型 type"></a>2.2类型 type</h3><p>在一个索引中，你可以定义一种或多种类型。一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个博客平台并且将你所有的数据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可以为评论数据定义另一个类型。</p><h3 id="2-3字段Field"><a href="#2-3字段Field" class="headerlink" title="2.3字段Field"></a>2.3字段Field</h3><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识</p><h3 id="2-4映射-mapping"><a href="#2-4映射-mapping" class="headerlink" title="2.4映射 mapping"></a>2.4映射 mapping</h3><p>mapping是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分析器、是否被索引等等，这些都是映射里面可以设置的，其它就是处理es里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。</p><h3 id="2-5文档-document"><a href="#2-5文档-document" class="headerlink" title="2.5文档 document"></a>2.5文档 document</h3><p>一个文档是一个可被索引的基础信息单元。比如，你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以JSON（Javascript Object Notation）格式来表示，而JSON是一个到处存在的互联网数据交互格式。</p><p>在一个index/type里面，你可以存储任意多的文档。注意，尽管一个文档，物理上存在于一个索引之中，文档必须被索引/赋予一个索引的type。</p><h3 id="2-6接近实时-NRT"><a href="#2-6接近实时-NRT" class="headerlink" title="2.6接近实时 NRT"></a>2.6接近实时 NRT</h3><p>Elasticsearch是一个接近实时的搜索平台。这意味着，从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟（通常是1秒以内）</p><h3 id="2-7集群-cluster"><a href="#2-7集群-cluster" class="headerlink" title="2.7集群 cluster"></a>2.7集群 cluster</h3><p>一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提供索引和搜索功能。一个集群由一个唯一的名字标识，这个名字默认就是“elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群</p><h3 id="2-8节点-node"><a href="#2-8节点-node" class="headerlink" title="2.8节点 node"></a>2.8节点 node</h3><p>一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能。和集群类似，一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于Elasticsearch集群中的哪些节点。</p><p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p><p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何Elasticsearch节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。</p><h3 id="2-9分片和复制-shards-amp-replicas"><a href="#2-9分片和复制-shards-amp-replicas" class="headerlink" title="2.9分片和复制 shards&amp;replicas"></a>2.9分片和复制 shards&amp;replicas</h3><p>一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。分片很重要，主要有两方面的原因：1）允许你水平分割/扩展你的内容容量。2）允许你在分片（潜在地，位于多个节点上）之上进行分布式的、并行的操作，进而提高性能/吞吐量。</p><p>至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户的你来说，这些都是透明的。</p><p>在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。</p><p>复制之所以重要，有两个主要原因：在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。扩展你的搜索量/吞吐量，因为搜索可以在所有的复制上并行运行。总之，每个索引可以被分成多个分片。一个索引也可以被复制0次（意思是没有复制）或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。</p><p>默认情况下，Elasticsearch中的每个索引被分片5个主分片和1个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝）这样的话，每个索引就有10个分片。</p><h1 id="四-Elasticsearch-安装"><a href="#四-Elasticsearch-安装" class="headerlink" title="四.Elasticsearch 安装"></a>四.Elasticsearch 安装</h1><h4 id="4-1-Docker对Elasticsearch-进行安装"><a href="#4-1-Docker对Elasticsearch-进行安装" class="headerlink" title="4.1 Docker对Elasticsearch 进行安装"></a>4.1 Docker对Elasticsearch 进行安装</h4><pre class="line-numbers language-linux" data-language="linux"><code class="language-linux">拉取镜像docker pull elasticsearch:6.6.2 安装es容器docker run -di --name=es -p 9200:9200 -p 9300:9300 elasticsearch:6.6.2 9200端口(Web管理平台端口) 9300(服务默认端口)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器输入地址访问： http://你的虚拟机ip:9200/</p><p><img src="https://s2.loli.net/2022/04/12/hrNfPtkS3YnW8cE.png" alt="image-20220412112303022"></p><h4 id="4-2-开启远程连接"><a href="#4-2-开启远程连接" class="headerlink" title="4.2 开启远程连接"></a>4.2 开启远程连接</h4><p>上面完成安装后，es并不能正常使用，elasticsearch从5版本以后默认不开启远程连接，程序直接连接会报如下错误：</p><p>我们需要修改es配置开启远程连接，代码如下：</p><p>登录容器</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker exec -it es /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">查看目录结构 输入: dirroot@07f22eb41bb5:/usr/share/elasticsearch# dir NOTICE.txt README.textile bin config data lib logs modules plugins进入config文件[root@b8d9b4e75952 elasticsearch]# cd config/[root@b8d9b4e75952 config]# lselasticsearch.keystore  elasticsearch.yml  ingest-geoip  jvm.options  log4j2.properties  role_mapping.yml  roles.yml  users  users_roles修改elasticsearch.yml文件[root@b8d9b4e75952 config]# vi elasticsearch.ymlbash: vi: command not found解决方案在后面 这边设置好了vim怎加以下配置  开启远程连接transport.host: 0.0.0.0增加集群名cluster.name: my-elasticsearch跨域配置http.cors.enabled: true http.cors.allow-origin: "*" network.host: 192.168.45.110  // 这里需要修改为宿主机的ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存并重启es</p><pre class="line-numbers language-none"><code class="language-none">退出容器exit重启esdocker restart es<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有时候配置之后可能会启动失败</p><p>这与我们刚才修改的配置有关，因为elasticsearch在启动的时候会进行一些检查，比如最多打开的文件的个数以及虚拟内存区域数量等等，如果你放开了此配置，意味着需要打开更多的文件以及虚拟内存，所以我们还需要系统调优</p><p>修改vi /etc/security/limits.conf ，追加内容 (nofile是单个进程允许打开的最大文件个数 soft nofile 是软限制 hard nofile是硬限制 )</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">添加下面参数<span class="token operator">*</span> soft nofile <span class="token number">65536</span> <span class="token operator">*</span> hard nofile <span class="token number">65536</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改vi /etc/sysctl.conf，追加内容 (限制一个进程可以拥有的VMA(虚拟内存区域)的数量 </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">vm<span class="token punctuation">.</span>max_map_count<span class="token operator">=</span><span class="token number">655360</span>保存退出 执行下面命令 修改内核参数马上生效sysctl <span class="token operator">-</span>p再次重启虚拟机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="问题：vi命令无法识别"><a href="#问题：vi命令无法识别" class="headerlink" title="问题：vi命令无法识别"></a>问题：vi命令无法识别</h5><p>因为docker容器里面没有该命令，我们可以安装该编辑器</p><p>设置apt下载源,因为默认使用国外的源，下载会很慢，我们需要跟换为国内的源，阿里的或者清华的</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">进入容器docker exec -it es /bash/bin进入目录cd /etc/apt查看root@38f993e4b549:/etc/apt# lsapt.conf.d  auth.conf.d  preferences.dsources.list  sources.list.baksources.list.dtrusted.gpg.d把已有的sources.list保存一下root@38f993e4b549:/etc/apt# cp sources.list sources.list_backroot@38f993e4b549:/etc/apt# lsapt.conf.d  auth.conf.d  preferences.dsources.list  sources.list.baksources.list.dsources.list_back  trusted.gpg.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编辑sources.list,因为用不了vi我们用最原始的echo编辑</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">echo <span class="token string">"deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse"</span> <span class="token operator">&gt;&gt;</span> sources<span class="token punctuation">.</span>listecho <span class="token string">"deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse"</span> <span class="token operator">&gt;&gt;</span> sources<span class="token punctuation">.</span>listecho <span class="token string">"deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse"</span> <span class="token operator">&gt;&gt;</span> sources<span class="token punctuation">.</span>listecho <span class="token string">"deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse"</span> <span class="token operator">&gt;&gt;</span> sources<span class="token punctuation">.</span>listecho <span class="token string">"deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse"</span> <span class="token operator">&gt;&gt;</span> sources<span class="token punctuation">.</span>listecho <span class="token string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse"</span> <span class="token operator">&gt;&gt;</span> sources<span class="token punctuation">.</span>listecho <span class="token string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse"</span> <span class="token operator">&gt;&gt;</span> sources<span class="token punctuation">.</span>listecho <span class="token string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse"</span> <span class="token operator">&gt;&gt;</span> sources<span class="token punctuation">.</span>listecho <span class="token string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse"</span> <span class="token operator">&gt;&gt;</span> sources<span class="token punctuation">.</span>listecho <span class="token string">"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse"</span> <span class="token operator">&gt;&gt;</span> sources<span class="token punctuation">.</span>list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">root@<span class="token number">38f</span><span class="token number">993e4</span>b549<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>apt# lsapt<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d  auth<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>d  preferences<span class="token punctuation">.</span>dsources<span class="token punctuation">.</span>list  sources<span class="token punctuation">.</span>list<span class="token punctuation">.</span>baksources<span class="token punctuation">.</span>list<span class="token punctuation">.</span>dsources<span class="token punctuation">.</span>list_back  trusted<span class="token punctuation">.</span>gpg<span class="token punctuation">.</span>droot@<span class="token number">38f</span><span class="token number">993e4</span>b549<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>apt# cat sources<span class="token punctuation">.</span>listdeb https<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span>deb https<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span>deb https<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span>deb https<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span>deb https<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span>deb http<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span>deb http<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span>deb http<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span>deb http<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span>deb http<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span>deb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span>deb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span>deb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span>deb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span>deb<span class="token operator">-</span>src http<span class="token operator">:</span><span class="token comment">//mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行更新</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">root@38f993e4b549:/etc/apt# apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/12/1tmPYSiqwW9pelF.png" alt="image-20220412151431163"></p><p>报错，查找原因发现 需要安装证书</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">保存以前的 resources<span class="token punctuation">.</span>list root@<span class="token number">38f</span><span class="token number">993e4</span>b549<span class="token operator">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>apt# cp sources<span class="token punctuation">.</span>list sources<span class="token punctuation">.</span>list_back_tow  执行这个  大致意思是因为这是临时使用的http源   不需要证书echo <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free"</span> <span class="token operator">&gt;&gt;</span> <span class="token operator">/</span>etc<span class="token operator">/</span>apt<span class="token operator">/</span>sources<span class="token punctuation">.</span>listecho <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free"</span> <span class="token operator">&gt;&gt;</span> <span class="token operator">/</span>etc<span class="token operator">/</span>apt<span class="token operator">/</span>sources<span class="token punctuation">.</span>listecho <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free"</span> <span class="token operator">&gt;&gt;</span> <span class="token operator">/</span>etc<span class="token operator">/</span>apt<span class="token operator">/</span>sources<span class="token punctuation">.</span>listecho <span class="token string">"deb http://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free"</span> <span class="token operator">&gt;&gt;</span> <span class="token operator">/</span>etc<span class="token operator">/</span>apt<span class="token operator">/</span>sources<span class="token punctuation">.</span>list执行 apt updateapt install ca<span class="token operator">-</span>certificatesapt<span class="token operator">-</span>get install vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面我尝试换回原来的阿里云的源   不过好像还是不行  未去深究</p><h1 id="五-语法"><a href="#五-语法" class="headerlink" title="五.语法"></a>五.语法</h1><h2 id="5-1-接口语法"><a href="#5-1-接口语法" class="headerlink" title="5.1 接口语法"></a>5.1 接口语法</h2><pre class="line-numbers language-none"><code class="language-none">curl -X&lt;VERB&gt; '&lt;PROTOCOL&gt;://&lt;HOST&gt;:&lt;PORT&gt;/&lt;PATH&gt;?&lt;QUERY_STRING&gt;' -d '&lt;BODY&gt;'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/13/InD7XyLZgHcM5Pv.png" alt="image-20220413160232810"></p><h2 id="5-2-创建索引index和映射mapping"><a href="#5-2-创建索引index和映射mapping" class="headerlink" title="5.2 创建索引index和映射mapping"></a>5.2 创建索引index和映射mapping</h2><pre class="line-numbers language-none"><code class="language-none">PUT http://192.168.45.110:9200/blog1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请求体：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 创建映射</span>        <span class="token property">"article"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 自命名</span>            <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 域  固定写法</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// field 相当于数据库中的colum</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span><span class="token punctuation">,</span> <span class="token comment">// 类型</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否存储</span>                    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"false"</span> <span class="token comment">// 是否分词</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>                    <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"standard"</span> <span class="token comment">//分词器</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                    <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>                    <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"standard"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先用put创建一个blog12</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT http<span class="token operator">:</span><span class="token comment">//192.168.45.110:9200/blog12</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增加mapping</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POST http<span class="token operator">:</span><span class="token comment">//192.168.45.110:9200/blog12/hello/_mapping</span>请求体<span class="token punctuation">{</span>    <span class="token property">"hello"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span><span class="token punctuation">,</span>                <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"standard"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"content"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>                <span class="token property">"store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"index"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"analyzer"</span><span class="token operator">:</span> <span class="token string">"standard"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3-查询索引"><a href="#5-3-查询索引" class="headerlink" title="5.3 查询索引"></a>5.3 查询索引</h2><pre class="line-numbers language-none"><code class="language-none">GET http://192.168.45.110:9200/blog1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-none"><code class="language-none">{    "blog1": {        "aliases": {},        "mappings": {            "article": {                "properties": {                    "content": {                        "type": "text",                        "store": true,                        "analyzer": "standard"                    },                    "id": {                        "type": "long",                        "index": false,                        "store": true                    },                    "title": {                        "type": "text",                        "store": true,                        "analyzer": "standard"                    }                }            }        },        "settings": {            "index": {                "creation_date": "1649905594582",                "number_of_shards": "5",                "number_of_replicas": "1",                "uuid": "6XJiw43yRr-_lAPpASVR_A",                "version": {                    "created": "6060299"                },                "provided_name": "blog1"            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-4-删除索引"><a href="#5-4-删除索引" class="headerlink" title="5.4 删除索引"></a>5.4 删除索引</h2><p>删除blog1</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">DELETE http<span class="token operator">:</span><span class="token comment">//192.168.45.110:9200/blog1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-5-创建文档"><a href="#5-5-创建文档" class="headerlink" title="5.5 创建文档"></a>5.5 创建文档</h2><p>给类型为hello的创建一个文本</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POST http<span class="token operator">:</span><span class="token comment">//192.168.45.110:9200/blog12/hello/1</span>请求体<span class="token punctuation">{</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"ElasticSearch是一个基于Lucene的搜索服务器"</span><span class="token punctuation">,</span>    <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。 Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引 擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-6-查询文档"><a href="#5-6-查询文档" class="headerlink" title="5.6 查询文档"></a>5.6 查询文档</h2><pre class="line-numbers language-none"><code class="language-none">GET http://192.168.45.110:9200/blog12/hello/1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"blog12"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"found"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"ElasticSearch是一个基于Lucene的搜索服务器"</span><span class="token punctuation">,</span>        <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。 Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引 擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-7-修改文档"><a href="#5-7-修改文档" class="headerlink" title="5.7 修改文档"></a>5.7 修改文档</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json">POST http<span class="token operator">:</span><span class="token comment">//192.168.45.110:9200/blog12/hello/1</span>请求体<span class="token punctuation">{</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"【修改】ElasticSearch是一个基于Lucene的搜索服务器"</span><span class="token punctuation">,</span>    <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"【修改】它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。 Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引 擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看</p><p><img src="https://s2.loli.net/2022/04/14/ON2eMwXZBHkJhpo.png" alt="image-20220414134220206"></p><h2 id="5-8-删除文档"><a href="#5-8-删除文档" class="headerlink" title="5.8 删除文档"></a>5.8 删除文档</h2><pre class="line-numbers language-none"><code class="language-none">DELETE http://192.168.45.110:9200/blog12/hello/1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-9-查询文档"><a href="#5-9-查询文档" class="headerlink" title="5.9 查询文档"></a>5.9 查询文档</h2><pre class="line-numbers language-none"><code class="language-none">POST http://192.168.45.110:9200/blog12/hello/_search请求体{    "query": { // 查询  固定写法        "query_string": { // 查询字符串            "default_field": "title", // 查询field            "query": "搜索服务器" // 查询文本        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-none"><code class="language-none">{    "took": 236,    "timed_out": false,    "_shards": {        "total": 5,        "successful": 5,        "skipped": 0,        "failed": 0    },    "hits": {        "total": 1,        "max_score": 1.4384104,        "hits": [            {                "_index": "blog12",                "_type": "hello",                "_id": "1",                "_score": 1.4384104,                "_source": {                    "id": 1,                    "title": "【修改】ElasticSearch是一个基于Lucene的搜索服务器",                    "content": "【修改】它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。 Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引 擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。"                }            }        ]    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>将搜索内容”搜索服务器”修改为”钢索”，同样也能搜索到文档，该原因会在下面讲解中得到答案</p><pre class="line-numbers language-none"><code class="language-none">{    "query": {        "query_string": {            "default_field": "title",            "query": "钢索"        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果还能查询到</p><p><strong>原因：</strong></p><p>钢索 -&gt; “钢”， “索”，搜索是分成两个词，注意Standard标准分词器，会把汉字每个字一个词存到索引库中的tilte，也是按照Standard进行的分词所以搜索钢索能搜到这个document</p><h2 id="5-10-查询文档-term查询"><a href="#5-10-查询文档-term查询" class="headerlink" title="5.10  查询文档-term查询"></a>5.10  查询文档-term查询</h2><pre class="line-numbers language-none"><code class="language-none">POST http://192.168.45.110:9200/blog12/hello/_search请求体{    "query": {        "query_string": {            "default_field": "content",            "query": "搜索服务器"        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><p><img src="https://s2.loli.net/2022/04/14/tzOymisPR3T5pLE.png" alt="image-20220414175653804"></p><p><strong>query_string</strong>：搜索之前对搜索的关键词分词</p><p><strong>term</strong>：对搜索的关键词不分词</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POST http<span class="token operator">:</span><span class="token comment">//192.168.45.110:9200/blog12/hello/_search</span>请求体<span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"搜"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>这样有结果   POST http<span class="token operator">:</span><span class="token comment">//192.168.45.110:9200/blog12/hello/_search</span>请求体<span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"搜索"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>这样没结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六-IK分词器"><a href="#六-IK分词器" class="headerlink" title="六.IK分词器"></a>六.IK分词器</h1><h2 id="6-1-IK分词器简介"><a href="#6-1-IK分词器简介" class="headerlink" title="6.1 IK分词器简介"></a>6.1 IK分词器简介</h2><p>IK分词器3.0的特性如下：</p><p>1）采用了特有的“正向迭代最细粒度切分算法“，具有60万字/秒的高速处理能力。 </p><p>2）采用了多子处理器分析模式，支持：英文字母（IP地址、Email、URL）、数字（日期，常用中文数量词，罗马数字，科</p><p>学计数法），中文词汇（姓名、地名处理）等分词处理。</p><p> 3）对中英联合支持不是很好,在这方面的处理比较麻烦.需再做一次查询,同时是支持个人词条的优化的词典存储，更小的内存占用。</p><p> 4）支持用户词典扩展定义。</p><p> 5）针对Lucene全文检索优化的查询分析器IKQueryParser；采用歧义分析算法优化查询关键字的搜索排列组合，能极大的提高Lucene检索的命中率。</p><h2 id="6-2-IK分词器安装"><a href="#6-2-IK分词器安装" class="headerlink" title="6.2 IK分词器安装"></a>6.2 IK分词器安装</h2><h3 id="6-2-1-安装"><a href="#6-2-1-安装" class="headerlink" title="6.2.1 安装"></a>6.2.1 安装</h3><p>(1)安装ik分词器</p><p>IK分词器下载地址<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>将ik分词器上传到服务器上，然后解压，并改名字为ik</p><pre class="line-numbers language-none"><code class="language-none">unzip elasticsearch-analysis-ik-5.6.8.zipmv elasticsearch ik// 复制到es容器该目录docker cp ./ik kkb_es:/usr/share/elasticsearch/plugins// 重启docker restart es<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现没启动起来，查看docker日志的信息</p><pre class="line-numbers language-none"><code class="language-none">docker logs es<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20220413090930749.png" alt="image-20220413090930749"></p><p>网上没找到解决方法，先查看一下容器的详细信息</p><pre class="line-numbers language-none"><code class="language-none">docker inspect es<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>记得我们之前是吧ik拷贝到plugins目录里面，找到这个目录</p><p><img src="https://s2.loli.net/2022/04/13/mxjIMoVwkDa1iHZ.png" alt="image-20220413094427676"></p><pre class="line-numbers language-none"><code class="language-none">[root@localhost plugins]# lsik  ik-analyzer删除这两个文件[root@localhost plugins]# rm -rf ik[root@localhost plugins]# rm -rf ik-analyzer/重新启动es[root@localhost plugins]# docker start eses[root@localhost plugins]# docker psCONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                            NAMES38f993e4b549        redis                 "docker-entrypoint.s…"   18 months ago       Up 20 hours         0.0.0.0:6379-&gt;6379/tcp                           redisb8d9b4e75952        elasticsearch:6.6.2   "/usr/local/bin/dock…"   19 months ago       Up 8 seconds        0.0.0.0:9200-&gt;9200/tcp, 0.0.0.0:9300-&gt;9300/tcp   es8733c19e1c37        mysql:5.7             "docker-entrypoint.s…"   19 months ago       Up 11 days          0.0.0.0:3306-&gt;3306/tcp, 33060/tcp                lg_mysql启动成功  网上说可能是ik分词器的版本不兼容 当前es版本6.6.2 分词器也下6.6.2的 官网已经下好了 在此执行一遍上述操作解压到某个指定目录unzip -d ik elasticsearch-analysis-ik-6.6.2.zipdocker复制宿主机的容器都某个目录docker cp ./ik es:/usr/share/elasticsearch/plugins重启查看发现成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-3-测试"><a href="#6-2-3-测试" class="headerlink" title="6.2.3 测试"></a>6.2.3 测试</h3><p>使用apifox测试，因版本不同可能请求参数格式也会改变，具体参照官网</p><p><a href="http://192.168.45.110:9200/_analyze?pretty=true">http://192.168.45.110:9200/_analyze?pretty=true</a>  请求方法post</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"analyzer"</span><span class="token operator">:</span><span class="token string">"ik_smart"</span><span class="token punctuation">,</span>    <span class="token property">"text"</span><span class="token operator">:</span><span class="token string">"没有故事的结局，终将成为虚妄"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解释： <strong>_analyze</strong>: 进行分词</p><p>​            <strong>pretty=true</strong>： 结果进行格式化 输出更美观</p><p>​            <strong>analyzer</strong>：选用的分词器以及粒度   <strong>ik_smart</strong>粗粒度   <strong>ik_max_word</strong>细粒度</p><p>​            <strong>text</strong>： 需要分词的文本</p><p><img src="https://s2.loli.net/2022/04/13/BqRE2lJ97ULZOrY.png" alt="image-20220413134627194"></p><p>结果</p><pre class="line-numbers language-none"><code class="language-none">{    "tokens": [        {            "token": "没有",            "start_offset": 0,            "end_offset": 2,            "type": "CN_WORD",            "position": 0        },        {            "token": "结局",            "start_offset": 2,            "end_offset": 4,            "type": "CN_WORD",            "position": 1        },        {            "token": "的",            "start_offset": 4,            "end_offset": 5,            "type": "CN_CHAR",            "position": 2        },        {            "token": "故事",            "start_offset": 5,            "end_offset": 7,            "type": "CN_WORD",            "position": 3        },        {            "token": "终将",            "start_offset": 8,            "end_offset": 10,            "type": "CN_WORD",            "position": 4        },        {            "token": "成为",            "start_offset": 10,            "end_offset": 12,            "type": "CN_WORD",            "position": 5        },        {            "token": "虚妄",            "start_offset": 12,            "end_offset": 14,            "type": "CN_WORD",            "position": 6        }    ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七-Kibana使用-掌握DSL语句"><a href="#七-Kibana使用-掌握DSL语句" class="headerlink" title="七.Kibana使用-掌握DSL语句"></a>七.Kibana使用-掌握DSL语句</h1><h2 id="7-1-优势"><a href="#7-1-优势" class="headerlink" title="7.1 优势"></a>7.1 优势</h2><p>Kibana 可以使大数据通俗易懂。它很简单，基于浏览器的界面便于您快速创建和分享动态数据仪表板来追踪 Elasticsearch 的实时数据变化。</p><h2 id="7-2-kibana安装"><a href="#7-2-kibana安装" class="headerlink" title="7.2 kibana安装"></a>7.2 kibana安装</h2><p>还是使用docker安装</p><h3 id="7-2-1拉取镜像"><a href="#7-2-1拉取镜像" class="headerlink" title="7.2.1拉取镜像"></a>7.2.1拉取镜像</h3><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker pull docker.io/kibana:6.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-2-2-安装kibana容器"><a href="#7-2-2-安装kibana容器" class="headerlink" title="7.2.2 安装kibana容器"></a>7.2.2 安装kibana容器</h3><pre class="line-numbers language-none"><code class="language-none">docker run -it -d -e ELASTICSEARCH_URL=http://192.168.45.110:9200 --name kibana -p 5601:5601 kibana:6.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ELASTICSEARCH_URL=<a href="http://192.168.45.110:9200:：是指链接的ES地址">http://192.168.45.110:9200:：是指链接的ES地址</a></p><p>restart=always:每次服务都会重启，也就是开启启动</p><p>5601:5601:端口号</p><p>查看是否启动</p><pre class="line-numbers language-none"><code class="language-none">docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果后续需要修改kibana中连接es的地址</p><pre class="line-numbers language-none"><code class="language-none">进入容器docker exec -it kibana /bin/bash修改kibana.ymlvi config/kibana.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/04/13/LRNqhEIHav9Fx6g.png" alt="image-20220413152939835"></p><p>找到之后修改   重启kibana就行了</p><h3 id="7-2-3-访问测试"><a href="#7-2-3-访问测试" class="headerlink" title="7.2.3 访问测试"></a>7.2.3 访问测试</h3><p>访问<a href="http://192.168.45.110:5601/">http://192.168.45.110:5601/</a></p><p><img src="https://s2.loli.net/2022/04/13/IXBmSRG9H6D2adN.png" alt="image-20220413153314169"></p><h2 id="7-3-Kibana使用"><a href="#7-3-Kibana使用" class="headerlink" title="7.3 Kibana使用"></a>7.3 Kibana使用</h2><h3 id="7-3-1-配置索引"><a href="#7-3-1-配置索引" class="headerlink" title="7.3.1 配置索引"></a>7.3.1 配置索引</h3><p> 要使用Kibana，您必须至少配置一个索引。索引用于标识Elasticsearch索引以运行搜索和分析。它们还</p><p>用于配置字段。</p><p><img src="https://s2.loli.net/2022/05/05/jct5ZeaYiQsuNB6.png" alt="image-20220505110121541"></p><p>点击就行了</p><p><img src="https://s2.loli.net/2022/05/05/mf9RWgjvNyEqCnw.png" alt="image-20220505110303768"></p><p>到这就算成功创建索引了</p><h3 id="7-3-2数据搜索"><a href="#7-3-2数据搜索" class="headerlink" title="7.3.2数据搜索"></a>7.3.2数据搜索</h3><p>Discover为数据搜索部分，可以对日志信息进行搜索操作。</p><p><img src="https://s2.loli.net/2022/05/05/Lw1tkYhD2Xe3JRd.png" alt="image-20220505110838324"></p><p>还可以添加过滤条件  Add a filter</p><p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20220505111322862.png" alt="image-20220505111322862"></p><h2 id="7-4-DSL语句使用"><a href="#7-4-DSL语句使用" class="headerlink" title="7.4 DSL语句使用"></a>7.4 DSL语句使用</h2><h3 id="7-4-1-介绍"><a href="#7-4-1-介绍" class="headerlink" title="7.4.1 介绍"></a>7.4.1 介绍</h3><p>Query DSL是一个Java开源框架用于构建类型安全的SQL查询语句。采用API代替传统的拼接字符串来构造查询语句。目前Querydsl支持的平台包括JPA,JDO，SQL，Java Collections，RDF，Lucene，Hibernate Search。elasticsearch提供了一整套基于JSON的DSL语言来定义查询。</p><h3 id="7-4-2-索引操作"><a href="#7-4-2-索引操作" class="headerlink" title="7.4.2 索引操作"></a>7.4.2 索引操作</h3><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><pre class="line-numbers language-none"><code class="language-none">ctrl+i 自动缩进 ctrl+enter 提交请求 down 打开自动补全菜单 enter或tab 选中项自动补全 esc 关闭补全菜单<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-查询所有索引"><a href="#1-查询所有索引" class="headerlink" title="(1) 查询所有索引"></a>(1) 查询所有索引</h4><pre class="line-numbers language-none"><code class="language-none">GET /_cat/indices?v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/d4Uaz8w1XlMhvYu.png" alt="image-20220505112840738"></p><h4 id="2-创建索引"><a href="#2-创建索引" class="headerlink" title="(2) 创建索引"></a>(2) 创建索引</h4><pre class="line-numbers language-none"><code class="language-none">#创建索引PUT /user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/U2SiaZ8wElX6xWH.png" alt="image-20220505113227751"></p><h4 id="3-删除索引"><a href="#3-删除索引" class="headerlink" title="(3) 删除索引"></a>(3) 删除索引</h4><pre class="line-numbers language-none"><code class="language-none">#删除索引DELETE /user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/hg7NmdKJrqsC1uD.png" alt="image-20220505113305680"></p><h4 id="4-创建映射"><a href="#4-创建映射" class="headerlink" title="(4) 创建映射"></a>(4) 创建映射</h4><pre class="line-numbers language-none"><code class="language-none">#创建映射PUT /userPUT /user/userinfo/_mapping{  "properties": {    "name": {      "type": "text",      "analyzer": "ik_smart",      "search_analyzer": "ik_smart"    },    "city": {      "type": "text",      "analyzer": "ik_smart",      "search_analyzer": "ik_smart"    },    "age": {      "type": "long"    },    "description": {      "type": "text",      "analyzer": "ik_smart",      "search_analyzer": "ik_smart"    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/J4aCstdroWcVG1j.png" alt="image-20220505113725481"></p><h4 id="5-创建文档"><a href="#5-创建文档" class="headerlink" title="(5) 创建文档"></a>(5) 创建文档</h4><pre class="line-numbers language-none"><code class="language-none">#创建文档PUT /user/userinfo/1{  "name": "李四",  "age": 22,  "city": "深圳",  "description": "李四来自湖北武汉！"}#新增文档数据 id=2 PUT /user/userinfo/2 {   "name":"王五",   "age":35,   "city":"深圳",   "description":"王五家住在深圳！" }#新增文档数据 id=3 PUT /user/userinfo/3{  "name": "张三",  "age": 19,  "city": "深圳",  "description": "在深圳打工，来自湖北武汉"}#新增文档数据 id=4 PUT /user/userinfo/4 {   "name":"张三丰",   "age":66,  "city":"武汉",   "description":"在武汉读书，家在武汉！"   }#新增文档数据 id=5 PUT /user/userinfo/5 {   "name":"赵子龙",   "age":77,   "city":"广州",   "description":"赵子龙来自深圳宝安，但是在广州工作！", "address":"广东省茂名市"   }#新增文档数据 id=6 PUT /user/userinfo/6 {   "name":"赵毅",   "age":55,   "city":"广州",   "description":"赵毅来自广州白云区，从事电子商务8年！"   }#新增文档数据 id=7 PUT /user/userinfo/7{  "name": "赵哈哈",  "age": 57,  "city": "武汉",  "description": "武汉赵哈哈，在深圳打工已有半年了，月薪7500！"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-修改数据"><a href="#5-修改数据" class="headerlink" title="(5) 修改数据"></a>(5) 修改数据</h4><h5 id="a-全部替换"><a href="#a-全部替换" class="headerlink" title="a.全部替换"></a>a.全部替换</h5><p>更新数据可以使用之前的增加操作,这种操作会将整个数据替换掉</p><pre class="line-numbers language-none"><code class="language-none">#更新数据,id=4 PUT /user/userinfo/4{  "name": "张三丰",  "description": "在武汉读书，家在武汉！在深圳工作！"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/6ygxJ4WPUm5kSDw.png" alt="image-20220505115151398"></p><h5 id="b-更新操作"><a href="#b-更新操作" class="headerlink" title="b.更新操作"></a>b.更新操作</h5><p>没改的不变</p><pre class="line-numbers language-none"><code class="language-none">#恢复文档数据 id=4 PUT /user/userinfo/4{  "name": "张三丰",  "age": 66,  "city": "武汉",  "description": "在武汉读书，家在武汉！"}#使用POST更新某个域的数据 POST /user/userinfo/4/_update{  "doc": {    "name": "张三丰",    "description": "在武汉读书，家在武汉！在深圳工作！"  }}#查看GET /user/userinfo/4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/IVtFpi8S4mLTAwJ.png" alt="image-20220505115537641"></p><h4 id="6-删除Document"><a href="#6-删除Document" class="headerlink" title="(6) 删除Document"></a>(6) 删除Document</h4><pre class="line-numbers language-none"><code class="language-none">#删除数据 DELETE user/userinfo/7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="7-查询"><a href="#7-查询" class="headerlink" title="(7) 查询"></a>(7) 查询</h4><h5 id="1-查询所有"><a href="#1-查询所有" class="headerlink" title="1.查询所有"></a>1.查询所有</h5><pre class="line-numbers language-none"><code class="language-none">#查询所有GET /user/_search<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-单个查询"><a href="#2-单个查询" class="headerlink" title="2. 单个查询"></a>2. 单个查询</h5><pre class="line-numbers language-none"><code class="language-none">#根据ID查询 GET /user/userinfo/2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-Sort排序"><a href="#3-Sort排序" class="headerlink" title="3.Sort排序"></a>3.Sort排序</h5><pre class="line-numbers language-DSL" data-language="DSL"><code class="language-DSL">#搜索排序 GET /user/_search{  "sort": {    "age": {      "order": "desc"    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-分页"><a href="#4-分页" class="headerlink" title="4.分页"></a>4.分页</h5><pre class="line-numbers language-DSL" data-language="DSL"><code class="language-DSL">#分页实现 GET /user/_search{  "sort": {    "age": {      "order": "desc"    }  },  "from": 0,  "size": 3}from:从下N的记录开始查询size:每页显示条数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-查询模式"><a href="#8-查询模式" class="headerlink" title="(8) 查询模式"></a>(8) 查询模式</h4><h5 id="1-term查询"><a href="#1-term查询" class="headerlink" title="1.term查询"></a>1.term查询</h5><p>term主要用于分词精确匹配，如字符串、数值、日期等（不适合情况：1.列中除英文字符外有其它值 2.字符串值中有冒号或中文 3.系统自带属性如_version）</p><pre class="line-numbers language-none"><code class="language-none">#查询-term 不分词GET _search{  "query": {    "term": {      "city": "武汉"    }  }} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/ALagUK3pXhBxQRP.png" alt="image-20220505140046850"></p><h5 id="2-terms查询"><a href="#2-terms查询" class="headerlink" title="2.terms查询"></a>2.terms查询</h5><pre class="line-numbers language-none"><code class="language-none">#查询-terms 部分词GET _search{  "query": {    "terms": {      "city": [        "武汉",        "深圳"        ]    }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/XSuTwWcfnIYZ2Ct.png" alt="image-20220505140028254"></p><h5 id="3-match查询"><a href="#3-match查询" class="headerlink" title="3.match查询"></a>3.match查询</h5><pre class="line-numbers language-none"><code class="language-none">#查询-term 分词  分词根据自己创建的mapping分词器GET _search{  "query": {    "match": {      "city": "武汉深圳"    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/PAxNbmHel7aEnR4.png" alt="image-20220505140127767"></p><h5 id="4-query-string查询"><a href="#4-query-string查询" class="headerlink" title="4.query_string查询"></a>4.query_string查询</h5><pre class="line-numbers language-none"><code class="language-none">#query_string查询 分词GET _search{  "query": {    "query_string": {      "default_field": "city",      "query": "广州武汉"    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/QfieLDrOR6MH1XJ.png" alt="image-20220505140552915"></p><h5 id="5-range-查询"><a href="#5-range-查询" class="headerlink" title="5.range 查询"></a>5.range 查询</h5><p>range过滤允许我们按照指定范围查找一批数据。例如我们查询年龄范围</p><pre class="line-numbers language-none"><code class="language-none">#-range 范围过滤 #gt表示&gt; gte表示=&gt; #lt表示&lt; lte表示&lt;= GET _search{  "query": {    "range": {      "age": {        "gte": 30,        "lte": 57      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/a1fUZrOBXtD4nj5.png" alt="image-20220505140801546"></p><h5 id="6-exists过滤"><a href="#6-exists过滤" class="headerlink" title="6.exists过滤"></a>6.exists过滤</h5><p>exists 过滤可以用于查找拥有某个域的数据</p><pre class="line-numbers language-none"><code class="language-none">#搜索 exists：是指包含某个域的数据检索 GET _search{  "query": {    "exists": {      "field": "address"    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/eVmlI2xrbPoU7ND.png" alt="image-20220505140947729"></p><h5 id="7-bool-查询"><a href="#7-bool-查询" class="headerlink" title="7.bool 查询"></a>7.bool 查询</h5><p>bool 可以用来合并多个条件查询结果的布尔逻辑，它包含一下操作符：</p><ul><li>must : 多个查询条件的完全匹配,相当于 and。</li><li>must_not : 多个查询条件的相反匹配，相当于 not。</li><li>should : 至少有一个查询条件匹配, 相当于 or。</li></ul><p>这些参数可以分别继承一个过滤条件或者一个过滤条件的数组：</p><pre class="line-numbers language-none"><code class="language-none">#过滤搜索 bool #must : 多个查询条件的完全匹配,相当于 and。 #must_not : 多个查询条件的相反匹配，相当于 not。 #should : 至少有一个查询条件匹配, 相当于 or。 GET _search{  "query": {    "bool": {      "must": [        {          "term": {            "city": {              "value": "深圳"            }          }        },        {          "range": {            "age": {              "gte": 20,              "lte": 99            }          }        }      ]    }  }} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/ML9gwoNhUstT51E.png" alt="image-20220505141547665"></p><h5 id="8-match-all-查询"><a href="#8-match-all-查询" class="headerlink" title="8.match_all 查询"></a>8.match_all 查询</h5><p>可以查询到所有文档，是没有查询条件下的默认语句。</p><pre class="line-numbers language-none"><code class="language-none">#查询所有GET _search{  "query": {    "match_all": {}  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="9-prefix-查询"><a href="#9-prefix-查询" class="headerlink" title="9.prefix 查询"></a>9.prefix 查询</h5><p>以什么字符开头的，可以更简单地用 prefix </p><pre class="line-numbers language-none"><code class="language-none">#前缀匹配 prefix GET _search{  "query": {    "prefix": {      "name": {        "value": "赵"      }    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/46I1noMUxJFKqQ2.png" alt="image-20220505142012098"></p><h5 id="10-multi-match-查询"><a href="#10-multi-match-查询" class="headerlink" title="10.multi_match 查询"></a>10.multi_match 查询</h5><p>multi_match查询允许你做match查询的基础上同时搜索多个字段，在多个字段中同时查一个</p><pre class="line-numbers language-none"><code class="language-none">#多个域匹配搜索 GET _search{  "query": {    "multi_match": {      "query": "深圳",      "fields": [        "city",        "description"      ]    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/5OVMymhUFri4dtP.png" alt="image-20220505142250547"></p><p>因为过滤可以使用缓存，同时不计算分数，通常的规则是，使用查询（query）语句来进行 全文 搜索或者其它任何需要影响 相关性得分 的搜索。除此以外的情况都使用过滤（filters)</p><h1 id="八-Spring-Data-编程操作"><a href="#八-Spring-Data-编程操作" class="headerlink" title="八.Spring Data     编程操作"></a>八.Spring Data     编程操作</h1><h2 id="8-1-创建工程，导入坐标"><a href="#8-1-创建工程，导入坐标" class="headerlink" title="8.1 创建工程，导入坐标"></a>8.1 创建工程，导入坐标</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>transport<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>6.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-to-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个类来测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token comment">//创建索引</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>       <span class="token comment">// 创建Client连接对象</span>       <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里的名字是自己创建elasticsearch定义的名称，见下图</span>       <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span>                       <span class="token class-name">TransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.45.110"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//创建名称为blog2的索引</span>       client<span class="token punctuation">.</span><span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepareCreate</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//释放资源</span>       client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/05/wU9HyKIpqlDiG2u.png" alt="image-20220505144600486"></p><p>运行之后可以看一下创建没，可以看下图创建成功</p><p><img src="https://s2.loli.net/2022/05/05/nb3c1YCvNOIFLoU.png" alt="image-20220505172953488"></p><h2 id="8-2-创建映射mapping"><a href="#8-2-创建映射mapping" class="headerlink" title="8.2 创建映射mapping"></a>8.2 创建映射mapping</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token comment">//创建映射</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>       <span class="token comment">// 创建Client连接对象</span>       <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span>                       <span class="token class-name">TransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.45.110"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 添加映射</span>       <span class="token comment">/**        * 格式：        *  "mappings" : {}           "article" : {               "dynamic" : "false",               "properties" : {                   "id" :{ "type" : "string" },                   "content" : { "type" : "string" },                   "author" : { "type" : "string" }               }           }        }        */</span>       <span class="token class-name">XContentBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">XContentFactory</span><span class="token punctuation">.</span><span class="token function">jsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"integer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"store"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"store"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"analyzer"</span><span class="token punctuation">,</span> <span class="token string">"ik_smart"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"store"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"analyzer"</span><span class="token punctuation">,</span> <span class="token string">"ik_smart"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 创建映射</span>       <span class="token class-name">PutMappingRequest</span> mapping <span class="token operator">=</span> <span class="token class-name">Requests</span><span class="token punctuation">.</span><span class="token function">putMappingRequest</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>       client<span class="token punctuation">.</span><span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putMapping</span><span class="token punctuation">(</span>mapping<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">actionGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//释放资源</span>       client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如图</p><p><img src="https://s2.loli.net/2022/05/06/9BZg6bRMaxjEs4X.png" alt="image-20220506094231741"></p><p>这里有一个小问题</p><p><img src="https://s2.loli.net/2022/05/06/pSfzCVG6ZeTjtwr.png" alt="image-20220506093920599"></p><p>解决办法</p><p><img src="https://s2.loli.net/2022/05/06/ZyKtCEUOSXz9mji.png" alt="image-20220506093952270"></p><h2 id="8-3-创建文档document"><a href="#8-3-创建文档document" class="headerlink" title="8.3 创建文档document"></a>8.3 创建文档document</h2><h3 id="8-3-1-通过XContentBuilder"><a href="#8-3-1-通过XContentBuilder" class="headerlink" title="8.3.1 通过XContentBuilder"></a>8.3.1 通过XContentBuilder</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建Client连接对象</span>        <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span>                        <span class="token class-name">TransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.45.110"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个client对象</span>        <span class="token comment">//创建一个文档对象</span>        <span class="token class-name">XContentBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">XContentFactory</span><span class="token punctuation">.</span><span class="token function">jsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">startObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">2l</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"北方入秋速度明显加快 多地降温幅度最多可达10度22222"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">,</span> <span class="token string">"阿联酋一架客机在纽约机场被隔离 10名乘客病倒"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">endObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把文档对象添加到索引库</span>        client<span class="token punctuation">.</span><span class="token function">prepareIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//设置索引名称</span>                <span class="token punctuation">.</span><span class="token function">setIndex</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">)</span>                <span class="token comment">//设置type</span>                <span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span>                <span class="token comment">//设置文档的id，如果不设置的话自动的生成一个id</span>                <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>                <span class="token comment">//设置文档信息</span>                <span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span>                <span class="token comment">//执行操作</span>                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭客户端</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><p><img src="https://s2.loli.net/2022/05/06/TlHGs9X753AyjcC.png" alt="image-20220506095321643"></p><h3 id="8-3-2-使用Jackson转换实体"><a href="#8-3-2-使用Jackson转换实体" class="headerlink" title="8.3.2 使用Jackson转换实体"></a>8.3.2 使用Jackson转换实体</h3><h4 id="1-创建实体"><a href="#1-创建实体" class="headerlink" title="(1)创建实体"></a>(1)创建实体</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此之前引入一个lombok</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-添加jackson依赖"><a href="#2-添加jackson依赖" class="headerlink" title="(2)添加jackson依赖"></a>(2)添加jackson依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="(3)代码实现"></a>(3)代码实现</h4><pre class="line-numbers language-none"><code class="language-none">@Test    public void testAddDocument3() throws Exception {        // 创建Client连接对象        Settings settings = Settings.builder().put("cluster.name", "my-elasticsearch").build();        TransportClient client = new PreBuiltTransportClient(settings)                .addTransportAddress(new                        TransportAddress(InetAddress.getByName("192.168.45.110"), 9300));        for (int i = 4; i &lt; 100; i++) {            //创建一个Article对象            Article article = new Article();            //设置对象的属性            article.setId(i);            article.setTitle("女护士路遇昏迷男子跪地抢救：救人是职责更是本能" + i);            article.setContent("江西变质营养餐事件已致24人就医 多名官员被调查" + i);            //把article对象转换成json格式的字符串。            ObjectMapper objectMapper = new ObjectMapper();            String jsonDocument = objectMapper.writeValueAsString(article);            System.out.println(jsonDocument);            //使用client对象把文档写入索引库            client.prepareIndex("blog2","article", i + "")                    .setSource(jsonDocument, XContentType.JSON)                    .get();        }        //关闭客户端        client.close();    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><p><img src="https://s2.loli.net/2022/05/06/j9Qre4uS2fIvwE8.png" alt="image-20220506101001552"></p><h2 id="8-4-文档查询"><a href="#8-4-文档查询" class="headerlink" title="8.4 文档查询"></a>8.4 文档查询</h2><h3 id="8-4-1-termQuery"><a href="#8-4-1-termQuery" class="headerlink" title="8.4.1 termQuery"></a>8.4.1 termQuery</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryByTerm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>      <span class="token comment">// 创建Client连接对象</span>      <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span>                      <span class="token class-name">TransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.45.110"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//创建一个QueryBuilder对象</span>      <span class="token comment">//参数1：要搜索的字段</span>      <span class="token comment">//参数2：要搜索的关键词</span>      <span class="token class-name">QueryBuilder</span> queryBuilder <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"女护士"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//执行查询</span>      <span class="token class-name">SearchResponse</span> searchResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">prepareSearch</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">setTypes</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//取查询结果</span>      <span class="token class-name">SearchHits</span> searchHits <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//取查询结果的总记录数</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果总记录数："</span> <span class="token operator">+</span> searchHits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//查询结果列表</span>      <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SearchHit</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> searchHits<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">SearchHit</span> searchHit <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//打印文档对象，以json格式输出</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>searchHit<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//取文档的属性</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------文档的属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> document <span class="token operator">=</span> searchHit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">//关闭client</span>      client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部分结果</p><pre class="line-numbers language-none"><code class="language-none">查询结果总记录数：96{"id":4,"title":"女护士路遇昏迷男子跪地抢救：救人是职责更是本能4","content":"江西变质营养餐事件已致24人就医 多名官员被调查4"}-----------文档的属性4女护士路遇昏迷男子跪地抢救：救人是职责更是本能4江西变质营养餐事件已致24人就医 多名官员被调查4{"id":6,"title":"女护士路遇昏迷男子跪地抢救：救人是职责更是本能6","content":"江西变质营养餐事件已致24人就医 多名官员被调查6"}-----------文档的属性6女护士路遇昏迷男子跪地抢救：救人是职责更是本能6江西变质营养餐事件已致24人就医 多名官员被调查6{"id":15,"title":"女护士路遇昏迷男子跪地抢救：救人是职责更是本能15","content":"江西变质营养餐事件已致24人就医 多名官员被调查15"}-----------文档的属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-2-QueryString"><a href="#8-4-2-QueryString" class="headerlink" title="8.4.2 QueryString"></a>8.4.2 QueryString</h3><p>就改了这个其余的不变</p><pre class="line-numbers language-none"><code class="language-none">//创建一个QueryBuilder对象QueryBuilder queryBuilder = QueryBuilders.queryStringQuery("美丽的女护士").defaultField("title");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>部分结果</p><pre class="line-numbers language-none"><code class="language-none">查询结果总记录数：96{"id":4,"title":"女护士路遇昏迷男子跪地抢救：救人是职责更是本能4","content":"江西变质营养餐事件已致24人就医 多名官员被调查4"}-----------文档的属性4女护士路遇昏迷男子跪地抢救：救人是职责更是本能4江西变质营养餐事件已致24人就医 多名官员被调查4{"id":6,"title":"女护士路遇昏迷男子跪地抢救：救人是职责更是本能6","content":"江西变质营养餐事件已致24人就医 多名官员被调查6"}-----------文档的属性6女护士路遇昏迷男子跪地抢救：救人是职责更是本能6江西变质营养餐事件已致24人就医 多名官员被调查6{"id":15,"title":"女护士路遇昏迷男子跪地抢救：救人是职责更是本能15","content":"江西变质营养餐事件已致24人就医 多名官员被调查15"}-----------文档的属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-3-MatchQuery"><a href="#8-4-3-MatchQuery" class="headerlink" title="8.4.3 MatchQuery"></a>8.4.3 MatchQuery</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">QueryBuilder</span> queryBuilder <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"美丽的女护士"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果是一样的</p><h3 id="8-4-4-重构查询方法"><a href="#8-4-4-重构查询方法" class="headerlink" title="8.4.4 重构查询方法"></a>8.4.4 重构查询方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//执行查询</span><span class="token class-name">SearchResponse</span> searchResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">prepareSearch</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTypes</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">)</span><span class="token comment">//设置分页信息</span><span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//每页显示的行数</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-none"><code class="language-none">查询结果总记录数：96{"id":4,"title":"女护士路遇昏迷男子跪地抢救：救人是职责更是本能4","content":"江西变质营养餐事件已致24人就医 多名官员被调查4"}-----------文档的属性4女护士路遇昏迷男子跪地抢救：救人是职责更是本能4江西变质营养餐事件已致24人就医 多名官员被调查4{"id":6,"title":"女护士路遇昏迷男子跪地抢救：救人是职责更是本能6","content":"江西变质营养餐事件已致24人就医 多名官员被调查6"}-----------文档的属性6女护士路遇昏迷男子跪地抢救：救人是职责更是本能6江西变质营养餐事件已致24人就医 多名官员被调查6{"id":15,"title":"女护士路遇昏迷男子跪地抢救：救人是职责更是本能15","content":"江西变质营养餐事件已致24人就医 多名官员被调查15"}-----------文档的属性15女护士路遇昏迷男子跪地抢救：救人是职责更是本能15江西变质营养餐事件已致24人就医 多名官员被调查15{"id":20,"title":"女护士路遇昏迷男子跪地抢救：救人是职责更是本能20","content":"江西变质营养餐事件已致24人就医 多名官员被调查20"}-----------文档的属性20女护士路遇昏迷男子跪地抢救：救人是职责更是本能20江西变质营养餐事件已致24人就医 多名官员被调查20{"id":27,"title":"女护士路遇昏迷男子跪地抢救：救人是职责更是本能27","content":"江西变质营养餐事件已致24人就医 多名官员被调查27"}-----------文档的属性27女护士路遇昏迷男子跪地抢救：救人是职责更是本能27江西变质营养餐事件已致24人就医 多名官员被调查27<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-5-通过id查询"><a href="#8-4-5-通过id查询" class="headerlink" title="8.4.5 通过id查询"></a>8.4.5 通过id查询</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">QueryBuilder</span> queryBuilder <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">idsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIds</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-none"><code class="language-none">查询结果总记录数：1{"id":2,"title":"北方入秋速度明显加快 多地降温幅度最多可达10度22222","content":"阿联酋一架客机在纽约机场被隔离 10名乘客病倒"}-----------文档的属性2北方入秋速度明显加快 多地降温幅度最多可达10度22222阿联酋一架客机在纽约机场被隔离 10名乘客病倒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-5-结果高亮显示"><a href="#8-5-结果高亮显示" class="headerlink" title="8.5 结果高亮显示"></a>8.5 结果高亮显示</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">highlightSearchTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>       <span class="token comment">// 创建Client连接对象</span>       <span class="token class-name">Settings</span> settings <span class="token operator">=</span> <span class="token class-name">Settings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cluster.name"</span><span class="token punctuation">,</span> <span class="token string">"my-elasticsearch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">TransportClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreBuiltTransportClient</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">addTransportAddress</span><span class="token punctuation">(</span><span class="token keyword">new</span>                       <span class="token class-name">TransportAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"192.168.45.110"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">QueryBuilder</span> queryBuilder <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">multiMatchQuery</span><span class="token punctuation">(</span><span class="token string">"女护士"</span><span class="token punctuation">,</span>               <span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">HighlightBuilder</span> highlightBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HighlightBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       highlightBuilder<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       highlightBuilder<span class="token punctuation">.</span><span class="token function">preTags</span><span class="token punctuation">(</span><span class="token string">"&lt;em&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       highlightBuilder<span class="token punctuation">.</span><span class="token function">postTags</span><span class="token punctuation">(</span><span class="token string">"&lt;/em&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//执行查询</span>       <span class="token class-name">SearchResponse</span> searchResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">prepareSearch</span><span class="token punctuation">(</span><span class="token string">"blog2"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">setTypes</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">setQuery</span><span class="token punctuation">(</span>queryBuilder<span class="token punctuation">)</span>               <span class="token comment">//设置高亮信息</span>               <span class="token punctuation">.</span><span class="token function">highlighter</span><span class="token punctuation">(</span>highlightBuilder<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//取查询结果</span>       <span class="token class-name">SearchHits</span> searchHits <span class="token operator">=</span> searchResponse<span class="token punctuation">.</span><span class="token function">getHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//取查询结果的总记录数</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果总记录数："</span> <span class="token operator">+</span> searchHits<span class="token punctuation">.</span><span class="token function">getTotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//查询结果列表</span>       <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SearchHit</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> searchHits<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">SearchHit</span> searchHit <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//取文档的属性</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------文档的属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> document <span class="token operator">=</span> searchHit<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************高亮结果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HighlightField</span><span class="token punctuation">&gt;</span></span> highlightFields <span class="token operator">=</span>                   searchHit<span class="token punctuation">.</span><span class="token function">getHighlightFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// //取title高亮显示的结果</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>highlightFields<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HighlightField</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span>                   highlightFields<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":\t"</span> <span class="token operator">+</span>                       <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token comment">//关闭client</span>       client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部分结果</p><pre class="line-numbers language-none"><code class="language-none">查询结果总记录数：96-----------文档的属性4女护士路遇昏迷男子跪地抢救：救人是职责更是本能4江西变质营养餐事件已致24人就医 多名官员被调查4************高亮结果title:[&lt;em&gt;女护士&lt;/em&gt;路遇昏迷男子跪地抢救：救人是职责更是本能4]-----------文档的属性6女护士路遇昏迷男子跪地抢救：救人是职责更是本能6江西变质营养餐事件已致24人就医 多名官员被调查6************高亮结果title:[&lt;em&gt;女护士&lt;/em&gt;路遇昏迷男子跪地抢救：救人是职责更是本能6]-----------文档的属性15女护士路遇昏迷男子跪地抢救：救人是职责更是本能15江西变质营养餐事件已致24人就医 多名官员被调查15************高亮结果title:[&lt;em&gt;女护士&lt;/em&gt;路遇昏迷男子跪地抢救：救人是职责更是本能15]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="九-Spring-Data-ElasticSearch"><a href="#九-Spring-Data-ElasticSearch" class="headerlink" title="九.Spring Data ElasticSearch"></a>九.Spring Data ElasticSearch</h1><h2 id="9-1-简介"><a href="#9-1-简介" class="headerlink" title="9.1 简介"></a>9.1 简介</h2><p>Spring Data ElasticSearch 基于 spring data API 简化 elasticSearch操作，将原始操作elasticSearch的 客户端API 进行封装 。Spring Data为Elasticsearch项目提供集成搜索引擎。Spring Data Elasticsearch POJO的关键功能区域为中心的模型与Elastichsearch交互文档和轻松地编写一个存储库数据访问层。 </p><p>官方网站：<a href="http://projects.spring.io/spring-data-elasticsearch/">http://projects.spring.io/spring-data-elasticsearch/</a></p><h2 id="9-2-代码实现"><a href="#9-2-代码实现" class="headerlink" title="9.2 代码实现"></a>9.2 代码实现</h2><h3 id="9-2-1-添加依赖"><a href="#9-2-1-添加依赖" class="headerlink" title="9.2.1 添加依赖"></a>9.2.1 添加依赖</h3><pre class="line-numbers language-none"><code class="language-none">&lt;parent&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;       &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;       &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;   &lt;/parent&gt;   &lt;properties&gt;       &lt;java.version&gt;1.8&lt;/java.version&gt;   &lt;/properties&gt;   &lt;dependencies&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;           &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;           &lt;scope&gt;test&lt;/scope&gt;       &lt;/dependency&gt;   &lt;/dependencies&gt;   &lt;build&gt;       &lt;plugins&gt;           &lt;plugin&gt;               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;               &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;           &lt;/plugin&gt;       &lt;/plugins&gt;   &lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-2-启动器配置文件"><a href="#9-2-2-启动器配置文件" class="headerlink" title="9.2.2 启动器配置文件"></a>9.2.2 启动器配置文件</h3><pre class="line-numbers language-none"><code class="language-none">@SpringBootApplicationpublic class DemoApplication {    public static void main(String[] args) {        SpringApplication.run(DemoApplication.class, args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.yml</p><pre class="line-numbers language-none"><code class="language-none">spring:  data:    elasticsearch:      cluster-name: my-elasticsearch      cluster-nodes: 192.168.45.110:9300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-3-实体类"><a href="#9-2-3-实体类" class="headerlink" title="9.2.3 实体类"></a>9.2.3 实体类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName <span class="token operator">=</span> <span class="token string">"lx_blog"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"article"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Long</span><span class="token punctuation">,</span> store <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Text</span><span class="token punctuation">,</span> store <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> analyzer <span class="token operator">=</span> <span class="token string">"ik_smart"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Text</span><span class="token punctuation">,</span> store <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> analyzer <span class="token operator">=</span> <span class="token string">"ik_smart"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-4-编写Dao"><a href="#9-2-4-编写Dao" class="headerlink" title="9.2.4 编写Dao"></a>9.2.4 编写Dao</h3><p>方法命名规则查询的基本语法findBy + 属性 + 关键词 + 连接符</p><p><img src="https://s2.loli.net/2022/05/06/2bHIOpR8cyZivq9.png" alt="image-20220506173623583"></p><pre class="line-numbers language-none"><code class="language-none">public interface ArticleRepository extends ElasticsearchRepository&lt;Article,Long&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-2-5-测试类"><a href="#9-2-5-测试类" class="headerlink" title="9.2.5 测试类"></a>9.2.5 测试类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ArticleRepository</span> articleRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ElasticsearchTemplate</span> elasticsearchTemplate<span class="token punctuation">;</span><span class="token comment">// 批量增加 没有该index索引会自动创建</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> articles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Article</span> article <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            article<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            article<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"es摘抄小句"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            article<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"pring data elsaticsearch提供了三种构建查询模块的方式：\n"</span> <span class="token operator">+</span>                    <span class="token string">"\n"</span> <span class="token operator">+</span>                    <span class="token string">"基本的增删改查：继承spring data提供的接口就默认提供\n"</span> <span class="token operator">+</span>                    <span class="token string">"接口中声明方法：**无需实现类。**spring data根据方法名，自动生成实现类，方法名必须符合一定的规则"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            articles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        articleRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>articles<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><p><img src="../../AppData/Roaming/Typora/typora-user-images/image-20220506183613687.png" alt="image-20220506183613687"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteDocumentById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>       <span class="token comment">// articleRepository.deleteById(1l);</span>       <span class="token comment">//全部删除</span>       articleRepository<span class="token punctuation">.</span><span class="token function">deleteAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>       <span class="token comment">// 查询所有</span>       <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> articles <span class="token operator">=</span> articleRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       articles<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>a<span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>       <span class="token comment">// 通过id查询</span>       <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> articleRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">10l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Article</span> article <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>       <span class="token comment">// 使用QueryBuilders来进行查询</span>       <span class="token class-name">TermQueryBuilder</span> termQueryBuilder <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"摘抄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">&gt;</span></span> search <span class="token operator">=</span> articleRepository<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>termQueryBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>       search<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十-从数据库导入数据"><a href="#十-从数据库导入数据" class="headerlink" title="十.从数据库导入数据"></a>十.从数据库导入数据</h1><p>这里是按照我的一个legou项目导入数据,本项目调用数据库数据是通过feign调用 一你没有引入数据库依赖</p><h2 id="10-1-引入依赖"><a href="#10-1-引入依赖" class="headerlink" title="10.1 引入依赖"></a>10.1 引入依赖</h2><pre class="line-numbers language-none"><code class="language-none">&lt;parent&gt;       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;       &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;       &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;   &lt;/parent&gt;   &lt;properties&gt;       &lt;java.version&gt;1.8&lt;/java.version&gt;   &lt;/properties&gt;   &lt;dependencies&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;           &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;           &lt;scope&gt;test&lt;/scope&gt;       &lt;/dependency&gt;       &lt;dependency&gt;           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;           &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;       &lt;/dependency&gt;   &lt;/dependencies&gt;   &lt;build&gt;       &lt;plugins&gt;           &lt;plugin&gt;               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;               &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;           &lt;/plugin&gt;       &lt;/plugins&gt;   &lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-2-配置类"><a href="#10-2-配置类" class="headerlink" title="10.2 配置类"></a>10.2 配置类</h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span>    <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>      <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>elasticsearch      <span class="token key atrule">cluster-nodes</span><span class="token punctuation">:</span> 192.168.45.110<span class="token punctuation">:</span><span class="token number">9300</span>  <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>    <span class="token key atrule">rest</span><span class="token punctuation">:</span>      <span class="token key atrule">uris</span><span class="token punctuation">:</span> 192.168.45.110<span class="token punctuation">:</span><span class="token number">9200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token annotation punctuation">@EnableCircuitBreaker</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SearchApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-2-实体类"><a href="#10-2-实体类" class="headerlink" title="10.2 实体类"></a>10.2 实体类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>indexName <span class="token operator">=</span> <span class="token string">"goods_legou"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"docs_legou"</span><span class="token punctuation">,</span> shards <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> replicas <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span> <span class="token comment">//spuId</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Text</span><span class="token punctuation">,</span> analyzer <span class="token operator">=</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> all<span class="token punctuation">;</span> <span class="token comment">//用来搜索的字段，包括标题，分类和品牌</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Keyword</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> subTitle<span class="token punctuation">;</span> <span class="token comment">//卖点</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> brandId<span class="token punctuation">;</span><span class="token comment">// 品牌id</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> cid1<span class="token punctuation">;</span><span class="token comment">// 1级分类id</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> cid2<span class="token punctuation">;</span><span class="token comment">// 2级分类id</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> cid3<span class="token punctuation">;</span><span class="token comment">// 3级分类id</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span class="token comment">// 创建时间</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> price<span class="token punctuation">;</span><span class="token comment">// 价格</span>    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FieldType<span class="token punctuation">.</span>Keyword</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> skus<span class="token punctuation">;</span> <span class="token comment">//sku信息-&gt; json结构</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> specs<span class="token punctuation">;</span> <span class="token comment">//可搜索的规格参数,key:参数名，value：参数值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-3-dao类"><a href="#10-3-dao类" class="headerlink" title="10.3 dao类"></a>10.3 dao类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GoodsDao</span> <span class="token keyword">extends</span> <span class="token class-name">ElasticsearchRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="10-4-测试类"><a href="#10-4-测试类" class="headerlink" title="10.4 测试类"></a>10.4 测试类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">SearchApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticSearchTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ElasticsearchTemplate</span> elasticsearchTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建索引库</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//配置映射</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">putMapping</span><span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/07/9BbownacUmV58ZQ.png" alt="image-20220507102239444"></p><p>需要生成字符串的格式</p><pre class="line-numbers language-none"><code class="language-none">{       "_index" : "goods_legou",       "_type" : "docs_legou",       "_id" : "2",       "_score" : 1.0,       "_source" : {         "id" : 2,         "all" : "华为 G9 少年版  手机 手机通讯 电子书",         "subTitle" : "骁龙芯片！3GB运行内存！索尼1300万摄像头！&lt;a href='https://sale.jd.com/act/DhKrOjXnFcGL.html' target='_blank'&gt;华为新品全面上线，更多优惠猛戳》》&lt;/a&gt;",         "brandId" : 8557,         "cid1" : 74,         "cid2" : 75,         "cid3" : 1424,         "createTime" : 1524240000000,         "price" : [           6,           6,           6,           6,           7,           8         ],         "skus" : """[{"image":"","price":6,"id":27359021859,"title":"华为 G9 少年版 "},{"image":"","price":6,"id":27359021860,"title":"华为 G9 少年版 "},{"image":"","price":6,"id":27359021861,"title":"华为 G9 少年版 "},{"image":"","price":6,"id":27359021862,"title":"华为 G9 少年版 "},{"image":"","price":7,"id":27359021863,"title":"华为 G9 少年版 "},{"image":"","price":8,"id":27359021864,"title":"华为 G9 少年版 "}]""",         "specs" : {           "重量" : "以上",           "后置摄像头" : "以上",           "宽度" : "以上",           "字数" : "以上",           "作者" : "4",           "内存" : [             "8G",             "16G"           ],           "前置摄像头" : "以上"         }       }     },<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CategoryClient</span> categoryClient<span class="token punctuation">;</span> <span class="token comment">// 这些都是调用的feign拿的数据，可以直接从数据库获取</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SkuClient</span> skuClient<span class="token punctuation">;</span><span class="token comment">// 这些都是调用的feign拿的数据，可以直接从数据库获取</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SpuDetailClient</span> spuDetailClient<span class="token punctuation">;</span><span class="token comment">// 这些都是调用的feign拿的数据，可以直接从数据库获取</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SpecParamClient</span> specParamClient<span class="token punctuation">;</span><span class="token comment">// 这些都是调用的feign拿的数据，可以直接从数据库获取</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">GoodsDao</span> goodsDao<span class="token punctuation">;</span>    <span class="token comment">/**     * 根据spu构件索引类型实体类goods     * @param spu     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Goods</span> <span class="token function">buildGoods</span><span class="token punctuation">(</span><span class="token class-name">Spu</span> spu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//all</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> categoryClient<span class="token punctuation">.</span><span class="token function">queryNameByIds</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>spu<span class="token punctuation">.</span><span class="token function">getCid1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spu<span class="token punctuation">.</span><span class="token function">getCid2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spu<span class="token punctuation">.</span><span class="token function">getCid3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> all <span class="token operator">=</span> spu<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//skus</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sku</span><span class="token punctuation">&gt;</span></span> skus <span class="token operator">=</span> skuClient<span class="token punctuation">.</span><span class="token function">selectSkusBySpuId</span><span class="token punctuation">(</span>spu<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> prices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> skuList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Sku</span> sku <span class="token operator">:</span> skus<span class="token punctuation">)</span> <span class="token punctuation">{</span>            prices<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sku<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> skuMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            skuMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> sku<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            skuMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> sku<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            skuMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>sku<span class="token punctuation">.</span><span class="token function">getImages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> sku<span class="token punctuation">.</span><span class="token function">getImages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            skuMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">,</span> sku<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            skuList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>skuMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//specs</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> specs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SpuDetail</span> spuDetail <span class="token operator">=</span> spuDetailClient<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span>spu<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通用规格参数值</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> genericMap <span class="token operator">=</span> <span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">parseMap</span><span class="token punctuation">(</span>spuDetail<span class="token punctuation">.</span><span class="token function">getGenericSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//sku特有规格参数的值</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> specialMap <span class="token operator">=</span> <span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">nativeRead</span><span class="token punctuation">(</span>spuDetail<span class="token punctuation">.</span><span class="token function">getSpecialSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//查询分类对应的规格参数</span>        <span class="token class-name">SpecParam</span> specParam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpecParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        specParam<span class="token punctuation">.</span><span class="token function">setCid</span><span class="token punctuation">(</span>spu<span class="token punctuation">.</span><span class="token function">getCid3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        specParam<span class="token punctuation">.</span><span class="token function">setSearching</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpecParam</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> specParamClient<span class="token punctuation">.</span><span class="token function">selectSpecParamApi</span><span class="token punctuation">(</span>specParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SpecParam</span> param <span class="token operator">:</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//            //今后显示的名称</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//品牌，机身颜色</span>            <span class="token comment">//通用参数</span>            <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getGeneric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//通用参数</span>                value <span class="token operator">=</span> genericMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getNumeric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//数值类型需要加分段</span>                    value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">chooseSegment</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//特有参数</span>                value <span class="token operator">=</span> specialMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                value <span class="token operator">=</span> <span class="token string">"其他"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            specs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//把相关数据存入goods</span>        <span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goods<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>spu<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这里如果要加品牌，可以再写个BrandClient，根据id查品牌</span>        goods<span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>        goods<span class="token punctuation">.</span><span class="token function">setSubTitle</span><span class="token punctuation">(</span>spu<span class="token punctuation">.</span><span class="token function">getSubTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goods<span class="token punctuation">.</span><span class="token function">setBrandId</span><span class="token punctuation">(</span>spu<span class="token punctuation">.</span><span class="token function">getBrandId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goods<span class="token punctuation">.</span><span class="token function">setCid1</span><span class="token punctuation">(</span>spu<span class="token punctuation">.</span><span class="token function">getCid1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goods<span class="token punctuation">.</span><span class="token function">setCid2</span><span class="token punctuation">(</span>spu<span class="token punctuation">.</span><span class="token function">getCid2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goods<span class="token punctuation">.</span><span class="token function">setCid3</span><span class="token punctuation">(</span>spu<span class="token punctuation">.</span><span class="token function">getCid3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goods<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>spu<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goods<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">;</span>        goods<span class="token punctuation">.</span><span class="token function">setSkus</span><span class="token punctuation">(</span><span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>skuList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goods<span class="token punctuation">.</span><span class="token function">setSpecs</span><span class="token punctuation">(</span>specs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> goods<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">chooseSegment</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token class-name">SpecParam</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> val <span class="token operator">=</span> <span class="token class-name">NumberUtils</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token string">"其它"</span><span class="token punctuation">;</span>        <span class="token comment">// 保存数值段</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> segment <span class="token operator">:</span> p<span class="token punctuation">.</span><span class="token function">getSegments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> segs <span class="token operator">=</span> segment<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取数值范围</span>            <span class="token keyword">double</span> begin <span class="token operator">=</span> <span class="token class-name">NumberUtils</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span>segs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> end <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>segs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                end <span class="token operator">=</span> <span class="token class-name">NumberUtils</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span>segs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 判断是否在范围内</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;=</span> begin <span class="token operator">&amp;&amp;</span> val <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>segs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result <span class="token operator">=</span> segs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"以上"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result <span class="token operator">=</span> segs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"以下"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    result <span class="token operator">=</span> segment <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.5  4-5英寸</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 根据id删除索引     * @param id     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteIndex</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        goodsDao<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">SearchApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ESLoadDataTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">IndexService</span> indexService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SpuClient</span> spuClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">GoodsDao</span> goodsDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Spu</span><span class="token punctuation">&gt;</span></span> spus <span class="token operator">=</span> spuClient<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//spu转换成goods</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Goods</span><span class="token punctuation">&gt;</span></span> goods <span class="token operator">=</span> spus<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>spu <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>indexService<span class="token punctuation">.</span><span class="token function">buildGoods</span><span class="token punctuation">(</span>spu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//导入索引库</span>        goodsDao<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看结果</p><p><img src="https://s2.loli.net/2022/05/07/clCLMTpK4GUh3PW.png" alt="image-20220507113201874"></p><h1 id="十一-总结"><a href="#十一-总结" class="headerlink" title="十一.总结"></a>十一.总结</h1><p>ElasticSearch 是为了方便我们对海量数据进行的筛选，从而可以大大的减轻数据库的访问压力。</p><p>pring Data ElasticSearch则是对ElasticSearch 的封装，减少开发效率，Spring Data Elasticsearch POJO的关键功能区域为中心的模型与Elastichsearch交互文档和轻松地编写一个存储库数据访问层。 </p><h1 id="十二-ELK部署"><a href="#十二-ELK部署" class="headerlink" title="十二.ELK部署"></a>十二.ELK部署</h1><p><a href="https://blog.csdn.net/weixin_45103378/article/details/117032750">https://blog.csdn.net/weixin_45103378/article/details/117032750</a></p><pre class="line-numbers language-none"><code class="language-none">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \-e "discovery.type=single-node" \-e ES_JAVA_OPTS="-Xms64m -Xmx512m" \-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \-d elasticsearch:7.4.2docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.0.222:9200 -e "I18N_LOCALE=zh-CN" -p 5601:5601 \-d kibana:7.4.2docker cp kibana:/usr/share/kibana/config/kibana.yml /mydata/kibana/docker run -d --name kibana \-p 5601:5601 \-v /mydata/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml \kibana:7.4.2docker run -d -P --name logstash --net elk logstash:7.14.0# 拷贝数据docker cp logstash:/usr/share/logstash/config /mydata/logstash/docker cp logstash:/usr/share/logstash/data /mydata/logstash/docker cp logstash:/usr/share/logstash/pipeline /mydata/logstash/docker run -d --name logstash \-e ES_JAVA_OPTS="-Duser.timezone=Asia/Shanghai" \--privileged=true \-p 5044:5044 -p 9600:9600 \-v /mydata/logstash/data/:/usr/share/logstash/data \-v /mydata/logstash/config/:/usr/share/logstash/config \-v /mydata/logstash/pipeline/:/usr/share/logstash/pipeline \logstash:7.14.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KKB项目</title>
      <link href="/2021/09/05/kkb-jie-dan-ping-tai-zong-jie/"/>
      <url>/2021/09/05/kkb-jie-dan-ping-tai-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="一-目标"><a href="#一-目标" class="headerlink" title="一.目标"></a>一.目标</h1><p><img src="https://i.loli.net/2021/09/05/vGt64haRsVWk3ef.png" alt="image-20210905143200829"></p><p>这是一个kkb的接单平台，具体的内容就是实现学生导师的注册与使用功能</p><h2 id="详细解说"><a href="#详细解说" class="headerlink" title="详细解说"></a>详细解说</h2><p><img src="https://i.loli.net/2021/09/05/zhj9ZgpsFmNqPRS.png" alt="image-20210905143455005"></p><p>这是一个总的流程图，当中包含各个方面的流程需要的技术</p><h1 id="二-任务"><a href="#二-任务" class="headerlink" title="二.任务"></a>二.任务</h1><p>我负责的任务为</p><p>①账号管理（管理员、用户）；</p><p>②登录/注册；</p><p>③个人中心</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h2 id="1-账户管理"><a href="#1-账户管理" class="headerlink" title="1.账户管理"></a>1.账户管理</h2><p>账户管理分为管理员和用户</p><h3 id="管理员"><a href="#管理员" class="headerlink" title="管理员"></a>管理员</h3><p>管理员负责操作用户，相当于给角色赋予权限</p><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>用户分为：游客，导师，学生</p><p>因此分为四个角色</p><h2 id="2-登录与注册"><a href="#2-登录与注册" class="headerlink" title="2.登录与注册"></a>2.登录与注册</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><img src="https://i.loli.net/2021/09/05/oPeq1uGhLFNBawb.png" alt="image-20210905152735047"></p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p><img src="https://i.loli.net/2021/09/05/joULW9JnV72ypk1.png" alt="image-20210905152847172"></p><h2 id="3-个人中心"><a href="#3-个人中心" class="headerlink" title="3.个人中心"></a>3.个人中心</h2><p>个人中心里有该用户的各种项目展示</p><h1 id="三-实现"><a href="#三-实现" class="headerlink" title="三.实现"></a>三.实现</h1><h2 id="1-建表"><a href="#1-建表" class="headerlink" title="1.建表"></a>1.建表</h2><p>理清各个角色之间的关系，然后就可以建表了</p><p>根据前面的概述，这里分为六个表。</p><p>用户表：存储用户详细信息</p><p>角色表：存储相应角色信息</p><p>权限表：存储权限，比如学生权限，导师权限，管理员权限，然后根据相应权限展示相应页面</p><p>用户与角色关联表：相当于是一个中间表，用户对应相应角色</p><p>角色与权限关联表：也是一个中间表，角色对应相应权限</p><p>项目表：个人中心里面有展示用户的相应项目，所以需要一个项目表</p><p><img src="https://i.loli.net/2021/09/05/BktpGirEaQJ8dwv.png" alt="image-20210905174131699"></p><p>这是建表的格式，需要频繁的查询某个字段的话就建立一个索引。在这样的话就能提高效率</p><h2 id="2-需要用到的依赖"><a href="#2-需要用到的依赖" class="headerlink" title="2.需要用到的依赖"></a>2.需要用到的依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>kkb-parent-v2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kkb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kkb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>kkb-portal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>kkb-portal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dynamic-datasource-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--&lt;dependency&gt;--&gt;</span>        <span class="token comment">&lt;!--    &lt;groupId&gt;com.kkb&lt;/groupId&gt;--&gt;</span>        <span class="token comment">&lt;!--    &lt;artifactId&gt;kkb-mbg-plus&lt;/artifactId&gt;--&gt;</span>        <span class="token comment">&lt;!--&lt;/dependency&gt;--&gt;</span>        <span class="token comment">&lt;!-- project通用项目 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kkb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>kkb-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mongodb依赖配置--&gt;</span>        <span class="token comment">&lt;!--        &lt;dependency&gt;--&gt;</span>        <span class="token comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span>        <span class="token comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-data-mongodb&lt;/artifactId&gt;--&gt;</span>        <span class="token comment">&lt;!--        &lt;/dependency&gt;--&gt;</span>        <span class="token comment">&lt;!--集成消息队列--&gt;</span>        <span class="token comment">&lt;!--        &lt;dependency&gt;--&gt;</span>        <span class="token comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span>        <span class="token comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;--&gt;</span>        <span class="token comment">&lt;!--        &lt;/dependency&gt;--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 参数效验 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--集成druid连接池--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--Mysql数据库驱动--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--整合Knife4j--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--Flyway相关依赖--&gt;</span>        <span class="token comment">&lt;!--&lt;dependency&gt;            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;        &lt;/dependency&gt;--&gt;</span>        <span class="token comment">&lt;!--MinIO JAVA SDK--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--短信sdk--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aliyun-java-sdk-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aliyun-java-sdk-dysmsapi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--Flyway的Maven插件--&gt;</span>            <span class="token comment">&lt;!--&lt;plugin&gt;                &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;                &lt;artifactId&gt;flyway-maven-plugin&lt;/artifactId&gt;                &lt;version&gt;7.8.1&lt;/version&gt;                &lt;configuration&gt;                    &lt;url&gt;jdbc:mysql://8.140.125.207:3306/kkb?serverTimezone=Asia/Shanghai&lt;/url&gt;                    &lt;user&gt;kkb&lt;/user&gt;                    &lt;password&gt;kkb&lt;/password&gt;                &lt;/configuration&gt;                &lt;dependencies&gt;                    &lt;dependency&gt;                        &lt;groupId&gt;mysql&lt;/groupId&gt;                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;                        &lt;version&gt;8.0.20&lt;/version&gt;                    &lt;/dependency&gt;                &lt;/dependencies&gt;            &lt;/plugin&gt;--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">endpoints</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">exposure</span><span class="token punctuation">:</span>      <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token key atrule">endpoint</span><span class="token punctuation">:</span>  <span class="token key atrule">health</span><span class="token punctuation">:</span>    <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> / <span class="token comment">#项目的上下文路径</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> kkb<span class="token punctuation">-</span>portal  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/springcloud<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">131416</span>    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">initial-size</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment">#连接池初始化大小</span>      <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment">#最小空闲连接数</span>      <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">20</span> <span class="token comment">#最大连接数</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mybatis/<span class="token important">*.xml</span> <span class="token comment">#加载映射文件,需要在resources下创建mybatis包</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.kkb.kkbportal.domain <span class="token comment">#别名搜索的包</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#自动驼峰映射</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">logic-delete-field</span><span class="token punctuation">:</span> is_deleted  <span class="token comment"># 全局逻辑删除字段</span>      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span>           <span class="token comment"># 默认逻辑删除值为1</span>      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span>       <span class="token comment"># 逻辑未删除值为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里除了用到的mysql，还用到了到了redis数据库，还有nacos注册中心。nacos注册中心了解<a href="https://www.jianshu.com/p/16ff6d6db0cf%EF%BC%9B">https://www.jianshu.com/p/16ff6d6db0cf；</a></p><h1 id="四-学到的东西"><a href="#四-学到的东西" class="headerlink" title="四.学到的东西"></a>四.学到的东西</h1><h2 id="1-业务处理"><a href="#1-业务处理" class="headerlink" title="1.业务处理"></a>1.业务处理</h2><p>​    需要做出来一个东西，需要先知道做些什么，就拿本组的内容来说，需要建立用户角色权限关系，所以这就是我们需要做的，之后就是怎么做，关系用中间表来搭建，然后就可以建表了，一些逻辑上的细节处理都可以慢慢来看。</p><h2 id="2-建表的必须字段"><a href="#2-建表的必须字段" class="headerlink" title="2. 建表的必须字段"></a>2. 建表的必须字段</h2><p>以前还不知道，现在做了这个项目之后才知道有些字段是不可少的，主键，创建时间，修改时间，创建人，修改人，数据状态，这数据状态相当于是逻辑删除一类的。索引，这里的索引是除了逐渐之外的其他索引。</p><p>当然这规定也不是非得这样，都是强力建</p><h2 id="3-代码的规范"><a href="#3-代码的规范" class="headerlink" title="3.代码的规范"></a>3.代码的规范</h2><p>本次项目是基于springcloud框架搭建而成的，因此一些简洁的注解也可以投入使用。本次代码基于restFul风格实现，加上swagger注解</p><p><img src="https://i.loli.net/2021/09/05/RM83ryanBbxiQVK.png" alt="image-20210905180728133"></p><p>这是每一个controller层都需要通过注解来释义，这样就可以有很好的阅读效果，也有利于后期的维护，还有利于后期问题的检索。</p><p><img src="https://i.loli.net/2021/09/05/p6X9VDeHdrY42xm.png" alt="image-20210905181050837"></p><p>这是本小组的一些分类，实体，继承的mapper，service逻辑层，controller接口层，还有配置类config，有必要的话还有一些枚举，工具类等等。</p><h2 id="4-优化的内容"><a href="#4-优化的内容" class="headerlink" title="4. 优化的内容"></a>4. 优化的内容</h2><p>本次优化内容为数据库的主从复制+多数据源+redis缓存</p><p>我是头一次接触到这些技术，然后自己就去网上学习了一下概念，配置。</p><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p><a href="http://www.macrozheng.com/#/reference/mysql_master_slave">http://www.macrozheng.com/#/reference/mysql_master_slave</a></p><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>主从复制，是用来建立一个和主数据库完全一样的数据库环境，称为从数据库，主数据库一般是准实时的业务数据库。</p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p> 1–在从服务器可以执行查询工作(即我们常说的读功能)，降低主服务器压力;（主库写，从库读，降压）<br> 2–在从主服务器进行备份，避免备份期间影响主服务器服务;（确保数据安全）<br> 3–当主服务器出现问题时，可以切换到从服务器。（提升性能）</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>1.数据库有个bin-log二进制文件，记录了所有sql语句。</p><p>2.我们的目标就是把主数据库的bin-log文件的sql语句复制过来。</p><p>3.让其在从数据的relay-log重做日志文件中再执行一次这些sql语句即可</p><h3 id="多数据源"><a href="#多数据源" class="headerlink" title="多数据源"></a>多数据源</h3><p>主从复制的目的就是为了实现多数据源在主从复制实现之后，就有了主从机的ip和端口</p><p><a href="https://mp.baomidou.com/guide/dynamic-datasource.html#%E6%96%87%E6%A1%A3-documentation">https://mp.baomidou.com/guide/dynamic-datasource.html#%E6%96%87%E6%A1%A3-documentation</a></p><h3 id="redis缓存"><a href="#redis缓存" class="headerlink" title="redis缓存"></a>redis缓存</h3><p><a href="http://ifeve.com/redis-config/">http://ifeve.com/redis-config/</a></p><h1 id="五-读书的内容"><a href="#五-读书的内容" class="headerlink" title="五.读书的内容"></a>五.读书的内容</h1><p>我选读的书为java核心知识要点。这边说一下自己看的JVM把</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>JVM 是可运行 Java 代码的假想计算机 ，包括一套字节码指令集、一组寄存器、一个栈、 一个垃圾回收，堆 和 一个存储方法域。JVM 是运行在操作系统之上的，它与硬件没有直接 的交互。</p><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>① Java 源文件—-&gt;编译器—-&gt;字节码文件</p><p> ② 字节码文件—-&gt;JVM—-&gt;机器码</p><p>每一种平台的解释器是不同的，但是实现的虚拟机是相同的，这也就是 Java 为什么能够 跨平台的原因了 ，当一个程序从开始运行，这时虚拟机就开始实例化了，多个程序启动就会 存在多个虚拟机实例。程序退出或者关闭，则虚拟机实例消亡，多个虚拟机实例之间数据不 能共享。</p><h3 id="JVM后台线程"><a href="#JVM后台线程" class="headerlink" title="JVM后台线程"></a>JVM后台线程</h3><p><img src="https://i.loli.net/2021/09/05/VTLiEnh2wtpGQqJ.png" alt="image-20210905185550599"></p><p>在我现阶段看来很多东西都很陌生，就很难记住，我只能一点一点去看，去理解。对于我来说有些深入了</p><p>这里就不再深入了，作为一些了解</p><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><p>JVM虚拟机垃圾回收算法</p><h4 id="如何确定垃圾"><a href="#如何确定垃圾" class="headerlink" title="如何确定垃圾"></a>如何确定垃圾</h4><p>1.引用计数法</p><p>对象如果没有任何与之关 联的引用，即他们的引用计数都不为 0，则说明对象不太可能再被用到，那么这个对象就是可回收 对象。</p><p>2.可达性分析</p><p>在“GC roots”和一个对象之间没有可达路径，则称该对象是不可达的</p><p>不可达对象变为可回收对象至少要经过两次标记 过程。</p><p>什么叫做可达：<a href="https://www.jianshu.com/p/854ef1afe763">https://www.jianshu.com/p/854ef1afe763</a></p><p>3.复制算法（copying）</p><p>为了解决 Mark-Sweep 算法内存碎片化的缺陷而被提出的算法。按内存容量将内存划分为等大小 的两块。每次只使用其中一块，当这一块内存满后将尚存活的对象复制到另一块上去，把已使用 的内存清掉</p><p><img src="https://i.loli.net/2021/09/05/9rsjwEknm8SeHLq.png" alt="image-20210905190839918"></p><h1 id="六-总结"><a href="#六-总结" class="headerlink" title="六.总结"></a>六.总结</h1><p>​        本次项目的结束，让我收获最多的是拓宽了眼界，还挺有太多太多好用的技术还没有被我知道以及学会，不过现在我也有一个大致的方向去走，自己在做项目的过程中所有遇到的问题都有对应的解决办法，可以说是java这项语言已经很成熟了，不成熟的只是我的眼界问题。</p><p>​        还有就是业务分析能力，不要感觉有多复杂，只需要把它拆分出来，一点一点的去分析就行，分布式思维是一个很好的解决问题的的思维。</p><p>​        其实这次我更多的不是学了多少技术，现阶段的自己很迷茫，不知道接下来要怎么走下去，然后你需要一个人，告诉你，给你建议，给你一些方向，这怎么说呢，明确目标才能全速前进。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Cloud</title>
      <link href="/2021/05/26/spring-cloud/"/>
      <url>/2021/05/26/spring-cloud/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Cloud简介"><a href="#Spring-Cloud简介" class="headerlink" title="Spring-Cloud简介"></a>Spring-Cloud简介</h1><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>微服务架构是使用一套小服务来开发单个应用的方式或途径，每个服务基于单一业务能力构建，运行在自己的进程 中，并使用轻量级机制通信，通常是HTTP API，并能够通过自动化部署机制来独立部署。这些服务可以使用不同的 编程语言实现，以及不同数据存储技术，并保持最低限度的集中式管理。 </p><p><img src="https://i.loli.net/2021/06/27/mEMw3dSvDK19OTV.png" alt="image-20210627151901274"></p><h3 id="微服务特点"><a href="#微服务特点" class="headerlink" title="微服务特点"></a>微服务特点</h3><pre class="line-numbers language-none"><code class="language-none">单一职责：微服务中每一个服务都对应唯一的业务能力，做到单一职责面向服务：面向服务是说每个服务都要对外暴露服务接口API。并不关心服务的技术实现，做到与平台和语言无关，也不限定用什么技术实现，只要提供REST的接口即可。自治：自治是说服务间互相独立，互不干扰团队独立：每个服务都是一个独立的开发团队。技术独立：因为是面向服务，提供REST接口，使用什么技术没有别人干涉前后端分离：采用前后端分离开发，提供统一REST接口，后端不用再为PC、移动段开发不同接口数据库分离：每个服务都使用自己的数据源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="远程调用方式"><a href="#远程调用方式" class="headerlink" title="远程调用方式"></a>远程调用方式</h2><pre class="line-numbers language-none"><code class="language-none">常见的远程调用方式有以下几种：RPC：Remote Procedure Call远程过程调用，类似的还有RMI。自定义数据格式，基于原生TCP通信，速度快，效率高。早期的Web Service，现在热门的Dubbo，都是RPC的典型。说得通俗一点就是：A计算机提供一个服务，B计算机可以像调用本地服务那样调用A计算机的服务。HTTP：HTTP其实是一种网络传输协议，基于TCP，规定了数据传输的格式。现在客户端浏览器与服务端通信基本都是采用HTTP协议。也可以用来进行远程服务调用。缺点是消息封装臃肿。现在热门的REST风格，就可以通过HTTP协议来实现。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><p>RPC的机制是根据语言的API（language API）来定义的，而不是根据基于网络的应用来定义的。如果你们公司全 部采用Java技术栈，那么使用Dubbo作为微服务架构是一个不错的选择。 </p><p>相反，如果公司的技术栈多样化，而且你更青睐Spring家族，那么Spring Cloud搭建微服务是不二之选。会选择 Spring Cloud套件，因此会使用HTTP方式来实现服务间调用。</p><h2 id="SpringCloud简介"><a href="#SpringCloud简介" class="headerlink" title="SpringCloud简介"></a>SpringCloud简介</h2><p>Spring Cloud是Spring旗下的项目之一，官网地址：<a href="http://projects.spring.io/spring-cloud/">http://projects.spring.io/spring-cloud/</a> </p><p>Spring最擅长的就是集成，把世界上最好的框架拿过来，集成到自己的项目中。</p><h2 id="一般分为五个部分"><a href="#一般分为五个部分" class="headerlink" title="一般分为五个部分"></a>一般分为五个部分</h2><p>1.服务提供者</p><p>2.服务调用者</p><p>3.Eureka注册中心</p><p>4.getWay网关</p><p>5.configServer 配置中心</p><p>下面来介绍这五个部分</p><p><img src="https://i.loli.net/2021/06/27/4yCLVdwZTnFNWtg.png" alt="image-20210627152857278"></p><p>从图可以看到创建了一个父工程    工程里包含了五个部分  就是上述的五个部分</p><p><strong>父工程映入依赖</strong></p><p>后续工程都继承该父工程</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kkb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>user-service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>consumer-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>lx-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">&gt;</span></span>Greenwich.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper.starter.version</span><span class="token punctuation">&gt;</span></span>2.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper.starter.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>5.1.46<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- springCloud --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 通用Mapper启动器 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mapper.starter.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- mysql驱动 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>主要负责数据的提供</p><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kkb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>user-service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 通用Mapper启动器 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- mysql驱动 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- Eureka客户端 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        获取配置中心配置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        改造用户服务Spring Cloud Bus--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-bus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-stream-binder-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置Application以及application-yml"><a href="#配置Application以及application-yml" class="headerlink" title="配置Application以及application.yml"></a>配置Application以及application.yml</h5><pre class="line-numbers language-none"><code class="language-none">@SpringBootApplication@MapperScan("com.kkb.user.mapper")@EnableDiscoveryClient //开启Eureka客户端发现功能public class UserApplication {    public static void main(String[] args) {        SpringApplication.run(UserApplication.class, args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>port<span class="token punctuation">:</span><span class="token number">9091</span><span class="token punctuation">}</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/springcloud<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL=false</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">131416</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service   <span class="token comment">#发布的时候  名字就是自己定义的这个名字</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.kkb.user.pojo  <span class="token comment">#别名搜索</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment">#eureka服务的地址，如果做集群，需要指定其他eureka地址</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> HTTP<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token comment">#更倾向于使用ip地址，而不是主机名</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment">#ip地址</span>    <span class="token key atrule">ip-address</span><span class="token punctuation">:</span> 127.0.0.1    <span class="token comment">#续约的间隔  表示五秒发送一次心跳信号  默认是30秒</span>    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span>    <span class="token comment">#服务的失效时间  默认是90s</span>    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token key atrule">text</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> zxd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="bootstrap-yml"><a href="#bootstrap-yml" class="headerlink" title="bootstrap.yml"></a>bootstrap.yml</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token comment">#与git仓库中配置文件的application一致</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> user      <span class="token comment">#与git仓库profile一致</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev      <span class="token comment">#与git仓库分支一致</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token comment">#使用配置中心</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token comment">#配置中心服务名</span>        <span class="token key atrule">service-id</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>server  <span class="token comment"># 配置rabbitmq信息；如果是都与默认值一致则不需要配置</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就是与配置中心接壤</p><h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>   <span class="token comment">//该注解可以省略类中的get set方法</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tb_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token comment">// id</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">// 用户名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token comment">// 密码</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">// 姓名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">// 年龄</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token comment">// 性别，1男性，2女性</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sex<span class="token punctuation">;</span>    <span class="token comment">// 出生日期</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>    <span class="token comment">// 创建时间</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> created<span class="token punctuation">;</span>    <span class="token comment">// 更新时间</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updated<span class="token punctuation">;</span>    <span class="token comment">// 备注</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> note<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="service"><a href="#service" class="headerlink" title="service"></a>service</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RefreshScope</span>   <span class="token comment">//配置文件改变自动刷新属性</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${text.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"配置中心配置的test.name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*统一用Resultful风格代替以前的RequestMapping*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务调用者t"><a href="#服务调用者t" class="headerlink" title="服务调用者t"></a>服务调用者t</h3><p>负责数据的调用</p><h5 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h5><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;    &lt;parent&gt;        &lt;artifactId&gt;springcloud01&lt;/artifactId&gt;        &lt;groupId&gt;com.kkb&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;consumer-demo&lt;/artifactId&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;!-- Eureka客户端 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;        &lt;/dependency&gt;&lt;!--        服务降级  熔断操作--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;        &lt;/dependency&gt;&lt;!--        Feign可以把Rest的请求进行隐藏，伪装成类似SpringMVC的Controller一样。你不用再自己拼接url，拼接参数等 等操作，一切都交给Feign去做。--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置Application以及application-yml-1"><a href="#配置Application以及application-yml-1" class="headerlink" title="配置Application以及application.yml"></a>配置Application以及application.yml</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//@SpringBootApplication</span><span class="token comment">//@EnableDiscoveryClient  //开启Eureka客户端发现功能</span><span class="token comment">//@EnableCircuitBreaker   //开启熔断</span><span class="token annotation punctuation">@SpringCloudApplication</span> <span class="token comment">//此注解包含以上三个注解  可以代替以上三个注解</span><span class="token annotation punctuation">@EnableFeignClients</span>  <span class="token comment">//开启feign功能  并且该功能已经整合了负载均衡功能  因此下面的开启负载均衡可以不要</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConsumerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span> <span class="token comment">//开启负载均衡</span>    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> consumer<span class="token punctuation">-</span>demo<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> HTTP<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka    <span class="token comment">#拉取服务地址列表的间隔时间 默认30秒</span>    <span class="token key atrule">registry-fetch-interval-seconds</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token comment">#负载均衡  默认是轮询方式 修改后就会变成随机</span><span class="token key atrule">user-service</span><span class="token punctuation">:</span>  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule<span class="token comment">#默认有一个重试功能  可以关闭</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment"># 连接超时时长</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">2000</span> <span class="token comment"># 数据通信超时时长</span>  <span class="token key atrule">MaxAutoRetries</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 当前服务器的重试次数</span>  <span class="token key atrule">MaxAutoRetriesNextServer</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 重试多少次服务</span>  <span class="token key atrule">OkToRetryOnAllOperations</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 是否对所有的请求方式都重试</span><span class="token comment"># 配置当两秒访问不到服务的时候  就会进行fallback方法  默认为一秒</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>  <span class="token key atrule">command</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">execution</span><span class="token punctuation">:</span>        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>          <span class="token key atrule">thread</span><span class="token punctuation">:</span>            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">2000</span>      <span class="token key atrule">circuitBreaker</span><span class="token punctuation">:</span>        <span class="token key atrule">errorThresholdPercentage</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 触发熔断错误比例阈值，默认值50%</span>        <span class="token key atrule">sleepWindowInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token comment"># 熔断后休眠时长，默认值5秒</span>        <span class="token key atrule">requestVolumeThreshold</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 熔断触发最小请求次数，默认值是20</span><span class="token key atrule">feign</span><span class="token punctuation">:</span>  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment">#feign开启熔断功能 默认是关闭的</span>  <span class="token key atrule">compression</span><span class="token punctuation">:</span>    <span class="token key atrule">request</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启请求压缩</span>    <span class="token key atrule">response</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启响应压缩</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">com.kkb</span><span class="token punctuation">:</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面解释熔断器</p><h5 id="实体类-1"><a href="#实体类-1" class="headerlink" title="实体类"></a>实体类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>   <span class="token comment">//该注解可以省略类中的get set方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment">// id</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">// 用户名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token comment">// 密码</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">// 姓名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">// 年龄</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token comment">// 性别，1男性，2女性</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sex<span class="token punctuation">;</span>    <span class="token comment">// 出生日期</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>    <span class="token comment">// 创建时间</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> created<span class="token punctuation">;</span>    <span class="token comment">// 更新时间</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updated<span class="token punctuation">;</span>    <span class="token comment">// 备注</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> note<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Feign配置"><a href="#Feign配置" class="headerlink" title="Feign配置"></a>Feign配置</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//映射目标名字                   异常处理 日志配置</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"user-service"</span><span class="token punctuation">,</span>fallback <span class="token operator">=</span> <span class="token class-name">UserClientFallback</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> <span class="token class-name">FeignConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>    <span class="token comment">//String url = "http://user-service/user/" + id;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>  <span class="token comment">//这就相当于对上面的url进行了伪装</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Fallback"><a href="#Fallback" class="headerlink" title="Fallback"></a>Fallback</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserClientFallback</span> <span class="token keyword">implements</span> <span class="token class-name">UserClient</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"用户异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="FeignConfig-日志配置"><a href="#FeignConfig-日志配置" class="headerlink" title="FeignConfig(日志配置)"></a>FeignConfig(日志配置)</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token comment">//表示该类是一个配置类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>  <span class="token comment">//配置feign的日志打印级别</span>    <span class="token keyword">public</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span>FULL<span class="token punctuation">;</span> <span class="token comment">//日志级别  打印所有</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/cf"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerFeignController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserClient</span> userClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> userClient<span class="token punctuation">.</span><span class="token function">queryById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h3><p>Eureka就好比是滴滴，负责管理、记录服务提供者的信息。服务调用者无需自己寻找服务，而是把自己的需求告诉 Eureka，然后Eureka会把符合你需求的服务告诉你。 同时，服务提供方与Eureka之间通过 “心跳” 机制进行监控，当某个服务提供方出现问题，Eureka自然会把它从服 务列表中剔除。 这就实现了服务的自动注册、发现、状态监控。</p><p>其余四个都需要在Eureka注册</p><h4 id="依赖-2"><a href="#依赖-2" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springcloud01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kkb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        Type javax.xml.bind.JAXBContext not present   原因：java9模块化的概念使得JAXB默认没有加载；            jaxb-api是存在jdk中的，只是默认没有加载而已，手动引入即可。--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.sun.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jaxb-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.glassfish.jaxb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jaxb-runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置Application以及application-yml-2"><a href="#配置Application以及application-yml-2" class="headerlink" title="配置Application以及application.yml"></a>配置Application以及application.yml</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableEurekaServer</span>  <span class="token comment">//标名这是一个Eureka注册中心</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaServerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10086</span>  <span class="token comment">#表示如果port不存在  那就使用10086</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment">#eureka服务的地址，如果做集群，需要指定其他eureka地址</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> HTTP<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka    <span class="token comment">#不注册自己  默认是true  会注册自己</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment">#不拉取服务</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token comment">#服务失效剔除间隔时间  默认60秒</span>    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">1000</span>    <span class="token comment"># 关闭自我保护</span>    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="getWay网关"><a href="#getWay网关" class="headerlink" title="getWay网关"></a>getWay网关</h3><p>Spring Cloud Gateway本身也是一个微服务，需要注册到Eureka服务注册中心。</p><p> 网关的核心功能是：过滤和路由</p><pre class="line-numbers language-none"><code class="language-none">路由（route） 路由信息的组成：由一个ID、一个目的URL、一组断言工厂、一组Filter组成。如果路由断言为真，说明请求URL和配置路由匹配。断言（Predicate） Spring Cloud Gateway中的断言函数输入类型是Spring 5.0框架中的ServerWebExchange。Spring Cloud Gateway的断言函数允许开发者去定义匹配来自于HTTP Request中的任何信息比如请求头和参数。过滤器（Filter） 一个标准的Spring WebFilter。 Spring Cloud Gateway中的Filter分为两种类型的Filter，分别是Gateway Filter和Global Filter。过滤器Filter将会对请求和响应进行修改处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="依赖-3"><a href="#依赖-3" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;    &lt;parent&gt;        &lt;artifactId&gt;springcloud01&lt;/artifactId&gt;        &lt;groupId&gt;com.kkb&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;lx-gateway&lt;/artifactId&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置Application以及application-yml-3"><a href="#配置Application以及application-yml-3" class="headerlink" title="配置Application以及application.yml"></a>配置Application以及application.yml</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span>   <span class="token comment">//开启eureka注册和发现功能</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GateWayApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GateWayApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10010</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>gateway  <span class="token comment">#名字</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token comment">#路由id  可以随意写</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service<span class="token punctuation">-</span>rote          <span class="token comment">#代理的微服务地址</span>          <span class="token comment">#uri: http://127.0.0.1:9091</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//user<span class="token punctuation">-</span>service          <span class="token comment">#路由断言  可以配置映射路径</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/api/user/<span class="token important">**</span>   <span class="token comment">#表示将path符合规则的一切路径中含有user/** 开头的这种请求全部代理到上述uri的ip地址中</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token comment">#- PrefixPath=/user  #加前缀</span>            <span class="token comment"># 去除前缀  等于1表示去除一个路径 等于2表示去除两个路径 以此类推</span>            <span class="token punctuation">-</span> StripPrefix=1            <span class="token comment"># 自定义过滤器</span>            <span class="token punctuation">-</span> MyParam=name      <span class="token comment">#默认过滤器  对所有路由都生效</span>      <span class="token key atrule">default-filters</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> AddResponseHeader=X<span class="token punctuation">-</span>Response<span class="token punctuation">-</span>Foo<span class="token punctuation">,</span> Bar        <span class="token punctuation">-</span> AddResponseHeader=abc<span class="token punctuation">-</span>myname<span class="token punctuation">,</span>lxs      <span class="token comment">#跨域配置</span>      <span class="token key atrule">globalcors</span><span class="token punctuation">:</span>        <span class="token key atrule">corsConfigurations</span><span class="token punctuation">:</span>          <span class="token key atrule">'[/**]'</span><span class="token punctuation">:</span>            <span class="token comment">#allowedOrigins: * # 这种写法或者下面的都可以，*表示全部</span>            <span class="token key atrule">allowedOrigins</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token string">"http://docs.spring.io"</span>            <span class="token key atrule">allowedMethods</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> GET<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> HTTP<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment">#优先使用ip地址</span><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>  <span class="token key atrule">command</span><span class="token punctuation">:</span>    <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">execution</span><span class="token punctuation">:</span>        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>          <span class="token key atrule">thread</span><span class="token punctuation">:</span>            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">6000</span> <span class="token comment">#服务降级超时时间，默认1S</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token key atrule">ConnectTimeout</span><span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment"># 连接超时时长</span>  <span class="token key atrule">ReadTimeout</span><span class="token punctuation">:</span> <span class="token number">2000</span> <span class="token comment"># 数据通信超时时长</span>  <span class="token key atrule">MaxAutoRetries</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 当前服务器的重试次数</span>  <span class="token key atrule">MaxAutoRetriesNextServer</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 重试多少次服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义过滤器过滤器"><a href="#自定义过滤器过滤器" class="headerlink" title="自定义过滤器过滤器"></a>自定义过滤器过滤器</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyParamGatewayFilterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyParamGatewayFilterFactory<span class="token punctuation">.</span>Config</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">MyParamGatewayFilterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">shortcutFieldOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">ServerHttpRequest</span> request <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                request<span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>v <span class="token operator">-&gt;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"--局部过滤器获得参数------ %s = %s ----------------"</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>param<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行请求</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//读取过滤器配置的参数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">{</span>        <span class="token comment">//对应配置在application.yml配置文件中的过滤器参数</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> param<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> param<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>param <span class="token operator">=</span> param<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Config分布式配置中心"><a href="#Config分布式配置中心" class="headerlink" title="Config分布式配置中心"></a>Config分布式配置中心</h3><p>在分布式系统中，由于服务数量非常多，配置文件分散在不同的微服务项目中，管理不方便。为了方便配置文件集 中管理，需要分布式配置中心组件。在Spring Cloud中，提供了Spring Cloud Config，它支持配置文件放在配置服 务的本地，也支持放在远程Git仓库（GitHub、码云）。</p><p>需要在gitee上注册账号，新建仓库</p><p><img src="https://i.loli.net/2021/06/27/Q6PwcmEp7AROKxD.png" alt="image-20210627162804922"></p><h4 id="依赖-4"><a href="#依赖-4" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;    &lt;parent&gt;        &lt;artifactId&gt;springcloud01&lt;/artifactId&gt;        &lt;groupId&gt;com.kkb&lt;/groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/parent&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;artifactId&gt;config-server&lt;/artifactId&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt;        &lt;/dependency&gt;&lt;!--        加入Spring Cloud Bus--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-bus&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-stream-binder-rabbit&lt;/artifactId&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置Application以及application-yml-4"><a href="#配置Application以及application-yml-4" class="headerlink" title="配置Application以及application.yml"></a>配置Application以及application.yml</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableConfigServer</span> <span class="token comment">//开启配置服务</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ConfigApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">12000</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>server  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/XXZXD/my<span class="token punctuation">-</span>config.git  <span class="token comment"># 配置rabbitmq信息；如果是都与默认值一致则不需要配置</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka<span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token comment"># 暴露触发消息总线的地址</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> bus<span class="token punctuation">-</span>refresh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="负载均衡Ribbon"><a href="#负载均衡Ribbon" class="headerlink" title="负载均衡Ribbon"></a>负载均衡Ribbon</h2><p>实际环境中，我们往往会开启很多个user-service的集群。此时我们获取的服务列表中就会有多个，到底该访 问哪一个呢？ 一般这种情况下我们就需要编写负载均衡算法，在多个实例列表中进行选择。</p><p> 不过Eureka中已经帮我们集成了负载均衡组件：Ribbon，简单修改代码即可使用。</p><h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><p>Hystix是Netflix开源的一个延迟和容错库，用于隔离访问远程服务，防止出现级联失败。</p><h3 id="雪崩问题"><a href="#雪崩问题" class="headerlink" title="雪崩问题"></a>雪崩问题</h3><p>某个微服务发生异常，请求阻塞，用户请求就不会得到响应，则tomcat的这个线程不会释放，于是越来越多的 用户请求到来，越来越多的线程会阻塞：</p><p>服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，形成 雪崩效应。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>Hystrix解决雪崩问题的手段，主要包括：</p><p> 线程隔离 </p><p>服务降级</p><h4 id="线程隔离-amp-服务降级"><a href="#线程隔离-amp-服务降级" class="headerlink" title="线程隔离&amp;服务降级"></a>线程隔离&amp;服务降级</h4><p>Hystrix为每个依赖服务调用分配一个小的线程池，如果线程池已满调用将被立即拒绝，默认不采用排队，加 速失败判定时间。</p><p>服务降级虽然会导致请求失败，但是不会导致阻塞，而且最多会影响这个依赖服务对应的线程池中的资源，对其它 服务没有响应。 触发Hystrix服务降级的情况： </p><p>线程池已满 </p><p>请求超时</p><h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><p>服务调用方 可以自己进行判断哪些服务反应慢或存在大量超时，可以针对这些服务进行主动熔断，防止整个系统被拖垮。</p><p>Hystrix的服务熔断机制，可以实现弹性容错；当服务请求情况好转之后，可以自动重连。通过断路的方式，将后续 请求直接拒绝，一段时间（默认5秒）之后允许部分请求通过，如果调用成功则回到断路器关闭状态，否则继续打 开，拒绝请求的服务。</p><pre class="line-numbers language-none"><code class="language-none">状态机有3个状态：Closed：关闭状态（断路器关闭），所有请求都正常访问。Open：打开状态（断路器打开），所有请求都会被降级。Hystrix会对请求情况计数，当一定时间内失败请求百分比达到阈值，则触发熔断，断路器会完全打开。默认失败比例的阈值是50%，请求次数最少不低于20次。Half Open：半开状态，不是永久的，断路器打开后会进入休眠时间（默认是5S）。随后断路器会自动进入半开状态。此时会释放部分请求通过，若这些请求都是健康的，则会关闭断路器，否则继续保持打开，再次进行休眠计时<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><p>Feign可以把Rest的请求进行隐藏，伪装成类似SpringMVC的Controller一样。你不用再自己拼接url，拼接参数等 等操作，一切都交给Feign去做。</p><h5 id="Feign的客户端"><a href="#Feign的客户端" class="headerlink" title="Feign的客户端"></a>Feign的客户端</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"user-service"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserClient</span> <span class="token punctuation">{</span>    <span class="token comment">//http://user-service/user/123</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">首先这是一个接口，Feign会通过动态代理，帮我们生成实现类。这点跟Mybatis的mapper很像@FeignClient ，声明这是一个Feign客户端，同时通过 value 属性指定服务名称接口中的定义方法，完全采用SpringMVC的注解，Feign会根据注解帮我们生成URL，并访问获取结果@GetMapping中的/user，请不要忘记；因为Feign需要拼接可访问的地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Feign中已经自动集成了Ribbon负载均衡，因此不需要自己定义RestTemplate进行负载均衡的配置。</p><p>Feign默认也有对Hystrix的集成：</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://i.loli.net/2021/06/27/SVkFsMRHvprTNIg.png" alt="image-20210627164327775"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2021/05/21/spring-mvc/"/>
      <url>/2021/05/21/spring-mvc/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMvc简介"><a href="#SpringMvc简介" class="headerlink" title="SpringMvc简介"></a>SpringMvc简介</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>SpringMVC 也叫 Spring web mvc。是 Spring内置的一个MVC框架，在 Spring3.0 后发布。SpringMVC 框架解决了WEB开发中常见的问题(参数接收、文件上传、表单验证等等)，而且使用简单，与Spring无 缝集成。支持 RESTful风格的URL请求。采用了松散耦合可插拔组件结构，比其他 MVC 框架更具扩展性 和灵活性。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>SpringMVC底层就是Servlet，SpringMVC就是对Servlet进行深层次的封 装。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>1、基于 MVC 架构，功能分工明确。解决页面代码和后台代码的分离。</p><p>2、简单易用。SpringMVC 也是轻量级的，jar 很小。不依赖的特定的接口和类就可以开发一个注解的 SpringMVC 项目。</p><p>3、作 为 Spring 框 架 一 部 分 ， 能 够 使 用Spring的IoC和AOP 。 方 便 整 合MyBatis,Hiberate,JPA等 其他框架。 </p><p>4、springMVC的注解强大易用。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>pom.xml文件添加依赖和插件</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kkb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springmvc01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.13.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置spring中提供的json转换格式  转换器--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--文件上传--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!   maven打包时警告需要如下配置--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">&gt;</span></span>8080<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.创建Spring配置文件applicationContext.xml文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--spring 的配置文件：除了控制器得bean对象都在这里扫描--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.dao,com.kkb.service<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.创建SpringMVC的配置文件springmvc.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--springMvc 的配置文件：除了控制器得bean对象都在这里扫描--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--异常类包扫描--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.exceptions<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--mvc注解驱动--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--配置视图解析器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--前缀--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--后缀--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--处理静态资源--&gt;</span><span class="token comment">&lt;!--    &lt;mvc:default-servlet-handler/&gt;--&gt;</span>    <span class="token comment">&lt;!--第二种方法--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>resources</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置拦截器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--按顺序配置每一个拦截器--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token comment">&lt;!--表示拦截所有--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.interceptor.MyInterceptor<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>interceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token comment">&lt;!--表示拦截所有--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.interceptor.MyInterceptor2<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>interceptor2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token comment">&lt;!--表示拦截所有--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.interceptor.FileInterceptor<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FileInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--文件上传--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--假设限制文件最大为5M   5M = 1024*1024*5 B--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5242880<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--SpringMVC的配置解析：1、servlet-class：前端控制器的完全限定名，在spring-webmvc-5.2.5.RELEASE.jar包中的org.springframework.web.servlet下2、load-on-startup：标记是否在Web服务器（这里是Tomcat）启动时会创建这个 Servlet 实例，即是否在 Web 服务器启动时调用执行该 Servlet 的 init()方法，而不是在真正访问时才创建。 要求取值是整数。值大于0：表示容器在启动时就加载并初始化这个 servlet，数值越小，该 Servlet的优先级就越高，其被创建的也就越早值小于0或者省略：表示该 Servlet 在真正被使用时才会去创建。值相同：容器会自己选择创建顺序3、url-pattern：可以写为 / ，可以写为*.do 、*.action、*.mvc等形式，此处先写*.do,以后介绍不同写法的区别。4、init-param：表示了springmvc配置文件的名称和位置。如果没有配置，默认在项目的WEB-INF目录下找名称为 Servlet 名称-servlet.xml 的配置文件。如果没有配置，启用默认的规则：即如果配置文件放在 webapp/WEB-INF/ 目录下，并且配置文件的名字等于 DispatcherServlet 的名字+ -servlet（即这里的配置文件路径是 webapp/WEBINF/dispatcherServlet-servlet.xml），如果是这样的话，可以不用添加 init-param 参数，即不用手动配置 springmvc 的配置文件，框架会自动加载。而一般情况下，配置文件是放在类路径下，即 resources 目录下。所以，在注册前端控制器时，还需要设置查找 SpringMVC 配置文件路径。其中contextConfigLocation属性：来自DispatcherServlet的父类FrameworkServlet，该类中的contextConfigLocation属性用来配置springmvc的路径和名称。--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>web.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--spring配置--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--springmvc的(前端，核心)中央控制器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 使用Rest风格的URI 将页面普通的post请求转为指定的delete或者put请求原理：在Aajx中发送post请求后，带_method参数，将其修改为PUT，或者DELETE请求--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>httpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>            org.springframework.web.filter.HiddenHttpMethodFilter        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>httpMethodFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置中文乱码的过滤器--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--如果你在别的方法上写了乱码的过滤器 自己写的会不生效   就会强制变为web.xml里面设置的过滤器--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceRequestEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceResponseEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.控制器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"team"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TeamService</span> teamService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"add.do"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token comment">//表示当前方法只能通过get方法请求，如果没有指定method，就什么请求都能执行通过</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">addTeam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TeamController--add----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"teamName"</span><span class="token punctuation">,</span><span class="token string">"湖人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于request.setAttribute("teamName","湖人")</span>        modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"team/add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  通过视图解析器映射成为物理资源路径 /jsp/team/add.jsp</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p><img src="https://i.loli.net/2021/06/26/XHLxwyKRlE8aWNk.png" alt="image-20210626210305946"></p><pre class="line-numbers language-none"><code class="language-none">（1）用户通过浏览器发送请求到前端控制器DispatcherServlet。（2）前端控制器直接将请求转给处理器映射器HandleMapping。（3）处理器映射器HandleMapping会根据请求，找到负责处理该请求的处理器，并将其封装为处理器执行链HandlerExecutionChina后返回给前端控制器DispatcherServlet。（4）前端控制器DispatcherServlet根据处理器执行链中的处理器，找到能够执行该处理器的处理器适配器HandlerAdaptor。（5）处理器适配器HandlerAdaptor调用执行处理器Controller。（6）处理器Controller将处理结果及要跳转的视图封装到一个对象 ModelAndView 中，并将其返回给处理器适配器HandlerAdaptor。（7）处理器适配器直接将结果返回给前端控制器DispatcherServlet。（8）前端控制器调用视图解析器，将 ModelAndView 中的视图名称封装为视图对象。（9）视图解析器ViewResolver将封装了的视图View对象返回给前端控制器DispatcherServlet.（10）前端控制器DispatcherServlet调用视图对象，让其自己进行渲染，即进行数据填充，形成响应对象。（11）前端控制器响应浏览器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringMVC组件"><a href="#SpringMVC组件" class="headerlink" title="SpringMVC组件"></a>SpringMVC组件</h2><p>1.DispatcherServlet：前端控制器,也称为中央控制器或者核心控制器</p><p>2.HandlerMapping：处理器映射器</p><p>3.Handler：处理器</p><p>4.HandlAdapter：处理器适配器</p><p>5.ViewResolver：视图解析器</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>一般将异常处理方法专门定义在一个类中，作为全局的异常处理类。 </p><p>使用注解@ControllerAdvice，就是“控制器增强”，是给控制器对象增强功能的。</p><p>使用 @ControllerAdvice 修饰的类中可以使用@ExceptionHandler。 </p><p>当使用@RequestMapping 注解修饰的方法抛出异常时，会执行@ControllerAdvice 修饰的类中的异常 处理方法。 </p><p>@ControllerAdvice 注解所在的类需要进行包扫描，否则无法创建对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">TeamIdException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">exHandler1</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"idError"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*if(ex instanceof TeamIdException)            mv.setViewName("idError");        else if(ex instanceof TeamNameException)            mv.setViewName("nameError");        else            mv.setViewName("error");*/</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">TeamNameException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">exHandler2</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"nameError"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">exHandler3</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>SpringMVC 中的 拦截器（ Interceptor）是非常重要的，它的主要作用是拦截指定的用户请求，并进行 相应的预处理与后处理。</p><p>自定义拦截器，需要实现 HandlerInterceptor 接口。而该接口中含有三个方法：</p><pre class="line-numbers language-none"><code class="language-none">preHandle(request,response, Object handler)：该方法在处理器方法执行之前执行。其返回值为boolean，若为true，则紧接着会执行处理器方法，且会将afterCompletion()方法放入到一个专门的方法栈中等待执行。postHandle(request,response, Object handler,modelAndView)：该方法在处理器方法执行之后执行。处理器方法若最终未被执行，则该方法不会执行。由于该方法是在处理器方法执行完后执行，且该方法参数中包含 ModelAndView，所以该方法可以修改处理器方法的处理结果数据，且可以修改跳转方向。afterCompletion(request,response, Object handler, Exception ex)：当 preHandle()方法返回true时，会将该方法放到专门的方法栈中，等到对请求进行响应的所工作完成之后才执行该方法。即该方法是在前端控制器渲染（数据填充）了响应页面之后执行的，此时对ModelAndView再操作也对响应无济于事。afterCompletion最后执行的方法，清除资源，例如在Controller方法中加入数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义拦截器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment">//执行时间，控制器方法执行之前,在ModelAndView返回之前</span>    <span class="token comment">//使用场景  登录验证</span>    <span class="token comment">//返回值：false 不会继续执行控制器方法 表示拦截 true 继续执行控制器方法 表示放行</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"preHandler------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//执行时间，控制器方法执行之后,在ModelAndView返回之前,有机会修改返回值</span>    <span class="token comment">//使用场景  日志的记录 记录登录ip 时间</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postHandler------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//执行时间，控制器方法执行之后,在ModelAndView返回之后,没有机会修改返回值</span>    <span class="token comment">//使用场景  群居资源的一些操作</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterCompletion------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h2><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>Spring MVC为文件上传提供了直接支持,这种支持是通过即插即用的MultipartResolver实现. </p><p>Spring中有一个MultipartResolver的实现类:CommonsMultipartResolver。 </p><p>在SpringMVC上下文中默认没有装配MultipartResolver,因此默认情况下不能处理文件上传工作。</p><p> 如果想使用Spring的文件上传功能,则需要先在上下文中配置MultipartResolver</p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--文件上传--&gt;</span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--文件上传--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--假设限制文件最大为5M   5M = 1024*1024*5 B--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5242880<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jsp页面"><a href="#jsp页面" class="headerlink" title="jsp页面"></a>jsp页面</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>文件操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/file/upload.do<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    请选择文件:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFile<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>上传文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/file/download.do<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>下载图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="controller控制器"><a href="#controller控制器" class="headerlink" title="controller控制器"></a>controller控制器</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 文件操作控制器 */</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"upload.do"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"myFile"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> files<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取文件的原始名称 txcat.jpg</span>        <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> files<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//实际开发中 一般都要将文件重新命名存储</span>        <span class="token comment">//存储到服务器的名称=随机的字符串+根据实际名称获取到源文件的后缀</span>        <span class="token class-name">String</span> fileName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//文件存储路径</span>        <span class="token class-name">String</span> realPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/uploadFile"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            files<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//真正文件上传到服务器的指定位置</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传成功"</span> <span class="token operator">+</span> realPath <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"download.do"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//指定文件的路径</span>        <span class="token class-name">String</span> realPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/uploadFile"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/6be779bdc0ae4870ac5198c4e70c07a0.png"</span><span class="token punctuation">;</span>        <span class="token comment">//创建响应的头信息的对象</span>        <span class="token class-name">HttpHeaders</span> httpHeaders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//标记以流的方式做出响应</span>        httpHeaders<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_OCTET_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//以附件形式响应给用户</span>        httpHeaders<span class="token punctuation">.</span><span class="token function">setContentDispositionFormData</span><span class="token punctuation">(</span><span class="token string">"attachment"</span><span class="token punctuation">,</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"6be779bdc0ae4870ac5198c4e70c07a0.png"</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> resp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">readFileToByteArray</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span>httpHeaders<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>CREATED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"hello.do"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"fileHadler"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token comment">&lt;!--表示拦截所有--&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.interceptor.FileInterceptor<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FileInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拦截器处理"><a href="#拦截器处理" class="headerlink" title="拦截器处理"></a>拦截器处理</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 文件上传后缀处理拦截器 * 在文件上传之前判断文件后缀是否合法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//判断是否是文件上传的请求</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>request <span class="token keyword">instanceof</span> <span class="token class-name">MultipartHttpServletRequest</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">MultipartHttpServletRequest</span> multipartRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MultipartHttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>            <span class="token comment">//遍历文件</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">&gt;</span></span> fileMap <span class="token operator">=</span> multipartRequest<span class="token punctuation">.</span><span class="token function">getFileMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> fileMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">String</span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">MultipartFile</span> file <span class="token operator">=</span> multipartRequest<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> substring <span class="token operator">=</span> originalFilename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//判断后缀是否合法</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>substring<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">".png"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>substring<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/jsp/fileTypeError.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件类型错误会跳到错误页面"><a href="#文件类型错误会跳到错误页面" class="headerlink" title="文件类型错误会跳到错误页面"></a>文件类型错误会跳到错误页面</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>fileTypeError<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>文件上传有误 后缀必须是.png或者是.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="RESTful风格"><a href="#RESTful风格" class="headerlink" title="RESTful风格"></a>RESTful风格</h1><p>REST(英文：Representational State Transfer，简称REST，意思：表述性状态转换，描述了一个架构 样式的网络系统，比如web应用)。 它是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件，它主要用于客 户端和服务端交互类的软件。基于这个风格设计的软件可以更简介，更有层次，更易于实现缓存等机 制。</p><h4 id="四种操作"><a href="#四种操作" class="headerlink" title="四种操作"></a>四种操作</h4><p>GET用来获取资源，POST用来新建资源，PUT用来更新资源，DELETE用来删除资源。</p><pre class="line-numbers language-none"><code class="language-none">动词通常就是五种 HTTP 方法，对应 CRUD 操作。GET：读取（Read）POST：新建（Create）PUT：更新（Update）PATCH：更新（Update），通常是部分更新DELETE：删除（Delete）PS: 1、根据 HTTP 规范，动词一律大写。2、一些代理只支持POST和GET方法， 为了使用这些有限方法支持RESTful API，需要一种办法覆盖http原来的方法。使用订制的HTTP头 X-HTTP-Method-Override 来覆盖POST 方法.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>推荐写法</p><pre class="line-numbers language-none"><code class="language-none">再例如查询所有的还未取出的快递，你该如何编写呢？GET /expresses/statu 不推荐GET /expresses?statu=false 推荐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><pre class="line-numbers language-none"><code class="language-none">GET: 200 OK 表示一切正常POST: 201 Created 表示新的资源已经成功创建PUT: 200 OKPATCH: 200 OKDELETE: 204 No Content 表示资源已经成功删除304 ： Not Modified 客户端使用缓存数据400 Bad Request：服务器不理解客户端的请求，未做任何处理。401 Unauthorized：用户未提供身份验证凭据，或者没有通过身份验证。403 Forbidden：用户通过了身份验证，但是不具有访问资源所需的权限。404 Not Found：所请求的资源不存在，或不可用。405 Method Not Allowed：用户已经通过身份验证，但是所用的 HTTP 方法不在他的权限之内。410 Gone：所请求的资源已从这个地址转移，不再可用。415 Unsupported Media Type：客户端要求的返回格式不支持。比如，API 只能返回 JSON 格式，但是客户端要求返回 XML 格式。422 Unprocessable Entity ：客户端上传的附件无法处理，导致请求失败。429 Too Many Requests：客户端的请求次数超过限额。500 Internal Server Error：客户端请求有效，服务器处理时发生了意外。503 Service Unavailable：服务器无法处理请求，一般用于网站维护状态。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ajax使用restful风格"><a href="#ajax使用restful风格" class="headerlink" title="ajax使用restful风格"></a>ajax使用restful风格</h4><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;restful&lt;/title&gt;    &lt;script src="/js/jquery-1.11.1.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;form id="myFrom" action="" method="post"&gt;    球队ID:&lt;input type="text" name="teamId" id="teamId"&gt;&lt;br&gt;    球队名称:&lt;input type="text" name="teamName"&gt;&lt;br&gt;    球队位置:&lt;input type="text" name="location"&gt;&lt;br&gt;    &lt;button type="button" id="btnGetAll"&gt;查询所有GET&lt;/button&gt;    &lt;button type="button" id="btnGetOne"&gt;查询单个GET&lt;/button&gt;    &lt;button type="button" id="btnPost"&gt;添加POST&lt;/button&gt;    &lt;button type="button" id="btnPut"&gt;跟新PUT&lt;/button&gt;    &lt;button type="button" id="btnDel"&gt;删除DELETE&lt;/button&gt;&lt;/form&gt;&lt;p id="showResult"&gt;&lt;/p&gt;&lt;/body&gt;    &lt;script&gt;        //页面加载完毕之后给按钮绑定事件        $(function () {            //删除事件            $("#btnDel").click(function () {                //给 跟新PUT 按钮绑定单击事件                //发起异步请求                $.ajax({                    type: "POST",                    url: "/team/" + $("#teamId").val() +"/.do",//RESTFul风格的api定义                    data: "_method=DELETE",//表单的所有数据以? &amp; 形式通知到URL后面 /team?teamId=1001&amp;teamName="湖人"&amp;location="亚马逊"                    dataType:"json",                    success: function(vo){                        //alert( "Data Saved: " + list );                        if(vo.code==200){                            $("#showResult").html("删除成功");                        }else{                            $("#showResult").html(vo.msg);                        }                    }                });            });            //跟新事件            $("#btnPut").click(function () {                //给 跟新PUT 按钮绑定单击事件                //发起异步请求                $.ajax({                    type: "POST",                    url: "/team/" + $("#teamId").val() +"/.do",//RESTFul风格的api定义                    data: $("#myFrom").serialize() + "&amp;_method=PUT" ,//表单的所有数据以? &amp; 形式通知到URL后面 /team?teamId=1001&amp;teamName="湖人"&amp;location="亚马逊"                    dataType:"json",                    success: function(vo){                        //alert( "Data Saved: " + list );                        if(vo.code==200){                            $("#showResult").html("跟新成功");                        }else{                            $("#showResult").html(vo.msg);                        }                    }                });            });            //添加事件            $("#btnPost").click(function () {                //给 添加POST 按钮绑定单击事件                //发起异步请求                $.ajax({                    type: "POST",                    url: "/team.do",//RESTFul风格的api定义                    data: $("#myFrom").serialize(),//表单的所有数据以? &amp; 形式通知到URL后面 /team?teamId=1001&amp;teamName="湖人"&amp;location="亚马逊"                    dataType:"json",                    success: function(vo){                        //alert( "Data Saved: " + list );                        if(vo.code==200){                            $("#showResult").html("添加成功");                        }else{                            $("#showResult").html(vo.msg);                        }                    }                });            });            //给 查询所有GET 按钮绑定单击事件            $("#btnGetAll").click(function () {                //发起异步请求                $.ajax({                    type: "GET",                    url: "/teams.do",//RESTFul风格的api定义                    data: "",                    dataType:"json",                    success: function(vo){                        if(vo.code == 200) {                            var list = vo.list;                            alert("Data Saved: " + list);                            var str = "";                            for (var i = 0; i &lt; list.length; i++) {                                var obj = list[i];                                str += obj.teamId + "---------" + obj.teamName + "-------" + obj.location + "&lt;br&gt;";                            }                            $("#showResult").html(str);                        }else {                            $("#showResult").html(vo.msg);                        }                    }                });            });            //给 查询单个GET 按钮绑定单击事件            $("#btnGetOne").click(function () {                //发起异步请求                $.ajax({                    type: "GET",                    url: "/team/" + $("#teamId").val() + "/.do",//RESTFul风格的api定义                    data: "",                    dataType:"json",                    success: function(vo){                        if(vo.code == 200) {                            var obj = vo.obj;                            alert("Data Saved: " + vo);                            $("#showResult").html(obj.teamId + "---------" + obj.teamName + "-------" + obj.location + "&lt;br&gt;");                        }else{                            $("#showResult").html(vo.msg);                        }                    }                });            });        });    &lt;/script&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token comment">//@RequestMapping("restful")</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestfulController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span> teamList<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        teamList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Team</span> team <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            team<span class="token punctuation">.</span><span class="token function">setTeamId</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            team<span class="token punctuation">.</span><span class="token function">setTeamName</span><span class="token punctuation">(</span><span class="token string">"湖人"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            team<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token string">"洛杉矶"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            teamList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 查询所有球队     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"teams.do"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResultVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询所有GET---发起的请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResultVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span>teamList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 根据id 查询单个的球队     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/team/{id}/.do"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResultVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span> <span class="token function">getOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询单个GET---发起的请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Team</span> team <span class="token operator">:</span> teamList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>team<span class="token punctuation">.</span><span class="token function">getTeamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResultVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResultVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token string">"未查询到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 添加球队     * @param team     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/team.do"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResultVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Team</span> team<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加----POST发起的请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teamList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResultVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 删除球队     * @param     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/team/{id}/.do"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResultVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除----DELETE发起的请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Team</span> team1 <span class="token operator">:</span> teamList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>team1<span class="token punctuation">.</span><span class="token function">getTeamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>                teamList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>team1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResultVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResultVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"要删除的ID不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 跟新球队     * @param team     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/team/{id}/.do"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>PUT<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResultVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">Team</span> team<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跟新----PUT发起的请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Team</span> team1 <span class="token operator">:</span> teamList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>team1<span class="token punctuation">.</span><span class="token function">getTeamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>                team1<span class="token punctuation">.</span><span class="token function">setTeamId</span><span class="token punctuation">(</span>team<span class="token punctuation">.</span><span class="token function">getTeamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                team1<span class="token punctuation">.</span><span class="token function">setTeamName</span><span class="token punctuation">(</span>team<span class="token punctuation">.</span><span class="token function">getTeamName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                team1<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>team<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResultVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResultVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">"要跟新的ID不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"hello.do"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"restful"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring-boot</title>
      <link href="/2021/05/18/spring-boot/"/>
      <url>/2021/05/18/spring-boot/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>springboot是spring快速开发脚手架，通过约定大于配置的方式，快速构建和启动spring项目</p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>spring boot 是spring快速开发脚手架，通过约定大于配置，优化了混乱的依赖管理，和复杂的配置，让我们用 java -jar方式，运行启动java web项目</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>1.创建空项目</p><p>2.在空项目中创建module,时maven工程的</p><p>3.添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0         http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kkb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>bill-manager-tk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--管理jdk的版本--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--web启动器--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--测试类--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--            mysql驱动--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.46<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 通用mapper --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--            页面的模板引擎--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 分页插件--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.编写一个启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.kkb.dao"</span><span class="token punctuation">)</span>  <span class="token comment">//包扫描</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*所有需要使用到的业务都需要在该启动类的同级包或者子包下*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.编写一个resource目录下的application.yml文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#配置连接池  连接数据库</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">131416</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/bill<span class="token punctuation">-</span>manager<span class="token punctuation">?</span>useSSL=false  <span class="token key atrule">thymeleaf</span><span class="token punctuation">:</span>    <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#关闭thymeleaf缓存</span><span class="token comment">#配置tk_mybatis</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.kkb.entity  <span class="token comment">#别名搜索</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mybatis/<span class="token important">*.xml</span>  <span class="token comment">#配置映射文件  作用是扫描Mapper接口对应的XML文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.接口继承mapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BillMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Bill</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token comment">/*继承Mapper  这里是在tk.mybatis包下的mapper  别忘了包扫描*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>7.编写service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BillService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BillMapper</span> billMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Bill</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">Bill</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> billMapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Bill</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> billMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Bill</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> billMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Bill</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> billMapper<span class="token punctuation">.</span><span class="token function">updateByPrimaryKey</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> billMapper<span class="token punctuation">.</span><span class="token function">deleteByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Bill</span><span class="token punctuation">&gt;</span></span> <span class="token function">listPage</span><span class="token punctuation">(</span><span class="token class-name">Bill</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> pageNum<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSelectPageInfo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            billMapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.编写controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/bill"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BillController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BillService</span> billService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">TypeService</span> typeService<span class="token punctuation">;</span>    <span class="token comment">/**     * 分页查询     * @param pageNum     * @param pageSize     * @param b     * @param model     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/list-page"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">listPage</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> pageNum<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span>            <span class="token class-name">Bill</span> b<span class="token punctuation">,</span>            <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BillType</span><span class="token punctuation">&gt;</span></span> types <span class="token operator">=</span> typeService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"types"</span><span class="token punctuation">,</span>types<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Bill</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> billService<span class="token punctuation">.</span><span class="token function">listPage</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">,</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"bill"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"bill/list-page"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 查询     * @param b     * @param model     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">Bill</span> b<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BillType</span><span class="token punctuation">&gt;</span></span> types <span class="token operator">=</span> typeService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"types"</span><span class="token punctuation">,</span>types<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Bill</span><span class="token punctuation">&gt;</span></span> bills <span class="token operator">=</span> billService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"bills"</span><span class="token punctuation">,</span>bills<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"bill/list"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 跳到添加页面     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toAdd"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toAdd</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BillType</span><span class="token punctuation">&gt;</span></span> types <span class="token operator">=</span> typeService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"types"</span><span class="token punctuation">,</span>types<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"bill/add"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 添加     * @param b     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Bill</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        billService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/bill/list"</span><span class="token punctuation">;</span>  <span class="token comment">//重定向到查询页面</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 删除     * @param id     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        billService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/bill/list"</span><span class="token punctuation">;</span>  <span class="token comment">//重定向到查询页面</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 去到修改页面     * @return     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/toUpdate/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BillType</span><span class="token punctuation">&gt;</span></span> types <span class="token operator">=</span> typeService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"types"</span><span class="token punctuation">,</span>types<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bill</span> bill <span class="token operator">=</span> billService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"bill"</span><span class="token punctuation">,</span>bill<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"bill/update"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Bill</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        billService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/bill/list"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样既可以简单使用springboot  感觉比以前方便得多</p><p>SpringBoot内部对大量的第三方库进行了默认配置，我们引入对应库所需的依赖，那么默认配置就会生效。</p><p>SpringBoot内部对大量的第三方库进行了默认配置，我们引入对应库所需的依赖，那么默认配置就会生效。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2021/05/16/mybatis-ji-chu/"/>
      <url>/2021/05/16/mybatis-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis概述"><a href="#Mybatis概述" class="headerlink" title="Mybatis概述"></a>Mybatis概述</h1><p>MyBatis 本是 apache 的一个开源项目 ,是一个基于 Java 的持久层框架,内部封装了JDBC，让开发人员只需要关注SQL语句本身，采用了ORM思想解决了实体类和数据库表映射的问题</p><pre class="line-numbers language-none"><code class="language-none">O--Object java对象R- Relation 关系，就是数据库中的一张表M-mapping 映射<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="Mybatis解决的问题"><a href="#Mybatis解决的问题" class="headerlink" title="Mybatis解决的问题"></a>Mybatis解决的问题</h1><pre class="line-numbers language-none"><code class="language-none">1、数据库连接的创建、释放连接的频繁操作造成资源的浪费从而影响系统的性能。2、SQL语句编写在代码中，硬编码造成代码不容易维护，实际应用中SQL语句变化的可能性比较大，一旦变动就需要改变java类。3、使用preparedStatement的时候传递参数使用占位符，也存在硬编码，因为SQL语句变化，必须修改源码。4、对结果集的解析中也存在硬编码。说白了就是对数据库到服务器的一个优化，让我们更加方便的去使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.kkb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    &lt;properties&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;--&gt;</span><span class="token comment">&lt;!--    &lt;/properties&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--引入日志--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--分页查询  limit--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--所在的目录--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--反向生成插件--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                    <span class="token comment">&lt;!--配置文件的路径--&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configurationFile</span><span class="token punctuation">&gt;</span></span>src/main/resources/generatorConfig.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configurationFile</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>overwrite</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>overwrite</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Team</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> teamId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> teamName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Team{"</span> <span class="token operator">+</span>                <span class="token string">"teamId="</span> <span class="token operator">+</span> teamId <span class="token operator">+</span>                <span class="token string">", teamName='"</span> <span class="token operator">+</span> teamName <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", location='"</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", createTime="</span> <span class="token operator">+</span> createTime <span class="token operator">+</span>                <span class="token char">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getTeamId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> teamId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTeamId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> teamId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>teamId <span class="token operator">=</span> teamId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTeamName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> teamName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTeamName</span><span class="token punctuation">(</span><span class="token class-name">String</span> teamName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>teamName <span class="token operator">=</span> teamName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> location<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>location <span class="token operator">=</span> location<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> createTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">Date</span> createTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>createTime <span class="token operator">=</span> createTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写Mybatis的配置文件"><a href="#编写Mybatis的配置文件" class="headerlink" title="编写Mybatis的配置文件"></a>编写Mybatis的配置文件</h4><p>一般情况下：配置文件的名称可以自定义，课程中使用mybatis.xml。配置文件放置在java/resources中。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--mybatis 全局配置文件  节点的顺序按参考：  按住ctrl+configuration 节点  进入查看--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--日志的配置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--是否开启二级缓存  false: 默认 不开启  true: 开启--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--配置分页插件  在5.0版本之前使用的是PageHelper你  在5.0版本之后使用PageInterceptor--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">interceptor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.github.pagehelper.PageInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--配置mybatis的环境--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--id 数据源的名称--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--事物的类型 JDBC 使用connection 对象的提交和回滚的方法--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token comment">&lt;!--创建数据源 POOLED方式 使用连接池--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!--创建数据源的四大参数--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://127.0.0.1:3306/test?useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=GMT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>131416<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--在配置文件中注入映射文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/kkb/pojo/Team.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/kkb/mapper/TeamMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/kkb/mapper/GameRecordMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>/*将包内的映射器接口实现全部注册为映射器--推荐语法:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>指定包下的所有Mapper接口如：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>注意：此种方法要求 Mapper接口名称和 mapper 映射文件名称相同，且在同一个目录中。*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置日志的时候在resources底下有一个log4j.properties  内容为</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># Global logging configuration info warning error</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG,stdout</span><span class="token comment"># Console output...</span><span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%5p [%t] - %m%n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写映射文件"><a href="#编写映射文件" class="headerlink" title="编写映射文件"></a>编写映射文件</h4><p>所有编写的映射文件都需要在Mybatis的配置文件中申明  </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--映射文件 ORM思想 object relation mapping    SQL语句从代码的硬编码中抽取出来了--&gt;</span><span class="token comment">&lt;!--namespace 完全限定名 实体类的完全限定名--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.pojo.Team<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--id:自定义名称 不能重复 相当于dao中方法的名称        resultType 返回的类型 如果是集合的时候 写的是集合中元素的类型，使用的要求 实体类中的属性和表中的类名一致    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.pojo.Team<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from team;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--parameterType:表示参数的类型 参数唯一的时候才使用该属性 可以省略，框架可以自主判断类型--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.pojo.Team<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from team where teamId=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--添加一个球队        parameterType="com.kkb.pojo.Team" 将对象作为一个参数        #{值} 值必须是实体类中的属性名称--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.pojo.Team<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        insert into team (teamName,location,createTime) values (#{teamName},#{location},#{createTime});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--跟新一个球队--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.pojo.Team<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        update team set teamName=#{teamName},location=#{location} where teamId=#{teamId}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>del<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>        delete from team where teamId=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动态查询"><a href="#动态查询" class="headerlink" title="动态查询"></a>动态查询</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.mapper.TeamMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--column默认是对应数据库字段 不区分大小写  property对应实体类中的对象名称 区分大小写--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.pojo.Team<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamId<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamId<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamName<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamName<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>location<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>location<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--parameterType:输入映射        resultMap：输出映射--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.pojo.Team<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        insert into team (teamName,location,createTime) values        <span class="token comment">&lt;!--collection: 要遍历的集合：参数是集合类型 直接写list            item: 遍历的集合的每一个数据            separator: 将遍历的结果用 , 分割--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            (t.teamName,t.location,now())        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>select * from team<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        //动态查询--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByQueryTeamVo<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.pojo.QueryTeamVo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>select * from team<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        teamName like concat (concat('%',#{name}),'%')    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beginTime != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        and beginTime&gt;#{beginTime}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>endTime != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        and endTime<span class="token entity named-entity" title="<">&amp;lt;</span>#{endTime}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>location != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        and location=#{location}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--动态更新--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.pojo.Team<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>update team<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamName != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        teamName=#{teamName}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>location != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        location=#{location},    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime != null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        createTime=#{createTime}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>where teamId=#{teamId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        动态删除--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>delete from team where teamId in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamId<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    #{teamId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="自定义映射文件别名"><a href="#自定义映射文件别名" class="headerlink" title="自定义映射文件别名"></a>自定义映射文件别名</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--自定义类型别名--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--对单个的实体类定义别名--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.pojo.Team<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Team<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--推荐写法：批量定义别名：扫描指定包下的所有类，同时别名定义为类名，别名的首字母大小写都可以--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 实体类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TeamDao</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.kkb.pojo.Team.queryAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Team</span> <span class="token function">queryById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"com.kkb.pojo.Team.queryById"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Team</span> team<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> insert <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"com.kkb.pojo.Team.add"</span><span class="token punctuation">,</span> team<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> insert<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Team</span> team<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> update <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"com.kkb.pojo.Team.update"</span><span class="token punctuation">,</span> team<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> update<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token class-name">MybatisUtil</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> delete <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"com.kkb.pojo.Team.del"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> delete<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是一个最基础的优化案例</p><h2 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h2><p>前面配置文件中不是有一个是否开启二级缓存吗，现在来看一看缓存的作用</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>缓存是一般的ORM 框架都会提供的功能，目的就是提升查询的效率和减少数据库的压力。将经常查询的数据存在缓存（内存）中，用户查询该数据的时候不需要从磁盘（关系型 数据库文件）上查询，而是直接从缓存中查询，提高查询效率，解决高并发问题。 MyBatis 也有一级缓存和二级缓存，并且预留了集成第三方缓存的接口。</p><h4 id="一级缓存：自动开启-SqlSession级别的缓存"><a href="#一级缓存：自动开启-SqlSession级别的缓存" class="headerlink" title="一级缓存：自动开启,SqlSession级别的缓存"></a>一级缓存：自动开启,SqlSession级别的缓存</h4><p>在操作数据库时需要构造 sqlSession对象，在对象中有一个(内存区域)数据结构（HashMap）用于存储缓存数据。不同的sqlSession之间的缓存数据区域（HashMap）是互相不 影响的。 </p><p>一级缓存的作用域是同一个SqlSession，在同一个sqlSession中两次执行相同的sql语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取数 据将不再从数据库查询，从而提高查询效率。 </p><p>当一个sqlSession结束后该sqlSession中的一级缓存也就不存在了。 </p><p>Mybatis默认开启一级缓存，存在内存中(本地缓存)不能被关闭，可以调用clearCache()来清空本地缓存，或者改变缓存的作用域</p><h4 id="二级缓存-Mapper级别的缓存"><a href="#二级缓存-Mapper级别的缓存" class="headerlink" title="二级缓存:Mapper级别的缓存"></a>二级缓存:Mapper级别的缓存</h4><p>多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession去操作数据库得到数据会存在二级缓存区域，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession 的。</p><p> 二级缓存是多个SqlSession共享的，其作用域是mapper的同一个namespace。 不同的sqlSession两次执行相同namespace下的sql语句参数相同即最终执行相同的sql语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获 取数据将不再从数据库查询，从而提高查询效率。 </p><p>Mybatis默认没有开启二级缓存，需要在setting全局参数中配置开启二级缓存。 </p><p>如果缓存中有数据就不用从数据库中获取，大大提高系统性能。</p><p>对于变化比较频繁的SQL，可以禁用二级缓存。</p><h2 id="反向生成插件"><a href="#反向生成插件" class="headerlink" title="反向生成插件"></a>反向生成插件</h2><h4 id="插件依赖"><a href="#插件依赖" class="headerlink" title="插件依赖"></a>插件依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--反向生成插件--&gt;</span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                   <span class="token comment">&lt;!--配置文件的路径--&gt;</span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configurationFile</span><span class="token punctuation">&gt;</span></span>src/main/resources/generatorConfig.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configurationFile</span><span class="token punctuation">&gt;</span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>overwrite</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>overwrite</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>generatorConfig.xml内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span><span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span><span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 配置生成器 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--1、数据库驱动jar:添加自己的jar路径 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classPathEntry</span>                    <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:\repository\mysql\mysql-connector-java\8.0.23\mysql-connector-java-8.0.23.jar<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--去除注释 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--2、数据库连接 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span>                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://127.0.0.1:3306/mybatis?useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=GMT<span class="token punctuation">"</span></span>                        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer;为 true时把JDBC DECIMAL和NUMERIC类型解析为java.math.BigDecimal --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaTypeResolver</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>forceBigDecimals<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaTypeResolver</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--3、生成实体类 指定包名 以及生成的地址 （可以自定义地址，但是路径不存在不会自动创建使用Maven生成在target目录下，会自动创建） --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.pojo<span class="token punctuation">"</span></span>                            <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--4、生成SQLmapper.xml映射文件 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.mapper<span class="token punctuation">"</span></span>                         <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src\main\resources<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--5、生成Dao（Mapper）接口文件,--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span>                             <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.mapper<span class="token punctuation">"</span></span>                             <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--6、要生成哪些表(更改tableName和domainObjectName就可以) --&gt;</span>        <span class="token comment">&lt;!-- tableName:要生成的表名enableCountByExample:Count语句中加入where条件查询，默认为true开启enableUpdateByExample:Update语句中加入where条件查询，默认为true开启enableDeleteByExample:Delete语句中加入where条件查询，默认为true开启enableSelectByExample:Select多条语句中加入where条件查询，默认为true开启selectByExampleQueryId:Select单个对象语句中加入where条件查询，默认为true开启--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Team<span class="token punctuation">"</span></span>               <span class="token attr-name">enableCountByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableUpdateByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableUpdateByPrimaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableDeleteByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableDeleteByPrimaryKey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableSelectByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">selectByExampleQueryId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>useActualColumnNames<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置完成之后运行</p><p><img src="https://i.loli.net/2021/06/27/hT5PNcJQU7eLMAK.png" alt="image-20210627122231206"></p><p>次,运行完毕显示BUILD SUCCESS即为成功。</p><p>如果不成功需要把前面运行生成的都删除，后调整在运行</p><p>生成好之后就可以使用了</p><h2 id="对象分析"><a href="#对象分析" class="headerlink" title="对象分析"></a>对象分析</h2><p><img src="https://i.loli.net/2021/06/27/IF7NBxwqTJckXfU.png" alt="image-20210627123708259"></p><h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><p>Resources 类，顾名思义就是资源，用于读取资源文件。其有很多方法通过加载并解析资源文件，返回不同类型的 IO 流对象。</p><h4 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h4><p>SqlSessionFactory 的 创 建 ， 需 要 使 用 SqlSessionFactoryBuilder 对 象 的 build() 方 法 。 事实上使用SqlSessionFactoryBuilder的原因 是将SqlSessionFactory这个复杂对象的创建交由Builder来执行，也就是使用了建造者设计模式。</p><pre class="line-numbers language-none"><code class="language-none">建造者模式: 又称生成器模式,是一种对象的创建模式。 可以将一个产品的内部表象与产品的生成过程分割开来, 从而可以使一个建造过程生成具有不同的内部表象的产品(将一个复杂对象的构建与它的表示分离, 使得同样的构建过程可以创建不同的表示). 这样用户只需指定需要建造的类型就可以得到具体产品,而不需要了解具体的建造过程和细节.在建造者模式中,角色分指导者(Director)与建造者(Builder): 用户联系指导者, 指导者指挥建造者, 最后得到产品. 建造者模式可以强制实行一种分步骤进行的建造过程.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><p>SqlSessionFactory 接口对象是一个重量级对象（系统开销大的对象），是线程安全的，所以一个应用只需要一个该对象即可。创建 SqlSession 需要使用 SqlSessionFactory 接口的的 openSession()方法。</p><pre class="line-numbers language-none"><code class="language-none">默认的 openSession()方法没有参数，它会创建有如下特性的 SqlSession：1、会开启一个事务（也就是不自动提交）。2、将从由当前环境配置的 DataSource 实例中获取 Connection 对象。事务隔离级别将会使用驱动或数据源的默认设置。3、预处理语句不会被复用，也不会批量处理更新。openSession(true)：创建一个有自动提交功能的 SqlSessionopenSession(false)：创建一个非自动提交功能的 SqlSession，需手动提交openSession()：同 openSession(false)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><p>SqlSession 接口对象用于执行持久化操作。一个 SqlSession 对应着一次数据库会话，一次会话以SqlSession 对象的创建开始，以 SqlSession 对象的关闭结束。 </p><p>SqlSession 接口对象是线程不安全的，所以每次数据库会话结束前，需要马上调用其 close()方法，将其关闭。再次需要会话，再次创建。 SqlSession 在方法内部创建，使用完毕后关闭。</p><h2 id="Mybatis的全局配置文件"><a href="#Mybatis的全局配置文件" class="headerlink" title="Mybatis的全局配置文件"></a>Mybatis的全局配置文件</h2><p>全局配置文件需要在头部使用约束文件</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configurationPUBLIC "-//mybatis.org//DTD Config 3.0//EN""http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p><pre class="line-numbers language-none"><code class="language-none">configuration（配置）properties--属性：加载外部的配置文件，例如加载数据库的连接信息Settings--全局配置参数：例如日志配置typeAliases--类型别名typeHandlers----类型处理器objectFactory-----对象工厂Plugins------插件：例如分页插件Environments----环境集合属性对象environment（环境变量）transactionManager（事务管理器）dataSource（数据源）Mappers---映射器：注册映射文件用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nosql</title>
      <link href="/2021/05/11/nosql-ji-chu/"/>
      <url>/2021/05/11/nosql-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Nosql简介"><a href="#Nosql简介" class="headerlink" title="Nosql简介"></a>Nosql简介</h1><p>NoSQL，泛指非关系型的数据库。</p><h2 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h2><p>传统的数据库遇到的瓶颈</p><h2 id="NoSql数据库的优势"><a href="#NoSql数据库的优势" class="headerlink" title="NoSql数据库的优势"></a>NoSql数据库的优势</h2><p>(1) 易扩展 ： 数据之间无关系，这 样就 非常容易扩展</p><p>(2)大数据量，高性能： NoSQL数据库都具有非常高的读写性能</p><p>(3)灵活的数据模型： NoSQL无需事先为要存储的数据建立字段，随时可以存                                        储自定义的数据格式</p><p>(4) 高可用： NoSQL在不太影响性能的情况，就可以方便的实现高可用的架构</p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>全称：REmote DIctionary Server（远程字典服务器）。是 一个高性能的(key/value)分布式内存数据库</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>(1) Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用</p><p>(2) Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储</p><p>(3) Redis支持数据的备份，即master-slave(主从)模式的数据备份</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>(1) 性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</p><p>(2) 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</p><p>(3) 原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</p><p>(4) 丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性</p><p>(5) 采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不 用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</p><p>(6) 使用多路I/O复用模型，非阻塞IO；</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>(1) 缓存(数据查询，短连接，新闻内容，商品内容等)，使用最多</p><p>(2) 任务队列(秒杀，抢购，12306等)</p><p>(3) 网站访问统计</p><p>(4) 数据过期处理(可以精确到毫秒</p><h2 id="Redis下载"><a href="#Redis下载" class="headerlink" title="Redis下载"></a>Redis下载</h2><p>（1）Http://redis.io/ 英文地址</p><p>（2）Http://<a href="http://www.redis.cn/">www.redis.cn/</a> 中文地址</p><h2 id="Linux下安装Redis"><a href="#Linux下安装Redis" class="headerlink" title="Linux下安装Redis"></a>Linux下安装Redis</h2><h3 id="Redis的前端模式启动"><a href="#Redis的前端模式启动" class="headerlink" title="Redis的前端模式启动"></a>Redis的前端模式启动</h3><p>直接运行bin/redis-server将使永前端模式启动，前端模式启动的缺点是启动完成后，不能再进行其他操作，如果 要操作必须使用ctrl+c，同时redis-server程序结束，不推荐此方法。</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost bin]# ./redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用ctrl+c退出前端启动。</p><h3 id="Redis的后端启动"><a href="#Redis的后端启动" class="headerlink" title="Redis的后端启动"></a>Redis的后端启动</h3><p>修改redis.conf配置文件，设置:daemonize yes,然后可以使用后端模式启动</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost redis]# vi redis.conf   #进入修改[root@localhost redis]# ./bin/redis-server ./redis.conf  #启动Redis默认端口:6379,通过当前服务进行查看[root@localhost redis]# ps -ef | grep -i redis  #管道查看<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端访问redis"><a href="#客户端访问redis" class="headerlink" title="客户端访问redis"></a>客户端访问redis</h3><p>如果想要通过指令来操作redis，可以使用redis的客户端进行操作,在bin文件夹下运行redis-cli 该指令默认连接的127.0.0.1 ，端口号是6379</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost bin]# ./redis-cli127.0.0.1:6379&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果想要连接指定的ip地址以及端口号，则需要按照</p><pre class="line-numbers language-none"><code class="language-none">redis-cli -h ip地址 -p 端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Redis的停止"><a href="#Redis的停止" class="headerlink" title="Redis的停止"></a>Redis的停止</h3><p>(1) 强制结束程序。强制终止Redis进程可能会导致redis持久化数据丢失。</p><pre class="line-numbers language-none"><code class="language-none">kill -9 pid   #pid是要杀死的线程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2) 正确停止Redis的方式应该是向Redis发送SHUTDOWN命令，方法为（关闭默认的端口）</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost redis]# ./bin/redis-cli shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h2><p>Redis是一种基于内存的数据库，并且提供一定的持久化功能，它是一种键值（key-value）数据库，使用 key 作为 索引找到当前缓存的数据，并且返回给程序调用者。 </p><p>当前的 Redis 支持 6 种数据类型，它们分别是字符串（String）、列表（List）、集合（set）、哈希结构 （hash）、有序集合（zset）和基数（HyperLogLog）</p><h2 id="Redis常用指令"><a href="#Redis常用指令" class="headerlink" title="Redis常用指令"></a>Redis常用指令</h2><p>命令学习网站:<a href="http://doc.redisfans.com/index.html">http://doc.redisfans.com/index.html</a></p><h2 id="Redis的事务管理"><a href="#Redis的事务管理" class="headerlink" title="Redis的事务管理"></a>Redis的事务管理</h2><p>Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：</p><p> 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客 户端发送来的命令请求所打断。</p><p> 事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</p><p>一个事务从开始到执行会经历以下三个阶段：</p><p>开始事务  –&gt; 命令入队 –&gt; 执行事务</p><p><strong>实例</strong></p><p>以下是一个事务的例子， 它先以 MULTI 开始一个事务， 然后将多个命令入队到事务中， 最后由 EXEC 命令触发事 务， 一并执行事务中的所有命令：</p><p><img src="https://i.loli.net/2021/06/26/ktPeHWcn4JmCV2x.png" alt="image-20210626135212019"></p><h2 id="Redis发布订阅模式"><a href="#Redis发布订阅模式" class="headerlink" title="Redis发布订阅模式"></a>Redis发布订阅模式</h2><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。 </p><p>Redis 客户端可以订阅任意数量的频道。</p><h2 id="Redis持久化方式"><a href="#Redis持久化方式" class="headerlink" title="Redis持久化方式"></a>Redis持久化方式</h2><h3 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h3><p>RDB 是以二进制文件，是在某个时间点将数据写入一个临时文件，持久化结束后，用这个临时文件替换上次持久化 的文件，达到数据恢复。 </p><p>优点：使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能 </p><p>缺点：RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合 数据要求不严谨的时候</p><p>RDB 默认开启</p><h3 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h3><p>Append-Only File，将“操作 + 数据”以格式化指令的方式追加到操作日志文件的尾部，在 append 操作返回后(已经 写入到文件或者将要写入)，才进行实际的数据变更，“日志文件”保存了历史所有的操作过程；当 server 需要数据 恢复时，可以直接 replay 此日志文件，即可还原所有的操作过程。AOF 相对可靠，AOF 文件内容是字符串，非常 容易阅读和解析。 </p><p>优点：可以保持更高的数据完整性，如果设置追加 file 的时间是 1s，如果 redis 发生故障，最多会丢失 1s 的数 据；且如果日志写入不完整支持 redis-check-aof 来进行日志修复；AOF 文件没被 rewrite 之前（文件过大时会对 命令进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）。</p><p> 缺点：AOF 文件比 RDB 文件大，且恢复速度慢。</p><p>AOF 默认关闭，开启方法，修改配置文件 reds.conf：appendonly yes</p><pre class="line-numbers language-none"><code class="language-none">##此选项为aof功能的开关，默认为“no”，可以通过“yes”来开启aof功能##只有在“yes”下，aof重写/文件同步等特性才会生效appendonly yes##指定aof文件名称appendfilename appendonly.aof##指定aof操作中文件同步策略，有三个合法值：always everysec no,默认为everysecappendfsync everysec##在aof-rewrite期间，appendfsync是否暂缓文件同步，"no"表示“不暂缓”，“yes”表示“暂缓”，默认为“no”no-appendfsync-on-rewrite no##aof文件rewrite触发的最小文件尺寸(mb,gb),只有大于此aof文件大于此尺寸是才会触发rewrite，默认“64mb”，建议“512mb”auto-aof-rewrite-min-size 64mb##相对于“上一次”rewrite，本次rewrite触发时aof文件应该增长的百分比。##每一次rewrite之后，redis都会记录下此时“新aof”文件的大小(例如A)，那么当aof文件增长到A*(1 + p)之后##触发下一次rewrite，每一次aof记录的添加，都会检测当前aof文件的尺寸。auto-aof-rewrite-percentage 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AOF与RDB区别"><a href="#AOF与RDB区别" class="headerlink" title="AOF与RDB区别"></a>AOF与RDB区别</h4><p>RDB是间隔一段时间进行持久化，如果持久化之间redis发生故障，会发生数据丢失。所以这种方式更适合 数据要求不严谨的时候</p><p>AOF可以保持更高的数据完整性，如果设置追加file的时间是1s，如果redis发生故障，最多会丢失1s的数据；且 如果日志写入不完整支持redis-check-aof来进行日志修复；AOF文件没被rewrite之前（文件过大时会对命令进行 合并重写），可以删除其中的某些命令（比如误操作的flushall）。</p><h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><p>持久化保证了即使redis服务重启也不会丢失数据，但是当redis服务器的硬盘损坏了可能会导致数据丢失，通 过redis的主从复制机制就可以避免这种单点故障（单台服务器的故障）。</p><p> 主redis中的数据和从上的数据保持实时同步,当主redis写入数据时通过主从复制机制复制到两个从服务上。</p><p> 主从复制不会阻塞master，在同步数据时，master 可以继续处理client 请求. </p><p>主机master配置:无需配置</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>第一步：复制出一个从机,注意使用root用户</p><p>第二步：修改从机的redis.conf</p><p>​        语法：replicaof // replicaof 主机ip 主机端口号 </p><p>​        提示:检索文件: 输入:/replicaof 当前页没有时，输入n，查找下一页</p><p>第三步：修改从机的port地址为6380</p><p>第四步：清除从机中的持久化文件</p><p>第五步：启动从机</p><p>第六步：启动6380的客户端</p><p>**主机一旦发生增删改操作，那么从机会自动将数据同步到从机中 **</p><p><strong>从机不能执行写操作,只能读</strong></p><h2 id="Redis哨兵模式"><a href="#Redis哨兵模式" class="headerlink" title="Redis哨兵模式"></a>Redis哨兵模式</h2><p>哨兵模式：给集群分配一个站岗的。</p><p> 哨兵的作用就是对Redis系统的运行情况监控，它是一个独立进程,它的功能： </p><p>​        监控主数据库和从数据库是否运行正常； </p><p>​        主数据出现故障后自动将从数据库转化为主数据库； </p><p>如果主机宕，开启选举工作，选择一个从做主机。</p><h4 id="第一步：配置哨兵："><a href="#第一步：配置哨兵：" class="headerlink" title="第一步：配置哨兵："></a>第一步：配置哨兵：</h4><p>哨兵主要是用来监听主服务器的，所以一般把哨兵部署在从服务器上监听。</p><p><strong>配置哨兵</strong> </p><p>​    启动哨兵进程，首先需要创建哨兵配置文件vi sentinel.conf,可从源码配置redis-5.0.5/sentinel.conf中复制内 容，也可以直接自定义该文件到bin目录下 </p><p>​    在配置中输入:sentinel monitor mastername 内网IP(127.0.0.1) 6379 1 </p><p>​    说明： mastername 监控主数据的名称，自定义 </p><p>​    127.0.0.1：监控主数据库的IP; </p><p>​    6379:端口 </p><p>​    1：最低通过票数</p><h4 id="第二步：启动哨兵"><a href="#第二步：启动哨兵" class="headerlink" title="第二步：启动哨兵"></a>第二步：启动哨兵</h4><p>哨兵是一个单独的进程，启动之前确保主从服务是正常的。先启动主服务，后启动从服务</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>主从集群：主机有写入权限。从机没有，只有可读。 </p><p>意外宕机方案: </p><p>手动恢复：人为重启服务器，主机宕，把从机设置为主机。 </p><p>自动恢复：使用哨兵监控。自动切换主从。</p><h2 id="Redis集群搭建"><a href="#Redis集群搭建" class="headerlink" title="Redis集群搭建"></a>Redis集群搭建</h2><h4 id="架构细节"><a href="#架构细节" class="headerlink" title="架构细节"></a>架构细节</h4><pre class="line-numbers language-none"><code class="language-none">(1)所有的redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽.(2)节点的fail是通过集群中超过半数的节点检测有效时整个集群才生效.(3)客户端与redis节点直连,不需要中间proxy层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可(4)redis-cluster把所有的物理节点映射到[0-16383]slot上,cluster 负责维护node&lt;-&gt;slot&lt;-&gt;valueRedis 集群中内置了 16384 个哈希槽，当需要在 Redis 集群中放置一个 key-value 时，redis 先对 key 使用 crc16算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h4><pre class="line-numbers language-none"><code class="language-none">(1)集群中所有master参与投票,如果半数以上master节点与其中一个master节点通信超过(cluster-node-timeout),认为该master节点挂掉.(2):什么时候整个集群不可用(cluster_state:fail)?Ø 如果集群任意master挂掉,且当前master没有slave，则集群进入fail状态。也可以理解成集群的[0-16383]slot映射不完全时进入fail状态。Ø 如果集群超过半数以上master挂掉，无论是否有slave，集群进入fail状态。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><p>第一步:安装redis</p><p>第二步:创建集群目录</p><p>第三步:在集群目录下创建节点目录</p><p>​            搭建集群最少也得需要3台主机，如果每台主机再配置一台从机的话，则最少需要6台机器。 设计端口如下：创建6 个redis实例，需要端口号7001~7006</p><p>第四步：如果存在持久化文件，则删除</p><p>第五步：修改redis.conf配置文件，打开Cluster-enable yes</p><p>​    说明：cluster-enable 是否支持集群</p><p>第六步：修改端口 port</p><p>第七步：复制出7002-7006机器</p><p>第八步：修改7002-7006机器的端口</p><p>第九步：启动7001-7006这六台机器，写一个启动脚本：自定义shel脚本</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost redis-cluster]# vi startall.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容：</p><pre class="line-numbers language-none"><code class="language-none">cd 7001./bin/redis-server ./redis.confcd ..cd 7002/bin/redis-server ./redis.confcd ..cd 7003./bin/redis-server ./redis.confcd ..cd 7004./bin/redis-server ./redis.confcd ..cd 7005./bin/redis-server ./redis.confcd ..cd 7006./bin/redis-server ./redis.confcd ..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第十步：修改start-all.sh文件的权限</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost redis-cluster]# chmod u+x startall.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第十一步：启动所有的实例</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost redis-cluster]# ./startall.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第十二步：创建集群（关闭防火墙）</p><p>注意：在任意一台上运行 不要在每台机器上都运行，一台就够了 redis 5.0.5中使用redis-cli –cluster替代redistrib.rb,命令如下</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost redis_cluster]# cd /home/admin/myapps/redis-cluster/7001/bin[root@localhost bin]# ./redis-cli --cluster create 192.168.197.132:7001 192.168.197.132:7002192.168.197.132:7003 192.168.197.132:7004 192.168.197.132:7005 192.168.197.132:7006 --clusterreplicas 1\&gt;&gt;&gt; Creating clusterConnecting to node 127.0.0.1:7001: OKConnecting to node 127.0.0.1:7002: OKConnecting to node 127.0.0.1:7003: OKConnecting to node 127.0.0.1:7004: OKConnecting to node 127.0.0.1:7005: OKConnecting to node 127.0.0.1:7006: OK\&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Using 3 masters:127.0.0.1:7001127.0.0.1:7002127.0.0.1:7003Adding replica 127.0.0.1:7004 to 127.0.0.1:7001Adding replica 127.0.0.1:7005 to 127.0.0.1:7002Adding replica 127.0.0.1:7006 to 127.0.0.1:7003[OK] All 16384 slots covered.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第十二步：连接集群</p><p>命令:</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost 7001]# ./bin/redis-cli -h 127.0.0.1 -p 7001 -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭防火墙:service iptables stop </p><p>查看防火墙状态:service iptables status</p><p>第十三步：查看集群信息</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1:7003&gt; cluster infocluster_state:okcluster_slots_assigned:16384cluster_slots_ok:16384cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:6cluster_size:3cluster_current_epoch:6cluster_my_epoch:3cluster_stats_messages_sent:1186cluster_stats_messages_received:1186<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Jedis连接集群"><a href="#Jedis连接集群" class="headerlink" title="Jedis连接集群"></a>Jedis连接集群</h2><p>关闭防火墙</p><p>注意:如果redis重启，需要将redis中生成的dump.rdb和nodes.conf文件删除，然后再重启。</p><p>1.引入依赖</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependency&gt;&lt;groupId&gt;redis.clients&lt;/groupId&gt;&lt;artifactId&gt;jedis&lt;/artifactId&gt;&lt;version&gt;2.9.0&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.代码实现</p><p>注意jedis的版本，其他版本有可能报错:java.lang.NumberFormatException: For input string: “7002@17002”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token comment">// 创建一连接，JedisCluster对象,在系统中是单例存在</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HostAndPort</span><span class="token punctuation">&gt;</span></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HostAndPort</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.197.132"</span><span class="token punctuation">,</span> <span class="token number">7001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.197.132"</span><span class="token punctuation">,</span> <span class="token number">7002</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.197.132"</span><span class="token punctuation">,</span> <span class="token number">7003</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.197.132"</span><span class="token punctuation">,</span> <span class="token number">7004</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.197.132"</span><span class="token punctuation">,</span> <span class="token number">7005</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.197.132"</span><span class="token punctuation">,</span> <span class="token number">7006</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JedisCluster</span> cluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisCluster</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行JedisCluster对象中的方法，方法和redis指令一一对应。</span>cluster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span> <span class="token string">"test111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> result <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储List数据到列表中</span>cluster<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"site-list"</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cluster<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"site-list"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cluster<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"site-list"</span><span class="token punctuation">,</span> <span class="token string">"mysql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取存储的数据并输出</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"site-list"</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表项为: "</span><span class="token operator">+</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 程序结束时需要关闭JedisCluster对象</span>cluster<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集群测试成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存?"></a>什么是缓存?</h3><p>广义的缓存就是在第一次加载某些可能会复用数据的时候，在加载数据的同时，将数据放到一个指定的地点做保 存。再下次加载的时候，从这个指定地点去取数据。这里加缓存是有一个前提的，就是从这个地方取数据，比从数 据源取数据要快的多。</p><p><strong>狭义缓存：</strong></p><p>​    虚拟机缓存（ehcache，JBoss Cache） </p><p>​    分布式缓存（redis，memcache）</p><pre><code> 数据库缓存</code></pre><p>正常来说，速度由上到下依次减慢</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>由于原有缓存失效（或者数据未加载到缓存中），新缓存未到期间（缓存正常从 Redis中获取）所有原本应该访问缓存的请求都去查询数据库了，而对数据库CPU和内存造成巨大压力， 严重的会造成数据库宕机，造成系统的崩溃。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>1：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。</p><p>​                加锁排队只是为了减轻数据库的压力，并没有提高系统吞吐量。</p><p>2： 分析用户的行为，不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>缓存穿透是指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找 不到，每次都要去数据库再查询一遍，然后返回空。这样请求就绕过缓存直接查数据库，这也是经常提的缓存命中 率问题。</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>1.如果查询数据库也为空，直接设置一个默认值存放到缓存，这样第二次到缓冲中获取就有值了，而不会继续访问 数据库，这种办法最简单粗暴。 </p><p>2.把空结果，也给缓存起来，这样下次同样的请求就可以直接返回空了，既可以避免当查询的值为空时引起的缓存 穿透。同时也可以单独设置个缓存区域存储空值，对要查询的key进行预先校验，然后再放行给后面的正常缓存处 理逻辑。</p><p>​            注意：再给对应的ip存放真值的时候，需要先清除对应的之前的空缓存。</p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><p>对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。 这个时候，需要考虑一个问题：缓存被“击穿”的问题，这个和缓存雪崩的区别在于这里针对某一key缓存，前者则是 很多key。</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><p>1.使用锁，单机用synchronized,lock等，分布式用分布式锁。 </p><p>2.缓存过期时间不设置，而是设置在key对应的value里。如果检测到存的时间超过过期时间则异步更新缓存。</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="使用分布式锁要满足的几个条件："><a href="#使用分布式锁要满足的几个条件：" class="headerlink" title="使用分布式锁要满足的几个条件："></a>使用分布式锁要满足的几个条件：</h4><ol><li>系统是一个分布式系统（关键是分布式，单机的可以使用ReentrantLock或者synchronized代码块来实现） </li><li> 共享资源（各个系统访问同一个资源，资源的载体可能是传统关系型数据库或者NoSQL） </li><li>同步访问（即有很多个进程同时访问同一个共享资源。）</li></ol><h4 id="分布式锁概念"><a href="#分布式锁概念" class="headerlink" title="分布式锁概念"></a>分布式锁概念</h4><p>线程锁：主要用来给方法、代码块加锁。当某个方法或代码使用锁，在同一时刻仅有一个线程执行该方法或该代码 段。线程锁只在同一JVM中有效果，因为线程锁的实现在根本上是依靠线程之间共享内存实现的，比如 synchronized是共享对象头，显示锁Lock是共享某个变量（state）。 </p><p>进程锁：为了控制同一操作系统中多个进程访问某个共享资源，因为进程具有独立性，各个进程无法访问其他进程 的资源，因此无法通过synchronized等线程锁实现进程锁。 </p><p>分布式锁：当多个进程不在同一个系统中，用分布式锁控制多个进程对资源的访问。</p><h4 id="如何使用分布式锁-等我看几篇博客再来写"><a href="#如何使用分布式锁-等我看几篇博客再来写" class="headerlink" title="如何使用分布式锁     等我看几篇博客再来写"></a>如何使用分布式锁     等我看几篇博客再来写</h4><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性 能数据存储解决方案。</p><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><p>(1) 面向集合存储，易存储对象类型的数据 </p><p>(2) 支持动态查询 </p><p>(3) 支持完全索引，包含内部对象 </p><p>(4) 支持复制和故障恢复</p><p>(5) 支持多种开发语言 </p><p>(6) 使用高效的二进制数据存储，包括大型对象(如视频等)</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>（1）网站实时数据处理。它非常适合实时的插入、更新与查询，并具备网站实时数据存储所需的复制及 高度伸缩性。 </p><p>（2）缓存。由于性能很高，它适合作为信息基础设施的缓存层。在系统重启之后，由它搭建的持久化缓 存层可以避免下层的数据源过载。 </p><p>（3）高伸缩性的场景。非常适合由数十或数百台服务器组成的数据库，它的路线图中已经包含对 MapReduce引擎的内置支持。</p><h2 id="不适用的场景"><a href="#不适用的场景" class="headerlink" title="不适用的场景"></a>不适用的场景</h2><p>(1）要求高度事务性的系统。 </p><p>(2）传统的商业智能应用。 </p><p>(3）复杂的跨文档（表）级联查询。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p><img src="https://i.loli.net/2021/06/26/FcyLTOhPfg8I7VA.png" alt="image-20210626153257598"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2021/05/10/spring-ji-chu/"/>
      <url>/2021/05/10/spring-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring,"></a>Spring,</h1><h2 id="什么是框架？"><a href="#什么是框架？" class="headerlink" title="什么是框架？"></a>什么是框架？</h2><p>在软件设计中指为解决一个开放性问题而 设计的具有一定约束性的支撑结构。</p><h2 id="Spring是什么"><a href="#Spring是什么" class="headerlink" title="Spring是什么"></a>Spring是什么</h2><p>Spring官网 <a href="https://spring.io/">https://spring.io</a></p><p>Spring 被称为 J2EE 的春天，是一个是分层的 Java SE/EE full-stack 开源的轻量级的 Java 开发框架</p><h2 id="Spring的优势"><a href="#Spring的优势" class="headerlink" title="Spring的优势"></a>Spring的优势</h2><p>方便解耦，简化开发</p><p>方便集成各种优秀框架</p><p>降低 Java EE API 的使用难度</p><p>方便程序的测试</p><p>AOP 编程的支持</p><p>声明式事务的支持</p><h2 id="Spring三大核心思想"><a href="#Spring三大核心思想" class="headerlink" title="Spring三大核心思想"></a>Spring三大核心思想</h2><h3 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC(控制反转)"></a>IOC(控制反转)</h3><p>通过修改applicationContext.xml文件中bean标签的class来修改实现类，告诉容器我想要什么对象，从而将主动权交给接口，实现控制反转。</p><h3 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI(依赖注入)"></a>DI(依赖注入)</h3><p>spring就是通过反射来实现注入的，提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。</p><h3 id="AOP（面向切面编程）"><a href="#AOP（面向切面编程）" class="headerlink" title="AOP（面向切面编程）"></a>AOP（面向切面编程）</h3><p>3.1、写代码时，只需考虑主流程，而不考虑那些不重要的流程（通过aop添加这些流程）</p><p>3.2、偷懒（减少重复代码）*比如debug的时候要打log</p><p>3.3、降低模块之间的耦合度，使系统跟容易扩展</p><h2 id="Spring核心之IoC控制反转"><a href="#Spring核心之IoC控制反转" class="headerlink" title="Spring核心之IoC控制反转"></a>Spring核心之IoC控制反转</h2><p>pom.xml文件添加依赖和插件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--单元测试--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--spring依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.13.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--编译插件--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于注解实现IoC–重要"><a href="#基于注解实现IoC–重要" class="headerlink" title="基于注解实现IoC–重要"></a>基于注解实现IoC–重要</h3><p> 声明Bean的注解 @Component</p><p>在类上添加注解@Component表示该类创建对象的权限交给Spring容器。</p><p>注解的value属性用于指定 bean的id值，value可以省略。 </p><p>@Component 不指定 value 属性，bean 的 id 是类名的首字母小写。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//@Component 注解标识在类上，表示对象由spring容器创建 value属性表示创建的id值 value可以省略,值也可以省略，默认值时字母首字母小写</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TeamDao------add----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">TeamDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TeamDao----默认的构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">除此之外，Spring中还提供了其他3个用于创建对象的注解：@Repository : 用于dao实现类的的注解@Service: 用户service实现类的注解@Controller: 用于controller实现类的注解这三个注解与@Component 都可以创建对象，但这三个注解还有其他的含义，@Service创建业务层对象，业务层对象可以加入事务功能，@Controller 注解创建的对象可以作为处理器接收用户的请求。@Repository，@Service，@Controller 是对@Component 注解的细化，标注不同层的对象。即持久层对象，业务层对象，控制层对象。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="包扫描"><a href="#包扫描" class="headerlink" title="包扫描"></a>包扫描</h3><p>需要在 Spring 配置文件中配置组件扫描器，用于在指定的基本包中扫描注解。如果没有包扫描，添加的 创建对象的注解不生效。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--表示告知spring 要扫描的包    这些包以及子包当中的类如果添加了@Component注解，这些添加了注解就交给了spring容器创建对象当申明多个包时 分隔符可以使用逗号（，）分号（；）还可以使用空格，不建议使用空格。--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.dao,com.kkb.service<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性注入-Vaule"><a href="#属性注入-Vaule" class="headerlink" title="属性注入@Vaule"></a>属性注入@Vaule</h3><p>需要在属性上使用注解@Value，该注解的 value 属性用于指定要注入的值。使用该注解完成属性注入 时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Team</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"洛杉矶"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"12000"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="byType自动注入-Autowired"><a href="#byType自动注入-Autowired" class="headerlink" title="byType自动注入@Autowired"></a>byType自动注入@Autowired</h3><p>需要在引用属性上使用注解@Autowired，该注解默认使用按类型自动装配 Bean 的方式。使用该注解完 成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。</p><h3 id="byName自动注入-Autowired和-Qualifier"><a href="#byName自动注入-Autowired和-Qualifier" class="headerlink" title="byName自动注入@Autowired和@Qualifier"></a>byName自动注入@Autowired和@Qualifier</h3><p>需要在引用属性上联合使用注解@Autowired 与@Qualifier。@Qualifier 的 value 属性用于指定要匹配 的 Bean 的 id 值。类中无需 set 方法，也可加到 set 方法上。 </p><p>@Autowired 还有一个属性 required，默认值为 true，表示当匹配失败后，会终止程序运行。若将其值 设置为 false，则匹配失败，将被忽略，未匹配的属性值为 null。</p><h3 id="自动注入-Resource"><a href="#自动注入-Resource" class="headerlink" title="自动注入@Resource"></a>自动注入@Resource</h3><p>Spring提供了对 jdk中@Resource注解的支持。@Resource 注解既可以按名称匹配Bean，也可以按类 型匹配 Bean。默认是按名称注入。使用该注解，要求 JDK 必须是 6 及以上版本。@Resource 可在属性 上，也可在 set 方法上。</p><h4 id="byType注入引用类型属性"><a href="#byType注入引用类型属性" class="headerlink" title="byType注入引用类型属性"></a>byType注入引用类型属性</h4><p>@Resource 注解若不带任何参数，采用默认按名称的方式注入，按名称不能注入 bean，则会按照类型 进行 Bean 的匹配注入。</p><h4 id="byName注入引用类型属性"><a href="#byName注入引用类型属性" class="headerlink" title="byName注入引用类型属性"></a>byName注入引用类型属性</h4><p>@Resource 注解指定其 name 属性，则 name 的值即为按照名称进行匹配的 Bean 的 id。</p><h2 id="Spring核心之AOP"><a href="#Spring核心之AOP" class="headerlink" title="Spring核心之AOP"></a>Spring核心之AOP</h2><p>AOP为Aspect Oriented Programming的缩写，意思为面向切面编程，是通过预编译方式和运行期动态 代理实现程序功能的统一维护的一种技术。 </p><p>AOP的作用：不修改源码的情况下，程序运行期间对方法进行功能增强</p><p>AOP分为动态代理和静态代理，静态代理用得比较少就不多说了</p><p>静态代理：要求代理类一定存在 </p><p>动态代理：程序运行的时候，根据要被代理的对象动态生成代理类。</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h4 id="基于JDK的动态代理"><a href="#基于JDK的动态代理" class="headerlink" title="基于JDK的动态代理"></a>基于JDK的动态代理</h4><p>直接看代码把  aop层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 切面，服务代码，切入到核心代码中 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> AOP <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">myFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAop</span> <span class="token keyword">implements</span> AOP<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日志----before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日志----after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日志----exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日志----finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TranAop</span> <span class="token keyword">implements</span> AOP<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务---before"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务---after"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务---exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务---finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>工厂类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">IService</span> iService<span class="token punctuation">;</span><span class="token comment">//目标对象</span>    <span class="token keyword">private</span> <span class="token class-name">AOP</span> aop<span class="token punctuation">;</span><span class="token comment">//切面</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">IService</span> iService<span class="token punctuation">,</span> <span class="token class-name">AOP</span> aop<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iService <span class="token operator">=</span> iService<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aop <span class="token operator">=</span> aop<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取动态代理的实例     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>                iService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                iService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//回调函数 编写代理规则</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            aop<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>iService<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                            aop<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            aop<span class="token punctuation">.</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                            aop<span class="token punctuation">.</span><span class="token function">myFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//目标对象--被代理的对象</span>        <span class="token class-name">TeamService</span> teamService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeamService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AOP</span> tranAop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TranAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AOP</span> logAop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LogAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取代理对象</span>        <span class="token class-name">IService</span> iService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IService</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>teamService<span class="token punctuation">,</span>tranAop<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IService</span> iService1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IService</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>iService<span class="token punctuation">,</span> logAop<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iService1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/*日志----before事务---beforeTeamService-----add----事务---after事务---finally日志----after日志----finally*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于CGLIB的动态代理"><a href="#基于CGLIB的动态代理" class="headerlink" title="基于CGLIB的动态代理"></a>基于CGLIB的动态代理</h4><p>JDK的动态代理有一个限制，就是使用动态代理的对象必须实现一个或多个接口。如果想代理没有 实现接口的类，就可以使用CGLIB实现。</p><p>service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NBAService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NBAService----add-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>工厂</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxyFactory</span> <span class="token punctuation">{</span>    <span class="token comment">//声明一个目标对象</span>    <span class="token keyword">private</span> <span class="token class-name">NBAService</span> nbaService<span class="token punctuation">;</span><span class="token comment">//没有实现类接口</span>    <span class="token comment">//切面</span>    <span class="token keyword">private</span> <span class="token class-name">AOP</span> aop<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">NBAService</span> nbaService<span class="token punctuation">,</span><span class="token class-name">AOP</span> aop<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Enhancer</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>nbaService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            aop<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">Object</span> o1 <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>                            aop<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> o1<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            aop<span class="token punctuation">.</span><span class="token function">exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                            aop<span class="token punctuation">.</span><span class="token function">myFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//目标对象</span>    <span class="token class-name">NBAService</span> nbaService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NBAService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没有接口</span>    <span class="token comment">//创建切面</span>    <span class="token class-name">AOP</span> tranAop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TranAop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建代理对象，选择cglib动态代理</span>    <span class="token class-name">NBAService</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NBAService</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">CglibProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span>nbaService<span class="token punctuation">,</span> tranAop<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"huren"</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*事务---beforeNBAService----add-----事务---after事务---finally1001*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AspectJ-对-AOP-的实现"><a href="#AspectJ-对-AOP-的实现" class="headerlink" title="AspectJ 对 AOP 的实现"></a>AspectJ 对 AOP 的实现</h3><p>在 Spring 中使用 AOP 开发时，一般使用 AspectJ 的实现方式</p><p>AspectJ 中常用的通知有5种类型： </p><p>前置通知 </p><p>后置通知 </p><p>环绕通知 </p><p>异常通知</p><p>最终通知</p><h4 id="AspectJ的切入点表达式"><a href="#AspectJ的切入点表达式" class="headerlink" title="AspectJ的切入点表达式"></a>AspectJ的切入点表达式</h4><p>execution(访问权限 方法返回值  方法声明(参数) 异常类型)</p><pre class="line-numbers language-none"><code class="language-none">示例：execution(* com.kkb.service.*.*(..))指定切入点为：定义在 service 包里的任意类的任意方法。execution(* com.kkb.service..*.*(..))指定切入点为：定义在 service 包或者子包里的任意类的任意方法。“..”出现在类名中时，后面必须跟“*”，表示包、子包下的所有类。execution(* com.kkb.service.IUserService+.*(..))指定切入点为：IUserService 若为接口，则为接口中的任意方法及其所有实现类中的任意方法；若为类，则为该类及其子类中的任意方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注解方式实现AOP"><a href="#注解方式实现AOP" class="headerlink" title="注解方式实现AOP"></a>注解方式实现AOP</h3><p>依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.13.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--在bean标签中  引入aop约束--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.service,com.kkb.aop<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--xml方式实现aop--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--切入点表达式  可以写多个--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.kkb.service..*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt2<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.kkb.service..*.add*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xmlAOP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterReturn<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt2<span class="token punctuation">"</span></span> <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-returning</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exception<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-throwing</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFinally<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>around<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>around</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注解方式实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 切面类 */</span><span class="token annotation punctuation">@Component</span><span class="token comment">//切面对象得创建权限也交给spring容器</span><span class="token annotation punctuation">@Aspect</span><span class="token comment">//aspectj 框架注解 标识当前类为切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * pointCut 注解表示切入点表达式     * 方法一般声明为私有     * 其他的通知可以直接在value属性值使用     */</span>    <span class="token comment">//@Pointcut("execution(* com.kkb.service..*.*(..))")</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">//@Pointcut("execution(* com.kkb.service..*.add*(..))")</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pointCut2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">//@Pointcut("execution(* com.kkb.service..*.update*(..))")</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pointCut3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 声明前置通知     * @param jp     */</span>    <span class="token comment">//@Before("pointCut()")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知：在目标方法执行之前被调用得通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拦截得方法名称："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的参数的个数"</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的参数列表:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\t"</span> <span class="token operator">+</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * value : 表示切入点的表达式     * returning: 属性表示返回的结果 如果可以的话可以在后置通知同修改结果     * @param result     * @return     */</span>    <span class="token comment">//@AfterReturning(value = "pointCut3()",returning = "result")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturn</span><span class="token punctuation">(</span><span class="token class-name">Object</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span>result<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知：在目标方法执行之后被调用得通知,result="</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * ProceedingJoinPoint 中的proceed  表示目标方法被执行     * @param pjp     * @return     * @throws Throwable     */</span>   <span class="token comment">// @Around("pointCut2()")</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知，目标执行之前和之后的通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> proceed <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知，目标执行之前和之后的通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *AfterThrowing: 注解声明异常通知方法     * after： 切入点表达式     * throwing：     */</span>   <span class="token comment">// @AfterThrowing(value = "pointCut2()",throwing = "ex")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">,</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知：在目标方法执行出现异常得时候被调用得通知，否则不执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"方法出现异常，异常信息是"</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * After:注解声明最终通知     */</span>   <span class="token comment">// @After("pointCut()")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知：无论是否出现异常最后都会被通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xml实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 切面类 */</span><span class="token annotation punctuation">@Component</span><span class="token comment">//切面对象得创建权限也交给spring容器</span><span class="token annotation punctuation">@Aspect</span><span class="token comment">//aspectj 框架注解 标识当前类为切面类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlAOP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"XmlAOP前置通知：在目标方法执行之前被调用得通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturn</span><span class="token punctuation">(</span><span class="token class-name">Object</span> result<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"XmlAOP后置通知：在目标方法执行之后被调用得通知,result="</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"XmlAOP环绕通知，目标执行之前和之后的通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> proceed <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"XmlAOP环绕通知，目标执行之前和之后的通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">,</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"XmlAOP异常通知：在目标方法执行出现异常得时候被调用得通知，否则不执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"方法出现异常，异常信息是"</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myFinally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"XmlAOP最终通知：无论是否出现异常最后都会被通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TeamService</span> teamService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TeamService</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"teamService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teamService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"湖人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> update <span class="token operator">=</span> teamService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println(update);</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">NBAService</span> nbaService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NBAService</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"nbaService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teamService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"热火"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> update1 <span class="token operator">=</span> nbaService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println(update);</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*XmlAOP前置通知：在目标方法执行之前被调用得通知XmlAOP环绕通知，目标执行之前和之后的通知TeamService--add----XmlAOP环绕通知，目标执行之前和之后的通知XmlAOP最终通知：无论是否出现异常最后都会被通知XmlAOP后置通知：在目标方法执行之后被调用得通知,result=null----------XmlAOP前置通知：在目标方法执行之前被调用得通知XmlAOP环绕通知，目标执行之前和之后的通知TeamService--update-----XmlAOP环绕通知，目标执行之前和之后的通知XmlAOP最终通知：无论是否出现异常最后都会被通知-------------------------------XmlAOP前置通知：在目标方法执行之前被调用得通知XmlAOP环绕通知，目标执行之前和之后的通知TeamService--add----XmlAOP环绕通知，目标执行之前和之后的通知XmlAOP最终通知：无论是否出现异常最后都会被通知XmlAOP后置通知：在目标方法执行之后被调用得通知,result=null----------XmlAOP前置通知：在目标方法执行之前被调用得通知XmlAOP环绕通知，目标执行之前和之后的通知NBAService--update-----XmlAOP环绕通知，目标执行之前和之后的通知XmlAOP最终通知：无论是否出现异常最后都会被通知-------------------------------Process finished with exit code 0*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring整合JDBC"><a href="#Spring整合JDBC" class="headerlink" title="Spring整合JDBC"></a>Spring整合JDBC</h2><p>依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.13.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        C3P0是一个开源的JDBC连接池--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring管理JdbcTemplate"><a href="#Spring管理JdbcTemplate" class="headerlink" title="Spring管理JdbcTemplate"></a>Spring管理JdbcTemplate</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsdhttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--创建jdbcTemplate 数据源--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/test?serverTimezone=UTC<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>131416<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--创建 jdbcTemplate--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teamDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kkb.dao.TeamDao<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--对JDBC进行事务管理，在spring中是对JdbcTemplate进行事务管理--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--基于xml对事务的操作--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>find<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.kkb.service..*.insert*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pt<span class="token punctuation">"</span></span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TeamDao</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamDao</span> <span class="token keyword">extends</span> <span class="token class-name">JdbcDaoSupport</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Team</span> <span class="token function">handResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>        <span class="token class-name">Team</span> team <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        team<span class="token punctuation">.</span><span class="token function">setStuId</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"stuid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        team<span class="token punctuation">.</span><span class="token function">setStuName</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"stuname"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        team<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        team<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> team<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Team</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> stuId<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM STUDENT WHERE STUID=?"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>stuId<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Team</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">handResult</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT COUNT(STUID) FROM STUDENT"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT MAX(STUID),MIN(STUID) FROM STUDENT"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Team</span> team<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//使用JDBCTemplete</span>        <span class="token comment">//JdbcTemplate template = new JdbcTemplate(dataSource);</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"INSERT INTO STUDENT VALUE (?,?,?,?)"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>team<span class="token punctuation">.</span><span class="token function">getStuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>team<span class="token punctuation">.</span><span class="token function">getStuName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>team<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>team<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//return this.getJdbcTemplate().update(sql,6,"张小呆",20,0);</span>        <span class="token comment">//System.out.println("修改数据的结果： " + update);</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM STUDENT"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Team</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Team</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span><span class="token comment">//                Team team = new Team();</span><span class="token comment">//                team.setStuId(resultSet.getInt("stuid"));</span><span class="token comment">//                team.setStuName(resultSet.getString("stuname"));</span><span class="token comment">//                team.setAge(resultSet.getInt("age"));</span><span class="token comment">//                team.setSex(resultSet.getInt("sex"));</span>                <span class="token keyword">return</span> <span class="token function">handResult</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamService</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">TeamDao</span> teamDao<span class="token punctuation">;</span>    <span class="token comment">/**    * @Transactional 属性 说明：    * readOnly:是否只读    *    * rollbackFor={Exception.class}： 遇到什么异常会回滚    *    * propagation事务的传播：    * Propagation.REQUIRED:当前没有事务的时候，就会创建一个新的事务；如果当前有事务，就直    接加入该事务，比较常用的设置    * Propagation.SUPPORTS:支持当前事务，如果当前有事务，就直接加入该事务；当前没有事务的    时候，就以非事务方式执行    * Propagation.MANDATORY:支持当前事务，如果当前有事务，就直接加入该事务；当前没有事务的    时候，就抛出异常    * Propagation.REQUIRES_NEW:创建新事务，无论当前是否有事务都会创建新的    *    * isolation=Isolation.DEFAULT：事务的隔离级别：默认是数据库的隔离级别    *    */</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>rollbackFor <span class="token operator">=</span><span class="token punctuation">{</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Team</span> team<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num1<span class="token operator">=</span>teamDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一条执行结果：num1="</span><span class="token operator">+</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num2<span class="token operator">=</span>teamDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二条执行结果：num2="</span><span class="token operator">+</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> num2<span class="token operator">+</span>num1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2021/05/06/maven-ji-chu/"/>
      <url>/2021/05/06/maven-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h1><p>Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。</p><h4 id="Maven两大功能"><a href="#Maven两大功能" class="headerlink" title="Maven两大功能"></a>Maven两大功能</h4><p>​    项目构建和依赖管理</p><h4 id="Maven项目构建过程"><a href="#Maven项目构建过程" class="headerlink" title="Maven项目构建过程"></a>Maven项目构建过程</h4><pre class="line-numbers language-none"><code class="language-none">清理:删除以前的编译结果，为重新编译做好准备。编译:将Java源程序编译为字节码文件。测试:针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。报告:在每一次测试后以标准的格式记录和展示测试结果。打包:将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java 工程对应 jar 包，Web工程对应war包。安装:在Maven环境下特指将打包的结果——jar包或war包安装到本地仓库中。部署:将打包的结果部署到远程仓库或将war包部署到服务器上运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Maven项目的依赖管理"><a href="#Maven项目的依赖管理" class="headerlink" title="Maven项目的依赖管理"></a>Maven项目的依赖管理</h4><p>Maven项目管理所依赖的jar包不需要手动向工程添加jar包，只需要在pom.xml（Maven工程的配置文 件）添加jar包的坐标，自动从Maven仓库中下载jar包运行。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="http://maven.apache.org/download.cgi">下载地址</a>，下载完成过后解压,还需要配置maven的环境变量</p><h4 id="maven目录结构"><a href="#maven目录结构" class="headerlink" title="maven目录结构"></a>maven目录结构</h4><pre class="line-numbers language-none"><code class="language-none">目录说明：bin目录： 该目录包含了 mvn 运行的脚本boot目录： Maven运行需要类加载器conf目录： 该目录包含了一个非常重要的文件 settings.xml。直接修改该文件，就能在机器上全局地定制 Maven 的行为lib目录： Maven运行依赖jar包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>找到Maven安装路径下的settings.xml配置文件，在config文件夹里找。</p><p>Maven默认使用jdk1.7，我们常用的是jdk1.8，所以直接在配置文件中修改</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Maven.compiler.source</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Maven.compiler.target</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Maven.compiler.compilerVersion</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Maven.compiler.compilerVersion</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/06/26/omtOb8hpP6Fuiwk.png" alt="image-20210626111002955"></p><h4 id="maven仓库的分类"><a href="#maven仓库的分类" class="headerlink" title="maven仓库的分类"></a>maven仓库的分类</h4><p>maven的仓库可以分为本地仓库和远程仓库。</p><p>远程仓库中分为中央仓库和私服两类。</p><p>中央仓库，是Maven默认的远程仓库。</p><h5 id="配置本地仓库、"><a href="#配置本地仓库、" class="headerlink" title="配置本地仓库、"></a>配置本地仓库、</h5><p><img src="https://i.loli.net/2021/06/26/okt4LspSa5ARYwm.png" alt="image-20210626111417483"></p><p>本地仓库的地址需要自己设置路径</p><h5 id="配置远程镜像仓库"><a href="#配置远程镜像仓库" class="headerlink" title="配置远程镜像仓库"></a>配置远程镜像仓库</h5><p><img src="https://i.loli.net/2021/06/26/J2cEyArNFTCpqW4.png" alt="image-20210626111549811"></p><h4 id="Maven坐标主要组成"><a href="#Maven坐标主要组成" class="headerlink" title="Maven坐标主要组成"></a>Maven坐标主要组成</h4><p>groupId：定义当前Maven项目组织名称 </p><p>artifactId：定义实际项目名称 </p><p>version：定义当前项目的当前版本或者是所依赖的jar包的版本</p><h2 id="Maven的生命周期"><a href="#Maven的生命周期" class="headerlink" title="Maven的生命周期"></a>Maven的生命周期</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Maven生命周期就是为了对所有的构建过程进行抽象和统一。包括项目清理、初始化、编译、打包、测 试、部署等几乎所有构建步骤。生命周期可以理解为构建工程的步骤。</p><h4 id="Maven三大生命周期"><a href="#Maven三大生命周期" class="headerlink" title="Maven三大生命周期"></a>Maven三大生命周期</h4><pre class="line-numbers language-none"><code class="language-none">Maven拥有三套相互独立的生命周期,分别是clean、default和site.clean Lifecycle： 在进行真正的构建之前进行一些清理工作。 mvn cleandefault Lifecycle： 构建的核心部分，编译，测试，打包，部署等等。site Lifecycle： 生成项目报告，站点，发布站点。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="clean生命周期"><a href="#clean生命周期" class="headerlink" title="clean生命周期"></a>clean生命周期</h5><p>clean的目的是清理项目。</p><pre class="line-numbers language-none"><code class="language-none">包含3个阶段:1.pre-clean 执行一些清理前需要完成的工作2.clean 清理上一次构建过程中生成的文件，比如编译后的class文件等3.post-clean 执行一些清理后需要完成的工作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="default生命周期-构建项目"><a href="#default生命周期-构建项目" class="headerlink" title="default生命周期- 构建项目"></a>default生命周期- 构建项目</h5><p>所有生命周期中最核心的部分，绝大部分工作都发生在这个生命周期中。</p><pre class="line-numbers language-none"><code class="language-none">generate-resources： 产生主代码中的资源在classpath中的包process-resource： 复制并处理资源文件，至目标目录，准备打包。compile: 编译项目的主源码.一般来说:编译src/main/java目录下的java文件至项目输出的主classpath目录中test-compile:编译项目的测试代码,是编译src/test/java目录下的java文件至项目输出的测试classpath目录中test:使用单元测试框架运行测试,测试代码不会被打包或部署.package:打包成可发布的格式install: 将包安装到Maven本地仓库,供本地其他Maven项目使用deploy:将最终的包复制到远程仓库,供其他开发人员和Maven项目使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="site生命周期-生成项目站点"><a href="#site生命周期-生成项目站点" class="headerlink" title="site生命周期-生成项目站点"></a>site生命周期-生成项目站点</h5><p>目的:建立和发布项目站点</p><pre class="line-numbers language-none"><code class="language-none">pre-site 执行一些在生成项目站点之前需要完成的工作.site 生成项目站点文档post-site 执行一些在生成项目站点之后需要完成的工作.site-deploy 将生成的项目站点发布到服务器上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Idea搭建Maven项目"><a href="#Idea搭建Maven项目" class="headerlink" title="Idea搭建Maven项目"></a>Idea搭建Maven项目</h2><p>1、打开IDEA，进入主界面后点击 configure，然后点击 settings</p><p><img src="https://i.loli.net/2021/06/26/VjucbH9oGO3pvFT.png" alt="image-20210626113410594"></p><p>2、在上面的快捷查找框中输入Maven，查找与Maven相关的设置，然后点击Maven,按如图配置。</p><p><img src="https://i.loli.net/2021/06/26/EuPW72tUAdVxbKS.png" alt="image-20210626113438848"></p><p><img src="https://i.loli.net/2021/06/26/aqmutjnzfh2O8yG.png" alt="image-20210626113515717"></p><p>3.不使用骨架的Web项目已经创建完成了,下面是基本的结构,没有web目录</p><p>​    我们需要手动添加Web目录,按照以下顺序添加web目录。</p><p><img src="https://i.loli.net/2021/06/26/vogjMGTBDPRCN84.png" alt="image-20210626115339276"></p><p>只够需要修改web的路径</p><p><img src="https://i.loli.net/2021/06/26/KR3anJ6BZCMsjmU.png" alt="image-20210626115457574"></p><p>点击Artifacts,加入刚才创建的内容</p><p><img src="https://i.loli.net/2021/06/26/wK2p7VzxJr4usnT.png" alt="image-20210626115537476"></p><p><img src="https://i.loli.net/2021/06/26/XgYU6S2Lt5lkeQJ.png" alt="image-20210626115607748"></p><p>基本就ok了</p><h4 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h4><p>(1) 如果直接与间接依赖中包含有同一个坐标不同版本的资源依赖，以直接依赖的版本为准（就近原则） </p><p>(2) 如果直接依赖中包含有同一个坐标不同版本的资源依赖，以配置顺序下方的版本为准（就近原则）</p><h2 id="Maven常用指令"><a href="#Maven常用指令" class="headerlink" title="Maven常用指令"></a>Maven常用指令</h2><p>PS：Maven的命令需要在pom.xml所在目录中执行以下命令</p><h4 id="mvn-compile"><a href="#mvn-compile" class="headerlink" title="mvn compile"></a>mvn compile</h4><pre class="line-numbers language-none"><code class="language-none">执行 mvn compile命令，完成编译操作.执行完毕后，会生成target目录，该目录中存放了编译后的字节码文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="mvn-clean"><a href="#mvn-clean" class="headerlink" title="mvn clean"></a>mvn clean</h4><pre class="line-numbers language-none"><code class="language-none">执行 mvn clean命令,执行完毕后，会将target目录删除。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="mvn-test"><a href="#mvn-test" class="headerlink" title="mvn test"></a>mvn test</h4><pre class="line-numbers language-none"><code class="language-none">执行 mvn test命令，完成单元测试操作。执行完毕后，会在target目录中生成三个文件夹：surefire、surefire-reports（测试报告）、test-classes（测试的字节码文件）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Maven-package"><a href="#Maven-package" class="headerlink" title="Maven package"></a>Maven package</h4><pre class="line-numbers language-none"><code class="language-none">执行 mvn package命令，完成打包操作执行完毕后，会在target目录中生成一个文件，该文件可能是jar、war<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="mvn-install"><a href="#mvn-install" class="headerlink" title="mvn install"></a>mvn install</h4><pre class="line-numbers language-none"><code class="language-none">执行 mvn install命令，完成将打好的jar包安装到本地仓库的操作执行完毕后，会在本地仓库中出现安装后的jar包，方便其他工程引用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="mvn-clean-compile-命令"><a href="#mvn-clean-compile-命令" class="headerlink" title="mvn clean compile 命令"></a>mvn clean compile 命令</h4><pre class="line-numbers language-none"><code class="language-none">cmd 中录入 mvn clean compile 命令组合指令，先执行clean，再执行compile，通常应用于上线前执行，清除测试类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="mvn-clean-test-命令"><a href="#mvn-clean-test-命令" class="headerlink" title="mvn clean test 命令"></a>mvn clean test 命令</h4><pre class="line-numbers language-none"><code class="language-none">cmd 中录入 mvn clean test 命令组合指令，先执行clean，再执行test，通常应用于测试环节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="mvn-clean-package-命令"><a href="#mvn-clean-package-命令" class="headerlink" title="mvn clean package 命令"></a>mvn clean package 命令</h4><pre class="line-numbers language-none"><code class="language-none">cmd 中录入 mvn clean package命令组合指令，先执行clean，再执行package，将项目打包，通常应用于发布前执行过程：清理————清空环境编译————编译源码测试————测试源码打包————将编译的非测试类打包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mvn-clean-install-命令"><a href="#mvn-clean-install-命令" class="headerlink" title="mvn clean install 命令"></a>mvn clean install 命令</h4><pre class="line-numbers language-none"><code class="language-none">cmd 中录入 mvn clean install 查看仓库，当前项目被发布到仓库中组合指令，先执行clean，再执行install，将项目打包，通常应用于发布前执行过程：清理————清空环境编译————编译源码测试————测试源码打包————将编译的非测试类打包部署————将打好的包发布到资源仓库中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVAWeb</title>
      <link href="/2021/04/26/javaweb/"/>
      <url>/2021/04/26/javaweb/</url>
      
        <content type="html"><![CDATA[<h1 id="Juqery-AJAX"><a href="#Juqery-AJAX" class="headerlink" title="Juqery AJAX"></a>Juqery AJAX</h1><p>可以通过发送 HTTP请求加载远程数据，是 jQuery 最底层的 Ajax 实现，具有较⾼灵活性。</p><pre class="line-numbers language-none"><code class="language-none">$.ajax({ url:请求地址 type:"get | post | put | delete " 默认是get, data:请求参数 {"id":"123","pwd":"123456"}, dataType:请求数据类型"html | text | json | xml | script | jsonp ", success:function(data,dataTextStatus,jqxhr){ },//请求成功时error:function(jqxhr,textStatus,error)//请求失败时})url:请求的路径data:发送的数据success:成功函数datatype 返回的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GET:</p><pre class="line-numbers language-none"><code class="language-none">$.get(url,data,function(result) { //省略将服务器返回的数据显示到⻚⾯的代码});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>POST:</p><pre class="line-numbers language-none"><code class="language-none">$.post(url,data,function(result) { //省略将服务器返回的数据显示到⻚⾯的代码});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JSON (JavaScript Object Notation) 是⼀种轻量级的数据交换格式。 易于⼈阅读和编写。同时也易于 机器解析和⽣成。</p><h2 id="JSON在java中的使⽤-重要"><a href="#JSON在java中的使⽤-重要" class="headerlink" title="JSON在java中的使⽤(重要)"></a>JSON在java中的使⽤(重要)</h2><h4 id="java对象和json之间的转换"><a href="#java对象和json之间的转换" class="headerlink" title="java对象和json之间的转换"></a>java对象和json之间的转换</h4><p>java -&gt; json</p><pre class="line-numbers language-none"><code class="language-none">Users user2=new Users();user2.setUsername("李四");user2.setPassword("abc");user2.setAge(20);JSONObject obj=JSONObject.fromObject(user);//obj就是json格式的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jaon -&gt; java</p><pre class="line-numbers language-none"><code class="language-none">String str="{'username':'李四','password':'admin','age':19}";JSONObject json=JSONObject.fromObject(str);Users user=(Users)JSONObject.toBean(json,Users.class);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>java集合-&gt;json数组: </p><pre class="line-numbers language-none"><code class="language-none">List list=new ArrayList();list.add("dd");list.add("aa");JSONArray obj=JSONArray.fromObject(list);//set也是这么转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>json数组-&gt;java集合:</p><pre class="line-numbers language-none"><code class="language-none">方式1：    String str2="[{'age':20,'password':'abc','username':'李四'},    {'age':10,'password':'adb','username':'张三'}]";     JSONArray json2=JSONArray.fromObject(str2);    Object[] obj=(Object[])JSONArray.toArray(json2,Users.class);方式2：     String str3="[{'age':20,'password':'abc','username':'李四'},    {'age':10,'password':'adb','username':'展示⼲'}]";    JSONArray json3=JSONArray.fromObject(str3);    //默认转换成ArrayList    List&lt;Users&gt; list=(List&lt;Users&gt;) JSONArray.toCollection(json3,Users.class);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h1><p>超⽂本传输协议（英⽂：HyperText Transfer Protocol，缩写：HTTP）是⼀种⽤于分布式、协作式和 超媒体信息系统的应⽤层协议。HTTP是万维⽹的数据通信的基础。</p><h5 id="客户端连接到Web服务器"><a href="#客户端连接到Web服务器" class="headerlink" title="客户端连接到Web服务器"></a>客户端连接到Web服务器</h5><p>⼀个HTTP客户端，通常是浏览器，与Web服务器的HTTP端⼝（默认为80）建⽴⼀个TCP套接字连接。</p><h5 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h5><p>通过TCP套接字，客户端向Web服务器发送⼀个⽂本的请求报⽂，⼀个请求报⽂由请求⾏、请求头部、 空⾏和请求数据4部分组成。</p><h5 id="服务器接受请求并返回HTTP响应"><a href="#服务器接受请求并返回HTTP响应" class="headerlink" title="服务器接受请求并返回HTTP响应"></a>服务器接受请求并返回HTTP响应</h5><p>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。⼀个响应由 状态⾏、响应头部、空⾏和响应数据4部分组成。</p><h5 id="释放TCP连接"><a href="#释放TCP连接" class="headerlink" title="释放TCP连接"></a>释放TCP连接</h5><p>从HTTP/1.1起，默认使⽤⻓连接，⽤以保持连接特性。使⽤⻓连接的HTTP协议，会在响应头加⼊这⾏ 代码：</p><pre class="line-numbers language-none"><code class="language-none">Connection:keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在使⽤⻓连接的情况下，当⼀个⽹⻚打开完成后，客户端和服务器之间⽤于传输HTTP数据的TCP连接不 会关闭，客户端再次访问这个服务器时，会继续使⽤这⼀条已经建⽴的连接。Keep-Alive不会永久保持 连接，它有⼀个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现⻓连接需要客 户端和服务端都⽀持⻓连接。 HTTP协议的⻓连接和短连接，实质上是TCP协议的⻓连接和短连接。</p><h5 id="客户端浏览器解析HTML内容"><a href="#客户端浏览器解析HTML内容" class="headerlink" title="客户端浏览器解析HTML内容"></a>客户端浏览器解析HTML内容</h5><pre class="line-numbers language-none"><code class="language-none">在浏览器地址栏键⼊URL，按下回⻋之后会经历以下流程：1. 浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;2. 解析出 IP 地址后，根据该 IP 地址和默认端⼝ 80，和服务器建⽴TCP连接;3. 浏览器发出读取⽂件(URL 中域名后⾯部分对应的⽂件)的HTTP 请求，该请求报⽂作为 TCP 三次握⼿的第三个报⽂的数据发送给服务器;4. 服务器对浏览器请求作出响应，并把对应的 html ⽂本发送给浏览器;5. 浏览器将该 html ⽂本并显示内容; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Tomcat服务器"><a href="#Tomcat服务器" class="headerlink" title="Tomcat服务器"></a>Tomcat服务器</h1><p>Web服务器是运⾏及发布Web应⽤的容器，只有将开发的Web项⽬放置到该容器中，才能使⽹络中的所 有⽤户通过浏览器进⾏访问。</p><p>Tomcat 服务器 </p><p>​        ⽬前最为流⾏的Tomcat服务器是Apache-Jarkarta开源项⽬中的⼀个⼦项⽬，是⼀个⼩型、轻量级 的⽀持JSP和Servlet 技术的Web服务器，也是初学者学习开发JSP应⽤的⾸选</p><h1 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h1><h2 id="多表操作之一对多"><a href="#多表操作之一对多" class="headerlink" title="多表操作之一对多"></a>多表操作之一对多</h2><p>一方存多方的集合，多方存一方的对象</p><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>M：(Model) 模型 : 应⽤程序的核⼼功能，管理这个模块中⽤的数据和值（bean,dao）；</p><pre class="line-numbers language-none"><code class="language-none">JavaBeans :是Java中⼀种特殊的类（换⾔之：JavaBean就是⼀个Java类）.⼀个Java类 ，满⾜以下要求，则可称为⼀个JavaBean a. public修饰的类，提供public ⽆参构造⽅法 b. 所有属性 都是private C. 提供getter和setter⽅法从使⽤层⾯来看，JavaBean分为2⼤类： a. 封装业务逻辑的JavaBean(eg:LoginDao.java 封装了登录逻辑) b. 封装数据的JavaBean(实体类：eg：Student.java Vadio.java 。往往对应于数据库中的⼀张表，即数据库中有个Student表，项⽬中就有个Student.java类)通常:表名=类名，列名=属性名JavaBean是⼀个可以重复使⽤的组件，通过编写⼀个组件来实现某种通⽤功能，“⼀次编写、任何地⽅执⾏、任何地⽅重⽤”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>V(View )视图: 视图提供模型的展示，管理模型如何显示给⽤户，它是应⽤程序的外观；（jsp/html） </p><p>C(Controller)控制器: 对⽤户的输⼊做出反应，管理⽤户和视图的交互，是连接模型和视图的枢纽。 （servlet/service）</p><p>MVC⽤于将web（UI）层进⾏职责解耦</p><h5 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html">三层架构 通常意义上的三层架构就是将整个业务应⽤划分为：表现层（UI）、业务逻辑层（BLL）、数据访问层（DAL）。区分层次的⽬的即为了“⾼内聚，低耦合”的思想。1、表现层（UI）：通俗讲就是展现给⽤户的界⾯，即⽤户在使⽤⼀个系统的时候他的所⻅所得。jsp/html2、业务逻辑层（BLL）：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。servlet,service3、数据访问层（DAL）：该层所做事务直接操作数据库，针对数据的增添、删除、修改、更新、查找等。dao表现层实现的代表作品是Struts,springmvc框架，业务层实现的代表作品是Spring，持久层实现的代表作品是Hibernate,mybatis。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MVC可以是三层中的⼀个表现层框架，属于表现层。三层和mvc可以共存。</p><h1 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h1><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>版本控制的目的是实现开发团队并行开发、提高开发效率的基础。其目的在于对软件开发进程中文件或 目录的发展过程提供有效的追踪手段，保证在需要时可回到旧的版本，避免文件的丢失、修改的丢失和 相互覆盖，通过对版本库的访问控制避免未经授权的访问和修改，达到有效保护企业软件资产和知识产 权的目的。</p><p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理.</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><a href="https://www.git-scm.com/download/win">下载地址</a></p><h4 id="git的工作区域"><a href="#git的工作区域" class="headerlink" title="git的工作区域"></a>git的工作区域</h4><p><img src="https://i.loli.net/2021/06/25/lSu9cxi7VPImoaD.png" alt="image-20210625190719522"></p><h4 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html">(1)新建文件夹，进入到该目录,右键打开git bash(2)在文件夹内初始化git(创建git仓库) 命令:git init (会生成一个.git的隐藏文件)(3)仓库中添加信息 git add 文件名-&gt; 结果:new file：文件名 //工作区到暂存区 git add * 添加所有文件 git commit -m ‘描述信息’ //暂存区到仓库(4)仓库中修改信息 修改完成后按照原来的程序再执行(5)删除文件 git rm 文件名 如果想要删除文件夹，则添加参数 -r git commit -m ‘提交描述’(6)删除文件夹当我们需要删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制, 可以使用 git rm -r --cached 文件夹名称实例: git rm -r --cached target 删除target文件夹 git commit -m '删除了target' 提交,添加操作说明<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="gitee基本概念"><a href="#gitee基本概念" class="headerlink" title="gitee基本概念"></a>gitee基本概念</h3><pre class="line-numbers language-none"><code class="language-none">(1) 仓库（Repository） 仓库即你的项目，你想在github上开源一个项目，那就必须要新建一个repository,如果你开源的项目多，那你拥有的仓库也就很多(2) 收藏(star)仓库主页的star按钮，意思是收藏项目的人数。(3) 复制克隆项目(fork)在原项目的基础上新增代码和结构，也可以理解成拿别人的代码进行二次加工。Fork后，会在自己账号下，生成自己的相同仓库(4) 发起请求(pull request，简称PR) 这个是基于fork的，当其他人改进完代码后，想将这个项目合并到原项目，则这个时候会给你发起一个pull request。如果接受了请求，这个时候就可以拥有改进的项目了(5) 关注(watch)即观察，可以随时看到被关注项目的更新(6) 事务卡片（Issue）发现代码有bug,但是目前还没成型，需要讨论时使用当别人发现你的问题时，会提个lssue(7) Gitee主页账号创建完后，点击导航栏gitee图标即可进入主页。左侧显示功能列表，右侧显示仓库动态(8) 仓库主页仓库主页主要显示项目的信息，如:代码，版本，收藏，关注，fork等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="idea-git"><a href="#idea-git" class="headerlink" title="idea+git"></a>idea+git</h4><h5 id="Idea配置Git客户端"><a href="#Idea配置Git客户端" class="headerlink" title="Idea配置Git客户端:"></a>Idea配置Git客户端:</h5><p>1.File — Settings—Version Control — Git关联Git安装目录下的</p><p><img src="https://i.loli.net/2021/06/25/Nq741ducE8CfPXn.png" alt="image-20210625192104728"></p><p>2.下载gitee插件</p><p>3.添加信息     注意:登录时，使用邮箱登录</p><p><img src="https://i.loli.net/2021/06/25/skvzl3FSgfYCyun.png" alt="image-20210625192539645"></p><p>4.本地项目上传到服务器</p><p><img src="https://i.loli.net/2021/06/25/eBzd3aHQbWLZVu8.png" alt="image-20210625192734963"></p><p>5.服务器项目下载到本地</p><p><img src="https://i.loli.net/2021/06/25/rgMiAGn7yz8dNq2.png" alt="image-20210625193014318"></p><p><img src="https://i.loli.net/2021/06/25/842QXUZJ6qABkpR.png" alt="image-20210625193030724"></p><h1 id="JAVAWEB"><a href="#JAVAWEB" class="headerlink" title="JAVAWEB"></a>JAVAWEB</h1><h2 id="web-xml加载过程"><a href="#web-xml加载过程" class="headerlink" title="web.xml加载过程"></a><strong>web.xml加载过程</strong></h2><p>首先简单讲一下，web.xml的加载过程。当启动一个WEB项目时，容器包括（JBoss、Tomcat等）首先会读取项目web.xml配置文件里的配置，当这一步骤没有出错并且完成之后，项目才能正常地被启动起来。</p><pre class="line-numbers language-none"><code class="language-none">1.启动WEB项目的时候，容器首先会去它的配置文件web.xml读取两个节点:&nbsp; &lt;listener&gt;&lt;/listener&gt;和&lt;context-param&gt;&lt;/context-param&gt;。2.紧接着，容器创建一个ServletContext（Application），这个WEB项目所有部分都将共享这个上下文。3.容器以&lt;context-param&gt;&lt;/context-param&gt;的name作为键，value作为值，将其转化为键值对，存入ServletContext。4.容器创建&lt;listener&gt;&lt;/listener&gt;中的类实例，根据配置的class类路径&lt;listener-class&gt;来创建监听，在监听中会有contextInitialized(ServletContextEvent args)初始化方法，启动Web应用时，系统调用Listener的该方法，在这个方法中获得：ServletContext application = ServletContextEvent.getServletContext();&nbsp;context-param的值 =&nbsp;application.getInitParameter("context-param的键");&nbsp;得到这个context-param的值之后，你就可以做一些操作了。5.举例：你可能想在项目启动之前就打开数据库，那么这里就可以在&lt;context-param&gt;中设置数据库的连接方式（驱动、url、user、password），在监听类中初始化数据库的连接。这个监听是自己写的一个类，除了初始化方法，它还有销毁方法，用于关闭应用前释放资源。比如:说数据库连接的关闭，此时，调用contextDestroyed(ServletContextEvent args)，关闭Web应用时，系统调用Listener的该方法。6.接着，容器会读取&lt;filter&gt;&lt;/filter&gt;，根据指定的类路径来实例化过滤器。7.以上都是在WEB项目还没有完全启动起来的时候就已经完成了的工作。如果系统中有Servlet，则Servlet是在第一次发起请求的时候被实例化的，而且一般不会被容器销毁，它可以服务于多个用户的请求。所以，Servlet的初始化都要比上面提到的那几个要迟。8.总的来说，web.xml的加载顺序是:&lt;context-param&gt;-&gt;&lt;listener&gt;-&gt;&lt;filter&gt;-&gt;&lt;servlet&gt;。其中，如果web.xml中出现了相同的元素，则按照在配置文件中出现的先后顺序来加载。9.对于某类元素而言，与它们出现的顺序是有关的。以&lt;filter&gt;为例，web.xml中当然可以定义多个&lt;filter&gt;，与&lt;filter&gt;相关的一个元素是&lt;filter-mapping&gt;，注意，对于拥有相同&lt;filter-name&gt;的&lt;filter&gt;和&lt;filter-mapping&gt;元素而言，&lt;filter-mapping&gt;必须出现在&lt;filter&gt;之后，否则当解析到&lt;filter-mapping&gt;时，它所对应的&lt;filter-name&gt;还未定义。web容器启动初始化每个&lt;filter&gt;时，按照&lt;filter&gt;出现的顺序来初始化的，当请求资源匹配多个&lt;filter-mapping&gt;时，&lt;filter&gt;拦截资源是按照&lt;filter-mapping&gt;元素出现的顺序来依次调用doFilter()方法的。&lt;servlet&gt;同&lt;filter&gt;类似，此处不再赘述。————————————————原文链接：https://blog.csdn.net/believejava/article/details/43229361<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="标签元素"><a href="#标签元素" class="headerlink" title="标签元素"></a>标签元素</h2><h4 id="指定欢迎页面"><a href="#指定欢迎页面" class="headerlink" title="指定欢迎页面"></a>指定欢迎页面</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">&gt;</span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">&gt;</span></span>index1.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子指定了2个欢迎页面，显示时按顺序从第一个找起，如果第一个存在，就显示第一个，后面的不起作用。如果第一个不存在，就找第二个，以此类推。<br>    关于欢迎页面：访问一个网站时，默认看到的第一个页面就叫欢迎页，一般情况下是由首页来充当欢迎页的。</p><h4 id="命名与定制URL"><a href="#命名与定制URL" class="headerlink" title="命名与定制URL"></a>命名与定制URL</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servlet1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>net.test.TestServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servlet1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>//url-pattern的意思是所有的.do文件都会经过TestServlet处理。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定制初始化参数"><a href="#定制初始化参数" class="headerlink" title="定制初始化参数"></a>定制初始化参数</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servlet1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>net.test.TestServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>userName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>Tommy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>E-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>Tommy@163.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>//经过上面的配置，在servlet中能够调用getServletConfig().getInitParameter("param1")获得参数名对应的值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="上下文参数：声明应用范围内的初始化参数。"><a href="#上下文参数：声明应用范围内的初始化参数。" class="headerlink" title="上下文参数：声明应用范围内的初始化参数。"></a>上下文参数：声明应用范围内的初始化参数。</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>ContextParameter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>It is a test parameter.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>//在servlet里面可以通过getServletContext().getInitParameter("context/param")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指定错误处理页面，可以通过“异常类型”或“错误码”来指定错误处理页面。"><a href="#指定错误处理页面，可以通过“异常类型”或“错误码”来指定错误处理页面。" class="headerlink" title="指定错误处理页面，可以通过“异常类型”或“错误码”来指定错误处理页面。"></a>指定错误处理页面，可以通过“异常类型”或“错误码”来指定错误处理页面。</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">&gt;</span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">&gt;</span></span>/error404.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">&gt;</span></span>-----------------------------<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception-type</span><span class="token punctuation">&gt;</span></span>java.lang.Exception<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception-type</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">&gt;</span></span>/exception.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception-type</span><span class="token punctuation">&gt;</span></span>java.lang.NullException<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception-type</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">&gt;</span></span>/error.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置过滤器：比如设置一个编码过滤器，过滤所有资源"><a href="#设置过滤器：比如设置一个编码过滤器，过滤所有资源" class="headerlink" title="设置过滤器：比如设置一个编码过滤器，过滤所有资源"></a>设置过滤器：比如设置一个编码过滤器，过滤所有资源</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>XXXCharaSetFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>net.test.CharSetFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>XXXCharaSetFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置监听器"><a href="#设置监听器" class="headerlink" title="设置监听器"></a>设置监听器</h4><p> web.xml中的<listener></listener>有什么用? 没别的用处!就是配置监听类的~，它能捕捉到服务器的启动和停止! 在启动和停止触发里面的方法做相应的操作! 它必须在web.xml 中配置才能使用! web.xml 中listener元素不是只能有一个，有多个时按顺序执行。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span> 2      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>监听器类的完整路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span> 3 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>监听器中不能够写初始化参数; 可通过另个的途径达到初始化参数的效果: 1.写一个properties文件,在文件里写好初始化参数值, 2.在监听器中可以通得到properties文件中的值(写在静态块中)。</p><p>例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">TestServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token comment">//局部初始化参数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestServlet-init-&gt;myparam: "</span> <span class="token operator">+</span>config<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"myparam"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//全局初始化参数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TestServlet-init-allparam: "</span> <span class="token operator">+</span> config<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">"encoding"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"servlet销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"servlet初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//全局对象</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;!--spring配置--&gt;    &lt;context-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;    &lt;/context-param&gt;    &lt;listener&gt;        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;    &lt;/listener&gt;    &lt;!--springmvc的(前端，核心)中央控制器--&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;        &lt;init-param&gt;            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;            &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;        &lt;/init-param&gt;        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;        &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;    &lt;!-- 使用Rest风格的URI 将页面普通的post请求转为指定的delete或者put请求原理：在Aajx中发送post请求后，带_method参数，将其修改为PUT，或者DELETE请求--&gt;    &lt;filter&gt;        &lt;filter-name&gt;httpMethodFilter&lt;/filter-name&gt;        &lt;filter-class&gt;            org.springframework.web.filter.HiddenHttpMethodFilter        &lt;/filter-class&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;httpMethodFilter&lt;/filter-name&gt;        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;    &lt;!--配置中文乱码的过滤器--&gt;    &lt;filter&gt;        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;        &lt;init-param&gt;            &lt;param-name&gt;encoding&lt;/param-name&gt;            &lt;param-value&gt;UTF-8&lt;/param-value&gt;        &lt;/init-param&gt;        &lt;!--如果你在别的方法上写了乱码的过滤器 自己写的会不生效   就会强制变为web.xml里面设置的过滤器--&gt;        &lt;init-param&gt;            &lt;param-name&gt;forceRequestEncoding&lt;/param-name&gt;            &lt;param-value&gt;true&lt;/param-value&gt;        &lt;/init-param&gt;        &lt;init-param&gt;            &lt;param-name&gt;forceResponseEncoding&lt;/param-name&gt;            &lt;param-value&gt;true&lt;/param-value&gt;        &lt;/init-param&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;        &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;    &lt;/filter-mapping&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2021/04/16/linux-ji-chu/"/>
      <url>/2021/04/16/linux-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、 支持多线程和多 CPU 的操作系统。</p><h1 id="Linux的安装"><a href="#Linux的安装" class="headerlink" title="Linux的安装"></a>Linux的安装</h1><p>1.VMware安装</p><p>2.CentOS的安装</p><p>3.安装远程访问工具</p><p>链接：<a href="https://pan.baidu.com/s/1jQ_MB-hxsJZgIB2Vwbl6LA">https://pan.baidu.com/s/1jQ_MB-hxsJZgIB2Vwbl6LA</a><br>提取码：LZXD </p><h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><p><img src="https://i.loli.net/2021/06/25/T9NXq7UrsjJSa6A.png" alt="image-20210625233222930"></p><pre class="line-numbers language-none"><code class="language-none">bin (binaries)存放二进制可执行文件sbin (super user binaries)存放二进制可执行文件，只有root才能访问etc (etcetera)存放系统配置文件usr (unix shared resources)用于存放共享的系统资源home 存放用户文件的根目录root 超级用户目录dev (devices) 用于存放设备文件lib (library)存放跟文件系统中的程序运行所需要的共享库及内核模块mnt (mount)系统管理员安装临时文件系统的安装点boot存放用于系统引导时使用的各种文件tmp (temporary)用于存放各种临时文件var (variable)用于存放运行时需要改变数据的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Linux的用户"><a href="#Linux的用户" class="headerlink" title="Linux的用户"></a>Linux的用户</h1><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管 理员申请一个账号，然后以这个账号的身份进入系统。</p><h2 id="用户账号"><a href="#用户账号" class="headerlink" title="用户账号"></a>用户账号</h2><pre class="line-numbers language-none"><code class="language-none">用户账户一般非为两大类：超级管理员和普通用户。超级管理员：用root表示，root用户在系统中拥有最高权限。普通用户：除了root之外的用户。例如我们之前创建的xin用户，就是普通用户。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-查看用户信息"><a href="#1-查看用户信息" class="headerlink" title="1.查看用户信息"></a>1.查看用户信息</h4><pre class="line-numbers language-none"><code class="language-none">#语法 cat /etc/passwd- root:用户名- x ：密码 ：已经加密 ，密码存放在 vi /etc/shadow 密码文件- 0: 账号id ，userId- 0： 组id ，group id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-创建一个用户"><a href="#2-创建一个用户" class="headerlink" title="2.创建一个用户"></a>2.创建一个用户</h4><pre class="line-numbers language-none"><code class="language-none"># 创建一个用户#语法：useradd 选项 用户名#选项： -c comment 指定一段注释性描述。-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。-g 用户组 指定用户所属的用户组。-G 用户组，用户组 指定用户所属的附加组。-s Shell文件 指定用户的登录Shell。-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-删除一个用户"><a href="#3-删除一个用户" class="headerlink" title="3.删除一个用户"></a>3.删除一个用户</h4><pre class="line-numbers language-none"><code class="language-none"># 删除一个用户#语法：userdel 选项 用户名； 其中-r是常用的选项，表示将用户的主目录一起删除。#案例：userdel -r lina02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-用户口令的管理"><a href="#4-用户口令的管理" class="headerlink" title="4.用户口令的管理:"></a>4.用户口令的管理:</h4><pre class="line-numbers language-none"><code class="language-none">用户口令的管理其实就是用户密码的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。指定和修改用户口令的命令是 passwd 。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。# 用户口令的管理#语法：passwd 选项 用户名可使用的选项：-l 锁定口令，即禁用账号。-u 口令解锁。-d 使账号无口令。-f 强迫用户下次登录时修改口令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Linux的常用命令-重要"><a href="#Linux的常用命令-重要" class="headerlink" title="Linux的常用命令-重要"></a>Linux的常用命令-重要</h1><h4 id="1-查看目录"><a href="#1-查看目录" class="headerlink" title="1.查看目录"></a>1.查看目录</h4><pre class="line-numbers language-none"><code class="language-none">ls :查看当前路径下的文件名称ls -a :全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)ls -d ：仅列出目录本身，而不是列出目录内的文件数据(常用)ls -l ：长数据串列出，包含文件的属性与权限等等数据；(常用)ll: 等价于ls -lls -al :目录下的所有文件列出来(含属性与隐藏档)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-切换目录"><a href="#2-切换目录" class="headerlink" title="2.切换目录"></a>2.切换目录</h4><pre class="line-numbers language-none"><code class="language-none">cd [相对路径或绝对路径]#使用绝对路径切换到 local 目录cd /usr/local/# 表示回到自己的家目录，亦即是 /root 这个目录cd ~# 表示去到目前的上一级目录，亦即是 /root 的上一级目录的意思；cd ..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-显示当前目录"><a href="#3-显示当前目录" class="headerlink" title="3.显示当前目录"></a>3.显示当前目录</h4><pre class="line-numbers language-none"><code class="language-none">pwd 是 Print Working Directory 的缩写，也就是显示目前所在目录的命令。语法：pwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-创建目录"><a href="#4-创建目录" class="headerlink" title="4.创建目录"></a>4.创建目录</h4><pre class="line-numbers language-none"><code class="language-none">语法：mkdir [-mp] 目录名称-m ：配置文件的权限喔！直接配置，不需要看默认权限的脸色-p ：直接将所需要的目录(包含上一级目录)递归创建起来！查看帮助 mkdir --help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">示例：/tmp底下尝试创建数个新目录看看：cd /tmpmkdir kkb &lt;==创建一名为 kkb 的新目录mkdir test1/test2/test3/test4mkdir: cannot create directory `test1/test2/test3/test4':No such file or directory &lt;== 没办法直接创建此目录啊！mkdir -p test1/test2/test3/test4加了这个 -p 的选项，可以自行帮你创建多层目录！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-删除目录"><a href="#5-删除目录" class="headerlink" title="5. 删除目录"></a>5. 删除目录</h4><p>rmdir 命令用来删除空的目录。</p><pre class="line-numbers language-none"><code class="language-none">语法： rmdir [-p] 目录名称-p ：连同上一级『空的』目录也一起删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-文件操作"><a href="#6-文件操作" class="headerlink" title="6.文件操作"></a>6.文件操作</h4><h5 id="cat-查看所有内容"><a href="#cat-查看所有内容" class="headerlink" title="cat 查看所有内容"></a>cat 查看所有内容</h5><pre class="line-numbers language-none"><code class="language-none">语法：cat 由第一行开始显示文件内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="more-一页一页的显示文件内容"><a href="#more-一页一页的显示文件内容" class="headerlink" title="more 一页一页的显示文件内容"></a>more 一页一页的显示文件内容</h5><pre class="line-numbers language-none"><code class="language-none">一页一页翻动语法： more 文件名称例如：more /etc/man_db.config....(中间省略)....--More--(28%) &lt;== 重点在这一行喔！你的光标也会在这里等待你的命令在 more 这个程序的运行过程中，你有几个按键可以按的：空白键 (space)：代表向下翻一页；Enter ：代表向下翻『一行』；:f ：立刻显示出档名以及目前显示的行数；q ：代表立刻离开 more ，不再显示该文件内容。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="less-一页一页翻动"><a href="#less-一页一页翻动" class="headerlink" title="less 一页一页翻动"></a>less 一页一页翻动</h5><pre class="line-numbers language-none"><code class="language-none">语法： less 文件名称例如：less /etc/man.config....(中间省略)....: &lt;== 这里可以等待你输入命令！less运行时可以输入的命令有：空白键 ：向下翻动一页；[pagedown]：向下翻动一页；[pageup] ：向上翻动一页；q ：离开 less 这个程序；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-创建文件"><a href="#7-创建文件" class="headerlink" title="7.创建文件"></a>7.创建文件</h4><pre class="line-numbers language-none"><code class="language-none">语法：touch 创建一个空白的普通文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-写入内容"><a href="#8-写入内容" class="headerlink" title="8.写入内容"></a>8.写入内容</h4><p>echo 把内容重定向到指定的文件中 ，有则打开，无则创建</p><pre class="line-numbers language-none"><code class="language-none">语法： echo '内容'&gt;文件名称 覆盖模式echo '内容'&gt;&gt;文件名称 追加模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="9-复制-拷贝文件"><a href="#9-复制-拷贝文件" class="headerlink" title="9.复制/拷贝文件"></a>9.复制/拷贝文件</h4><pre class="line-numbers language-none"><code class="language-none">语法： cp [-adfilprsu] 来源档(source) 目标档(destination)-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；-i：若clear问动作的进行(常用)-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；-r：递归持续复制，用於目录的复制行为；(常用)-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；-u：若 destination 比 source 旧才升级 destination ！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-移动文件"><a href="#10-移动文件" class="headerlink" title="10.移动文件"></a>10.移动文件</h4><pre class="line-numbers language-none"><code class="language-none">语法：mv [-fiu] source destination-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)示例：复制一文件，创建一目录，将文件移动到目录中cd /tmpcp ~/.bashrc bashrcmkdir mvtestmv lina mvtest将刚刚的目录名称更名为 mvtest2[root@www tmp]# mv mvtest mvtest2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-删除文件"><a href="#11-删除文件" class="headerlink" title="11.删除文件"></a>11.删除文件</h4><p>rm 可以移除文件或目录。</p><pre class="line-numbers language-none"><code class="language-none">语法： rm [-fir] 文件或目录-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；-i ：互动模式，在删除前会询问使用者是否动作-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打包与拆包"><a href="#打包与拆包" class="headerlink" title="打包与拆包"></a>打包与拆包</h3><pre class="line-numbers language-none"><code class="language-none">一般Linux 上常用的压缩方式是选用tar 将许多文件打包成一个文件，再以 gzip压缩命令压缩成紧xxx.tar.gz(或者xxx.tgz)的文件。常用参数:-c:创建一个新tar文件-v:显示运行过程的信息-f:指定文件名-z:调用gzip 压缩命令进行压缩-t:查看压缩文件的内容-x:解开tar 文件打包:tar -cvf xxx.tar 要打包的文件或目录的列表，用空格隔开打包并且压缩:tar -zcvf xxx.tar.gz 要打包的文件或目录的列表，用空格隔开解压:tar -xvf xx.tartar -zxvf xx.tar.gz -C /usr/kkb 注意-C大写，防止拆包解压的路径找不到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-查看进程快照"><a href="#12-查看进程快照" class="headerlink" title="12. 查看进程快照"></a>12. 查看进程快照</h4><pre class="line-numbers language-none"><code class="language-none">ps ： - axu 显示当前进程的快照查看Java进程：ps - axu | grep java查看MySQL进程 ps - axu | grep mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="管道"><a href="#管道" class="headerlink" title="管道 |"></a>管道 |</h5><p>管道是Linux中比较重要且常用的一个内容，其作用是将一个命令的输出作为另一个命令的输入，组合使 用。</p><pre class="line-numbers language-none"><code class="language-none">ls --help | more #分页查看帮助信息，按q退出<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="VIM的模式"><a href="#VIM的模式" class="headerlink" title="VIM的模式"></a>VIM的模式</h1><p>vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令 模式（Last line mode）。</p><h4 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h4><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><pre class="line-numbers language-none"><code class="language-none">此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。以下是常用的几个命令：i 切换到输入模式，以输入字符。x 删除当前光标所在处的字符。i: 切换到底线命令模式，以在最底一行输入命令。若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h4><p>在命令模式下按下i就进入了输入模式。</p><pre class="line-numbers language-none"><code class="language-none">在输入模式中，可以使用以下按键：字符按键以及Shift组合，输入字符ENTER，回车键，换行BACK SPACE，退格键，删除光标前一个字符DEL，删除键，删除光标后一个字符方向键，在文本中移动光标HOME/END，移动光标到行首/行尾Page Up/Page Down，上/下翻页Insert，切换光标为输入/替换模式，光标将变成竖线/下划线ESC，退出输入模式，切换到命令模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h4><p>在命令模式下按下:（英文冒号）就进入了底线命令模式</p><pre class="line-numbers language-none"><code class="language-none">底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。在底线命令模式中，基本的命令有（已经省略了冒号）：q 退出程序w 保存文件按ESC键可随时退出底线命令模式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/06/26/QDOBzdjCuXNMiJ6.png" alt="image-20210626103034222"></p><h1 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h1><p><img src="https://i.loli.net/2021/06/26/LQCw35UxzWIpsP8.png" alt="image-20210626103344865"></p><pre class="line-numbers language-none"><code class="language-none">权限共有10个字符，我们将它分为4大部分来理解：- --- --- ---第1部分、表示文件的类型- 表示是一个文件d 表示是一个目录l 表示是一个连接（理解为快捷方式）第2部分、当前用户具有的对该文件的权限 （owner 属主，缩写u）第3部分、当前组内其他用户具有的对该文件的权限 （group 属组，缩写g）第4部分、其他组的用户具有的对该文件的权限 （other 其他，缩写o）r：Read 读w：Write 写x：eXecute 执行针对目录加执行权限，文件不加执行权限（因文件具备执行权限有安全隐患）对于文件和目录来说，r，w，x有着不同的作用和含义：针对文件：r：读取文件内容w：修改文件内容x：执行权限对除二进制程序以外的文件没什么意义针对目录：目录本质可看做是存放文件列表、节点号等内容的文件r：查看目录下的文件列表w：删除和创建目录下的文件x：可以cd进入目录，能查看目录中文件的详细属性，能访问目录下文件内容（基础权限）PS：root账户不受文件权限的读写限制，执行权限受限制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/06/26/S4vMPHz5aWobQfJ.png" alt="image-20210626103558842"></p><p>用户获取文件权限的顺序： 先看是否为所有者，如果是，则后面权限不看；再看是否为所属组，如果 是，则后面权限不看。</p><h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><pre class="line-numbers language-none"><code class="language-none">chown 是change owner的意思，主要作用就是改变文件或者目录所有者.chmod 修改文件和文件夹读写执行属性。 使用权限:所有使用者chown 修改文件和文件夹的用户和用户组属性。使用权限:root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="mode方式"><a href="#mode方式" class="headerlink" title="mode方式"></a>mode方式</h4><pre class="line-numbers language-none"><code class="language-none">语法：chmod who opt per filewho：u g o a（all）(u 用户user ,g用户组group,o其他用户,a所有用户默认)opt：+添加某个权限 –取消某个权限 =赋予权限per：r w x X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">示例：chmod u=rwx,g=r lina03.txtchmod u+x,g+w,o+w test.log //r 读，w 写 x 执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="数字方式"><a href="#数字方式" class="headerlink" title="数字方式"></a>数字方式</h4><pre class="line-numbers language-none"><code class="language-none">语法：chmod XXX filerwx rw- r–-421 420 4007 6 40无权限,1表可执行=x,2表写入权限=w,4表可读权限=r例如：-rwxr--r--. 1 root root 10 Oct 16 02:55 yhp.log用户权限=rwx=4+2+1=7所属组权限=r--=4+0+0=4其他用户权限=r--=4+0+0=4组合:744修改权限:都加入写入权限:+2给用户组加入写入权限:+2给其他用户加入可执行权限:+1chmod 765 yhp.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Linux常用网络操作"><a href="#Linux常用网络操作" class="headerlink" title="Linux常用网络操作"></a>Linux常用网络操作</h1><h4 id="主机名操作"><a href="#主机名操作" class="headerlink" title="主机名操作"></a>主机名操作</h4><pre class="line-numbers language-none"><code class="language-none">hostname :显示主机名hostname XXX ：修改主机名，不推荐，临时生效永久生效修改主机名需要修改/etc/sysconfig/network文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="查询系统完整信息"><a href="#查询系统完整信息" class="headerlink" title="查询系统完整信息"></a>查询系统完整信息</h4><pre class="line-numbers language-none"><code class="language-none">uname -a ：显示完整的系统信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="IP地址操作"><a href="#IP地址操作" class="headerlink" title="IP地址操作"></a>IP地址操作</h4><pre class="line-numbers language-none"><code class="language-none">查看IP地址：ip addr修改IP地址：修改/etc/sysconfig/network-scripts/修改之后需要重启网络服务service network restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="网络服务管理"><a href="#网络服务管理" class="headerlink" title="网络服务管理"></a>网络服务管理</h4><pre class="line-numbers language-none"><code class="language-none">查看网络服务状态：systemctl status network启动网络服务：systemctl start network停止网络服务：systemctl stop network重启网络服务：systemctl restart network设置开机启动：systemctl enable network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h4><pre class="line-numbers language-none"><code class="language-none">查看防火墙状态： systemctl status firewalld启动防火墙： systemctl start firewalld关闭防火墙： systemctl stop firewalld查询防火墙服务是否开机启动：systemctl is-enabled firewalld开机时启用防火墙服务：systemctl enable firewalld开机时禁用防火墙服务：systemctl disable firewalld查询已经启动的服务列表：systemctl list-unit-files|grep enabled查询启动失败的服务列表：systemctl --failed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.安装JDK，教程可以参照，<a href="https://blog.csdn.net/weixin_44538107/article/details/88683530">农村小白</a></p><p>2.安装tomcat，参照<a href="https://blog.csdn.net/fukai8350/article/details/80467224">憨厚的鹿鹿</a></p><p>3..安装Mysql，<a href="https://blog.csdn.net/qq_41510551/article/details/110731610">笨菜先飞</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="/2021/04/16/servlet-ji-chu/"/>
      <url>/2021/04/16/servlet-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h1><ol><li><p>狭义的Servlet是指Java语⾔实现的⼀个接⼝，⼴义的Servlet 是指任何实现了这个Servlet接⼝的类，⼀般情况下，⼈们将Servlet理解为后者。</p></li><li><p>Servlet⼯作模式： ① 客户端发送请求⾄服务器 ② 服务器启动并调⽤Servlet，Servlet根据客户端请求⽣成响应内容并将其传给服务器 ③ 服务器将响应返回客户端</p></li></ol><h1 id="Servelt工作原理："><a href="#Servelt工作原理：" class="headerlink" title="Servelt工作原理："></a>Servelt工作原理：</h1><h1 id="Servelt的生命周期："><a href="#Servelt的生命周期：" class="headerlink" title="Servelt的生命周期："></a>Servelt的生命周期：</h1><p>当客户端⾸次发送第⼀次请求后，由容器(web服务器(tomcat))去解析请求, 根据请求找到对应的servlet, 判断该类的对象是否存在，不存在则创建servlet实例，调取init()⽅法 进⾏初始化操作,初始化完成后调取 service()⽅法,由service()判断客户端的请求⽅式，如果是get，则执⾏doGet(),如果是post则执⾏ doPost().处理⽅法完成后,作出相应结果给客户端.单次请求处理完毕。  ⾃定义名称 处理请求的类的完整路径   ⾃定义名称 请求名  当⽤户发送第⼆次以后的请求时,会判断对象是否存在,但是不再执⾏init()，⽽直接执⾏service⽅法,调取 doGet()/doPost()⽅法。当服务器关闭时调取destroy()⽅法进⾏销毁。</p><h2 id="处理乱码的问题："><a href="#处理乱码的问题：" class="headerlink" title="处理乱码的问题："></a>处理乱码的问题：</h2><p>setCharacterEncoding(“UTF-8”);//post提交时管⽤</p><p>get提交一般不会出现乱码  8.0版本以后</p><h2 id="get与post的区别："><a href="#get与post的区别：" class="headerlink" title="get与post的区别："></a>get与post的区别：</h2><p>get请求的数据会暴露在地址栏中，post不会</p><p> get  传输数据会受到ULR长度的限制  post不是ULR传值  理论上是不受限制  但在很多服务器上还是会对post提交数据的大小进行限制</p><p> 安全性：get提交会暴露信息   post不会</p><h2 id="重定向与转发："><a href="#重定向与转发：" class="headerlink" title="重定向与转发："></a>重定向与转发：</h2><p>重定向和转发的对⽐ </p><p>重定向: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span>sendRedirect<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转发:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"../success.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相同点:</p><p>都⽤来跳转⻚⾯ </p><p>不同点:</p><p> a.重定向时地址栏会改变,request中存储的数据会丢失.转发时地址栏显示的是请求⻚⾯的地 址,request数据可以保存。 </p><p>b.转发属于⼀次请求⼀次响应,重定向属于两次请求(地址栏修改了两次)两次响应。</p><h2 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/join"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"xin"</span><span class="token punctuation">,</span>initParams <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"init-stu"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"myinitparam"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>loadOnStartup <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//值越小，优先级越高</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>urlpatterns里面的路径与需要显示页面的action路径相同</p><p>name 不是必须的</p><p>注解有了就可以不用再web.xml中去配置了，很方便</p><p>解决问题：</p><p><img src="https://i.loli.net/2021/03/17/NQoOM8GZzDubBW9.png" alt="image-20210317213313420"></p><p>要是遇见这个问题</p><p><img src="https://i.loli.net/2021/03/17/b6VeTxh9YdFZJMO.png" alt="image-20210317213436156"></p><p>这样便可以解决</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>注解&amp;枚举&amp;反射</title>
      <link href="/2021/04/15/zhu-jie-mei-ju-fan-she/"/>
      <url>/2021/04/15/zhu-jie-mei-ju-fan-she/</url>
      
        <content type="html"><![CDATA[<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>枚举，可以把相关的常量分组到一个枚举类型里，而且枚举提供了比常量更多的方法。</p><h2 id="定义格式"><a href="#定义格式" class="headerlink" title="定义格式"></a>定义格式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">权限修饰符 <span class="token keyword">enum</span> 枚举名称 <span class="token punctuation">{</span>实例<span class="token number">1</span><span class="token punctuation">,</span>实例<span class="token number">2</span>，实例<span class="token number">3</span>，实例<span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Level2</span> <span class="token punctuation">{</span>  <span class="token comment">//枚举  1.5之后</span>    <span class="token function">LOW</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MEDIUM</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">HIGH</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数字越高代表级别越高</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> levelValue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Level2</span><span class="token punctuation">(</span><span class="token keyword">int</span> levelValue<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>levelValue <span class="token operator">=</span> levelValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLevelValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> levelValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLevelValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> levelValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>levelValue <span class="token operator">=</span> levelValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现接口的枚举</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Level3</span> <span class="token keyword">implements</span> <span class="token class-name">LShow</span><span class="token punctuation">{</span>    LOW<span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"低级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>MEDIUM<span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>HIGH<span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"高级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">LShow</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>一旦定义了枚举，最好不要妄图修改里面的值，除非修改是必要的。</p><p> 枚举类默认继承的是java.lang.Enum类而不是Object类 </p><p>枚举类不能有子类，因为其枚举类默认被final修饰</p><p> 只能有private构造方法 switch中使用枚举时，直接使用常量名，不用携带类名 </p><p>不能定义name属性，因为自带name属性</p><p> 不要为枚举类中的属性提供set方法，不符合枚举最初设计初衷。</p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。</p><p>主要用于： </p><p>​    编译格式检查 </p><p>​    反射中解析 </p><p>​    生成帮助文档 </p><p>​    跟踪代码依赖</p><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><pre class="line-numbers language-none"><code class="language-none">@Override ： 重写@Deprecated：废弃@SafeVarargsJava 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。@FunctionalInterface： 函数式接口Java 8 开始支持，标识一个匿名函数或函数式接口。@Repeatable：标识某注解可以在同一个声明上使用多次Java 8 开始支持@SuppressWarnings：抑制编译时的警告信息。 格式： @SuppressWarnings("unchecked") [^ 抑制单类型的警告] @SuppressWarnings("unchecked","rawtypes") [^ 抑制多类型的警告]@SuppressWarnings("all") [^ 抑制所有类型的警告]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抑制类注解相关参数</p><p><img src="https://i.loli.net/2021/06/25/d8KErlIxtGegNhA.png" alt="image-20210625120032692"></p><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>元注解是给注解进行注解，可以理解为注解的注解就是元注解。</p><p>J2SE5.0版本在 java.lang.annotation提供了四种元注解，专门注解其他的注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span> –<span class="token operator">-</span> 标记这些注解是否包含在用户文档中 javadoc。   <span class="token annotation punctuation">@Retention</span> –标识这个注解怎么保存，是只在代码中，还是编入<span class="token keyword">class</span>文件中，或者是在运行时可以通过反射访问   <span class="token annotation punctuation">@Target</span><span class="token operator">?</span> –注解用于什么地方   <span class="token annotation punctuation">@Inherited</span> – 是否允许子类继承该注解<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://i.loli.net/2021/06/25/fFapQg42vdTmhcP.png" alt="image-20210625123255942"></p><p>每 1 个 Annotation 对象，都会有唯一的 RetentionPolicy 属性；至于 ElementType 属性，则有 1~n 个。</p><h3 id="ElementType-注解的用途类型"><a href="#ElementType-注解的用途类型" class="headerlink" title="ElementType(注解的用途类型)"></a>ElementType(注解的用途类型)</h3><pre class="line-numbers language-none"><code class="language-none">public enum ElementType {TYPE, /* 类、接口（包括注释类型）或枚举声明 */    FIELD, /* 字段声明（包括枚举常量） */METHOD, /* 方法声明 */PARAMETER, /* 参数声明 */CONSTRUCTOR, /* 构造方法声明 */LOCAL_VARIABLE, /* 局部变量声明 */ANNOTATION_TYPE, /* 注释类型声明 */PACKAGE /* 包声明 */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RetentionPolicy"><a href="#RetentionPolicy" class="headerlink" title="RetentionPolicy"></a>RetentionPolicy</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RetentionPolicy</span> <span class="token punctuation">{</span>SOURCE<span class="token punctuation">,</span> <span class="token comment">/* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了 */</span>CLASS<span class="token punctuation">,</span> <span class="token comment">/* 编译器将Annotation存储于类对应的.class文件中。默认行为 */</span>RUNTIME <span class="token comment">/* 编译器将Annotation存储于class文件中，并且可由JVM读入 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义格式-1"><a href="#定义格式-1" class="headerlink" title="定义格式"></a>定义格式</h3><pre class="line-numbers language-none"><code class="language-none">@interface 自定义注解名{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">定义的注解，自动继承了java<span class="token punctuation">.</span>lang<span class="token punctuation">,</span><span class="token class-name"><span class="token namespace">annotation<span class="token punctuation">.</span></span>Annotation</span>接口注解中的每一个方法，实际是声明的注解配置参数方法的名称就是 配置参数的名称 方法的返回值类型，就是配置参数的类型。只能是：基本类型<span class="token operator">/</span><span class="token class-name">Class</span><span class="token operator">/</span><span class="token class-name">String</span><span class="token operator">/</span><span class="token keyword">enum</span> 可以通过<span class="token keyword">default</span>来声明参数的默认值如果只有一个参数成员，一般参数名为value 注解元素必须要有值，我们定义注解元素时，经常使用空字符串、<span class="token number">0</span>作为默认值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation1</span> <span class="token punctuation">{</span>参数类型 参数名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> 默认值<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是一个简易的自定义注解</p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>JAVA反射机制是在运行状态中，获取任意一个类的结构 , 创建对象 , 得到方法，执行方法 , 属性 !； 这种在运行状态动态获取信息以及动态调用对象方法的功能被称为java语言的反射机制。</p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><pre class="line-numbers language-none"><code class="language-none">Java类加载器（Java Classloader）是Java运行时环境（Java Runtime Environment）的一部分，负责动态加载Java类到Java虚拟机的内存空间中。java默认有三种类加载器，BootstrapClassLoader、ExtensionClassLoader、AppClassLoader。BootstrapClassLoader（引导启动类加载器）：嵌在JVM内核中的加载器，该加载器是用C++语言写的，主要负载加载JAVA_HOME/lib下的类库，引导启动类加载器无法被应用程序直接使用。ExtensionClassLoader（扩展类加载器）：ExtensionClassLoader是用JAVA编写，且它的父类加载器是Bootstrap。是由sun.misc.Launcher$ExtClassLoader实现的，主要加载JAVA_HOME/lib/ext目录中的类库。它的父加载器是BootstrapClassLoaderApp ClassLoader（应用类加载器）：App ClassLoader是应用程序类加载器，负责加载应用程序classpath目录下的所有jar和class文件。它的父加载器为Ext ClassLoade加载类：默认加载的是src路径下的文件，但是当项目存在resource root目录时，就变为了加载resource root下的文件了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/06/25/yPgaDXv7rnRqBZJ.png" alt="image-20210625124714295"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//类加载器</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>       <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Demo01</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"config.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当有source文件夹的时候  读取的文件名便不是src文件下的，而是source文件下的名称</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/*汗滴禾下土*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="得到Class的几种方式"><a href="#得到Class的几种方式" class="headerlink" title="得到Class的几种方式"></a>得到Class的几种方式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>       <span class="token comment">//第一种   通过包名.类名.class 加载类</span>       <span class="token comment">//Class&lt;Person&gt; c1 = Person.class;</span>       <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> c1 <span class="token operator">=</span> <span class="token class-name">Day28<span class="token punctuation">.</span>Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//class Day28.Person</span>       <span class="token comment">//第二种，通过类的对象获取类的信息</span>       <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> c2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> p<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//class Day28.Person</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>       <span class="token comment">//第三种</span>       <span class="token comment">//Class&lt;Person&gt; c3 = (Class&lt;Person&gt;) Class.forName("Day28.Person");</span>       <span class="token class-name">Class</span> c3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Day28.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//class Day28.Person</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2 <span class="token operator">&amp;&amp;</span> c1 <span class="token operator">==</span> c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反射-1"><a href="#反射-1" class="headerlink" title="反射"></a>反射</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Day28.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如何让用反射技术打破对象的私有类型</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> c3 <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c3<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这一步便是可以忽略权限检查</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> c3<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//加载类</span>        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Day28.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取类的构造方法</span>        <span class="token class-name">Constructor</span> c <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建对象</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取类的方法</span>        <span class="token class-name">Method</span> setName <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getMethods(),该方法是获取本类以及父类或者父接口中所有的公共方法(public修饰符修饰的)</span>        <span class="token class-name">Method</span> setAge <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setAge"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getDeclaredMethods(),该方法是获取本类中的所有方法，包括私有的(private、protected、默认以及public)的方法。</span>        setAge<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//参数1.哪个对象要执行setName方法</span>        <span class="token comment">//参数2.调用方法时传递的参数 0-n</span>        setName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setAge<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// getDeclaredMethod：返回Method方法对象；</span><span class="token comment">//invoke：根据传入的对象实例，通过配置的实参参数来调用方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="内省"><a href="#内省" class="headerlink" title="内省"></a>内省</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><pre class="line-numbers language-none"><code class="language-none">基于反射 , java所提供的一套应用到JavaBean的API一个定义在包中的类 ,拥有无参构造器所有属性私有,所有属性提供get/set方法实现了序列化接口这种类, 我们称其为 bean类 .Java提供了一套java.beans包的api , 对于反射的操作, 进行了封装 !<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//内省</span>        <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Express</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">BeanInfo</span> bi <span class="token operator">=</span> <span class="token class-name">Introspector</span><span class="token punctuation">.</span><span class="token function">getBeanInfo</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取一个bean信息</span>        <span class="token class-name">PropertyDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pds <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取bean类的 get/set方法 数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertyDescriptor</span> pd<span class="token operator">:</span>pds<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Method</span> get <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getReadMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Method</span> set <span class="token operator">=</span> pd<span class="token punctuation">.</span><span class="token function">getWriteMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取get  set方法</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>get<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span><span class="token function">getPropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取属性</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">/*public java.lang.String Day28.Demo06.Express.getAddress()public void Day28.Demo06.Express.setAddress(java.lang.String)addressclass java.lang.Stringpublic final native java.lang.Class java.lang.Object.getClass()nullclassclass java.lang.Classpublic java.lang.String Day28.Demo06.Express.getName()public void Day28.Demo06.Express.setName(java.lang.String)nameclass java.lang.Stringpublic java.lang.String Day28.Demo06.Express.getNumber()public void Day28.Demo06.Express.setNumber(java.lang.String)numberclass java.lang.Stringpublic java.lang.String Day28.Demo06.Express.getPhoneNumber()public void Day28.Demo06.Express.setPhoneNumber(java.lang.String)phoneNumberclass java.lang.StringProcess finished with exit code 0*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/06/25/xRFbStpqJ9Dg7WM.png" alt="image-20210625130532639"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Html简介</title>
      <link href="/2021/04/13/html-ji-chu/"/>
      <url>/2021/04/13/html-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><pre class="line-numbers language-none"><code class="language-none">HTML 是 HyperText Mark-up Language 的⾸字⺟简写，意思是 超⽂本标记语⾔HTML不是⼀种编程语⾔，⽽是⼀种 标记语⾔超⽂本指的是超链接，标记指的是标签，是⼀种⽤来制作⽹⻚的语⾔，这种语⾔由⼀个个的标签组成⽤这种语⾔制作的⽂件保存的是⼀个⽂本⽂件，⽂件的扩展名为 .html 或者 .htmhtml⽂档也叫 Web⻚⾯ ，其实就是⼀个⽹⻚，html⽂件⽤ 编辑器打开 显示的 是⽂本 ，可以⽤⽂本的⽅式 编辑它如果⽤ 浏览器打开 ，浏览器会按照标签描述内容将⽂件 渲染成⽹⻚ ，显示的⽹⻚可以从⼀个⽹⻚链接跳转到另外⼀个⽹⻚<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HTML5-，其基本格式如下"><a href="#HTML5-，其基本格式如下" class="headerlink" title="HTML5 ，其基本格式如下"></a>HTML5 ，其基本格式如下</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, user-scalable=no, initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标签介绍"><a href="#标签介绍" class="headerlink" title="标签介绍"></a>标签介绍</h3><pre class="line-numbers language-none"><code class="language-none">HTML⽂件的扩展名为 .html 或者 .htmHTML⽂本的结构包括“头”部分（head）、和“主体”部分（body），其中“头”部提供关于⽹⻚的信息，“主体”部分提供⽹⻚的具体内容HTML是由： 标签 和 内容 构成, 每个HTML⻚⾯都有两部分构成(head头和body体)，其最外层是 &lt;html&gt;...&lt;/html&gt; 标签包裹HTML标签（标记）的语法是由 &lt; 和 &gt; 括起来。HTML标签有两种： 双标签 ： &lt;标签名&gt;....&lt;/标签名&gt; 和 单标签 ： &lt;标签名 /&gt;HTML标签中还可以添加属性： &lt;标签名 属性名1=“值1” 属性名2=“值2” 属性名n=“值n”&gt;....&lt;/标签名&gt;HTML标签规范：标签名⼩写、属性使⽤双引号、标签要闭合。规范不遵守浏览器不会报错，会尽量解析，⼤不了不显示效果 ^_^ 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Head头部设置"><a href="#Head头部设置" class="headerlink" title="Head头部设置"></a>Head头部设置</h3><p>head标签作⽤于⽹⻚的头部，它的内容不会在正⽂中显示出来，主要完成对当前⻚⾯的各种设置</p><p>常用子标签：</p><p><img src="https://i.loli.net/2021/06/25/W1tVvoLwY9bacCT.png" alt="image-20210625134140349"></p><h2 id="HTML文本标签"><a href="#HTML文本标签" class="headerlink" title="HTML文本标签"></a>HTML文本标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hn</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hn</span><span class="token punctuation">&gt;</span></span> 其中n为1--6的值。 标题标签（加粗、独⽴⾏）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> 斜体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> 强调斜体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span> 加粗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span> 强调加粗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cite</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cite</span><span class="token punctuation">&gt;</span></span> 作品的标题（引⽤）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">&gt;</span></span> 下标 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span> 上标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">&gt;</span></span> 删除线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/06/25/zliLVU74ZdqepHT.png" alt="image-20210625134457968"></p><h2 id="HTML格式化标签"><a href="#HTML格式化标签" class="headerlink" title="HTML格式化标签"></a>HTML格式化标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span> 换⾏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> 换段<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/&gt;</span></span> ⽔平分割线列表：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span> ⽆序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span> 有序列表 其中type类型值：A a I i 1 start属性表示起始值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span> 列表项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">&gt;</span></span> ⾃定义列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">&gt;</span></span> ⾃定义列表头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span> ⾃定义列表内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> 常⽤于组合块级元素，以便通过 CSS 来对这些元素进⾏格式化<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> 常⽤于包含的⽂本，您可以使⽤ CSS 对它定义样式，或者使⽤ JavaScript 对它进⾏操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">在HTML⽹⻚中插⼊⼀张图⽚，使⽤img标签，他是⼀个单标签： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token punctuation">/&gt;</span></span>src： 图⽚名及url地址alt: 图⽚加载失败时的提示信息title：⽂字提示属性width：图⽚宽度height：图⽚⾼度border：边框线粗细<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">格式： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>链接⽬标url地址<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>显示⽂字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>a标签的属性：href: 必须，指的是链接跳转地址target: 表示链接的打开⽅式：_blank 新窗⼝_parent ⽗窗⼝_self 本窗⼝（默认）_top 顶级窗⼝framename 窗⼝名title：⽂字提示属性（详情）锚点链接：定义⼀个锚点： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> 以前使⽤的是 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>使⽤锚点： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#a1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跳到a1处<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><p><img src="https://i.loli.net/2021/06/25/eyqzQcoZlLS5nMG.png" alt="image-20210625135347597"></p><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><p>这里只做一些简单的介绍，HTML5还有新的标签，如媒体播放等。如何使用的话还请<a href="https://www.w3school.com.cn/tags/index.asp">参考手册</a></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">HTML表单标签(1) <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span> 表单标签form标签常⽤属性： *action属性:提交的⽬标地址(URL) *method属性:提交⽅式:get(默认)和post get⽅式是URL地址栏可⻅,⻓度受限制(IE2k ⽕狐8k),相对不安全. post⽅式是URL地址不可⻅,⻓度不受限制,相对安全. enctype:提交类型 target: 在何处打开⽬标 URL。 name:属性为表单起个名字.在HTML5中使⽤ id 代替。(2) <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">&gt;</span></span> 表单项标签input定义输⼊字段，⽤户可在其中输⼊数据。在 HTML 5 中，type 属性有很多新的值。 具体在下⾯有详解： 如：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> *type属性:表示表单项的类型:值如下: text:单⾏⽂本框 password:密码输⼊框 checkbox:多选框 注意要提供value值 radio:单选框 注意要提供value值 file:⽂件上传选择框 button:普通按钮 submit:提交按钮 image:图⽚提交按钮 reset:重置按钮, 还原到开始(第⼀次打开时)的效果 hidden:主表单隐藏域,要是和表单⼀块提交的信息,但是不需要⽤户修改 email ⽤于应该包含 e-mail 地址的输⼊域 url ⽤于应该包含 URL 地址的输⼊域 number ⽤于应该包含数值的输⼊域。 max 规定允许的最⼤值 min 规定允许的最⼩值 step 规定合法的数字间隔（如果 step="3"，则合法的数是 -3,0,3,6 等） value 规定默认值 range ⽤于应该包含⼀定范围内数字值的输⼊域，显示为滑动条 max 规定允许的最⼤值 min 规定允许的最⼩值 step 规定合法的数字间隔（如果 step="3"，则合法的数是 -3,0,3,6 等） value 规定默认值 ⽇期选择器 Date pickers date - 选取⽇、⽉、年 month - 选取⽉、年  week - 选取周和年 time - 选取时间（⼩时和分钟） datetime - 选取时间、⽇、⽉、年（UTC 时间） datetime-local - 选取时间、⽇、⽉、年（本地时间） search ⽤于搜索域，⽐如站点搜索或 Google 搜索 color 颜⾊选择 *name属性: 表单项名,⽤于存储内容值的 *value属性: 输⼊的值(默认指定值) *placeholder: 预期值的简短的提示信息 size属性: 输⼊框的宽度值 maxlength属性: 输⼊框的输⼊内容的最⼤⻓度 readonly属性: 对输⼊框只读属性 *disabled属性: 禁⽤属性 *checked属性: 对选择框指定默认选项 accesskey属性: 指定快捷键(不常⽤) (IE:alt+键 ⽕狐:alt+shift+键) tabindex属性: 通过数字指定tab键的切换顺序(不常⽤) src和alt是为图⽚按钮设置的 注意：reset重置按钮是将表单数据恢复到第⼀次打开时的状态，并不是清空image图⽚按钮，默认具有提交表单功能(3) <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span> 标签创建下拉列表。name属性:定义名称,⽤于存储下拉值的 size：定义菜单中可⻅项⽬的数⽬，html5不⽀持 disabled 当该属性为 true 时，会禁⽤该菜单。 multiple 多选 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span> 下拉选择项标签,⽤于嵌⼊到<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>标签中使⽤的; *value属性:下拉项的值 *selected属性:默认下拉指定项.(4) <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span> 多⾏的⽂本输⼊区域 name :定义名称,⽤于存储⽂本区域中的值。 cols ：规定⽂本区内可⻅的列数。 rows ：规定⽂本区内可⻅的⾏数。 disabled： 是否禁⽤ readonly： 只读 ... 默认值是在两个标签之间(5) <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span> 标签定义按钮。您可以在 button 元素中放置内容，⽐如⽂档或图像。这是该元素与由 input 元素创建的按钮的不同之处。(6) <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">&gt;</span></span> --fieldset 元素可将表单内的相关元素分组。disabled属性：定义 fieldset 是否可⻅。 form属性： 定义该 fieldset 所属的⼀个或多个表单。 (7) <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span> -- 标签为 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">&gt;</span></span> 、 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">&gt;</span></span> 以及 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span><span class="token punctuation">&gt;</span></span> 元素定义标题。(8) <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span><span class="token punctuation">&gt;</span></span> html5标签-- <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span><span class="token punctuation">&gt;</span></span> 标签定义选项组。此元素允许您组合选项(9) <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span><span class="token punctuation">&gt;</span></span> html5标签-- <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span><span class="token punctuation">&gt;</span></span> 标签定义可选数据的列表。与 input 元素配合使⽤，就可以制作出输⼊值的下拉列表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="框架标签"><a href="#框架标签" class="headerlink" title="框架标签"></a>框架标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">属性：src：规定在 iframe 中显示的⽂档的 URL name：规定 iframe 的名称 height：规定 iframe 的⾼度。 width：定义 iframe 的宽度。 frameborder：规定是否显示框架周围的边框。例如：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.html<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myframe<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>700<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre class="line-numbers language-none"><code class="language-none">CSS 指层叠样式表 (Cascading Style Sheets)样式定义如何显示控制 HTML 元素,从⽽实现美化HTML⽹⻚。样式通常存储在样式表中，⽬的也是为了解决内容与表现分离的问题外部样式表(CSS⽂件)可以极⼤提⾼⼯作效率多个样式定义可层叠为⼀，后者可以覆盖前者样式`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><pre class="line-numbers language-none"><code class="language-none">格式： 选择器{属性:值;属性:值;属性:值;....}注释：  格式： /* ... */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="如何插入样式表"><a href="#如何插入样式表" class="headerlink" title="如何插入样式表"></a>如何插入样式表</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">(1). 内联⽅式（⾏内样式）就是在HTML的标签中使⽤style属性来设置css样式格式： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html标签</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">属性</span><span class="token punctuation">:</span>值<span class="token punctuation">;</span><span class="token property">属性</span><span class="token punctuation">:</span>值<span class="token punctuation">;</span>....</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>被修饰的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html标签</span><span class="token punctuation">&gt;</span></span>举例：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>⾪书</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>在HTML中如何使⽤css样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 特点：仅作⽤于本标签。--&gt;</span>(2). 内部⽅式（内嵌样式）就是在head标签中使⽤ <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"> .... </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span> 标签来设置css样式举例：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"> ....css样式代码</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 特点：作⽤于当前整个⻚⾯ --&gt;</span>(3). 外部导⼊⽅式（外部链⼊）3.1(推荐）就是在head标签中使⽤标签导⼊⼀个css⽂件，在作⽤于本⻚⾯，实现css样式设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>⽂件名.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>特点：作⽤于整个⽹站优先级：当样式冲突时，就是采⽤就近原则，是值css属性离被修饰的内容最近的为主。若没有样式冲突则采⽤叠加效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h2><p>(1). html选择符（标签选择器）</p><pre class="line-numbers language-none"><code class="language-none">就是把html标签作为选择符使⽤如 p{....} ⽹⻚中所有p标签采⽤此样式h2{....} ⽹⻚中所有h2标签采⽤此样式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2). class类选择符 (使⽤点.将⾃定义名（类名）来定义的选择符)</p><pre class="line-numbers language-none"><code class="language-none">定义： .类名{样式....} 匿名类其他选择符名.类名{样式....}使⽤：&lt;html标签 class="类名"&gt;...&lt;/html标签&gt;.mc{color:blue;} /* 凡是class属性值为mc的都采⽤此样式 */p.ps{color:green;} /*只有p标签中class属性值为ps的才采⽤此样式*/注意：类选择符可以在⽹⻚中重复使⽤<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3).Id选择符:</p><pre class="line-numbers language-none"><code class="language-none">定义： #id名{样式.....}使⽤：&lt;html标签 id="id名"&gt;...&lt;/html标签&gt;注意：id选择符只在⽹⻚中使⽤⼀次.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(4). 关联选择符（包含选择符）</p><pre class="line-numbers language-none"><code class="language-none">格式： 选择符1,选择符2,选择符3 ...{样式....}table a{....} /*table标签⾥的a标签才采⽤此样式*/h1 p{color:red} /*只有h1标签中的p标签才采⽤此样式*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(5). 组合选择符（选择符组）</p><pre class="line-numbers language-none"><code class="language-none">h3,h4,h5{color:green;} /*h3、h4和h5都采⽤此样式*/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(6). 伪类选(伪元素)择符：</p><pre class="line-numbers language-none"><code class="language-none">格式： 标签名:伪类名{样式....}a:link {color: #FF0000; text-decoration: none} /* 未访问的链接 */a:visited {color: #00FF00; text-decoration: none} /* 已访问的链接 */a:hover {color: #FF00FF; text-decoration: underline} /* ⿏标在链接上 */a:active {color: #0000FF; text-decoration: underline} /* 激活链接 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下只需熟悉</p><p>(7). 关系选择器：</p><pre class="line-numbers language-none"><code class="language-none">div&gt;p 选择所有作为div元素的⼦元素pdiv+p 选择紧贴在div元素之后p元素div~p 选择div元素后⾯的所有兄弟元素p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(8). 属性选择器：</p><pre class="line-numbers language-none"><code class="language-none">[attribute]选择具有attribute属性的元素。[attribute=value]选择具有attribute属性且属性值等于value的元素。[attribute~=value]选择具有attribute属性且属性值为⼀⽤空格分隔的字词列表，其中⼀个等于value的元素。[attribute|=value]选择具有att属性且属性值为以val开头并⽤连接符"-"分隔的字符串的E元素。[attibute^=value]匹配具有attribute属性、且值以valule开头的E元素[attribute$=value]匹配具有attribute属性、且值以value结尾的E元素[attribute*=value]匹配具有attribute属性、且值中含有value的E元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(9). 结构性伪类选择器：</p><pre class="line-numbers language-none"><code class="language-none">::first-letter设置对象内的第⼀个字符的样式。::first-line设置对象内的第⼀⾏的样式。:before设置在对象前（依据对象树的逻辑结构）发⽣的内容。:after设置在对象后（依据对象树的逻辑结构）发⽣的内容。:lang(language)匹配使⽤特殊语⾔的E元素。:element1~element2::first-of-type匹配同类型中的第⼀个同级兄弟元素:last-of-type匹配同类型中的最后⼀个同级兄弟元素:only-of-type匹配同类型中的唯⼀的⼀个同级兄弟元素:only-child匹配⽗元素仅有的⼀个⼦元素*:nth-child(n)匹配⽗元素的第n个⼦元素:nth-last-child(n)匹配同类型中的倒数第n个同级兄弟元素*:first-child 匹配⽗元素的第⼀个⼦元素* :last-child 匹配⽗元素的最后⼀个⼦元素:root匹配元素在⽂档的根元素。在HTML中，根元素永远是HTML:empty匹配没有任何⼦元素（包括text节点）的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(10). *状态伪类选择器</p><pre class="line-numbers language-none"><code class="language-none">:link 设置超链接a在未被访问前的样式。:visited 设置超链接a在其链接地址已被访问过时的样式:active 设置元素在被⽤户激活（在⿏标点击与释放之间发⽣的事件）时的样式*:hover 设置元素在其⿏标悬停时的样式*:focus 设置元素在其获取焦点时的样式:target 匹配相关URL指向的E元素:enabled 匹配⽤户界⾯上处于可⽤状态的元素:disabled 匹配⽤户界⾯上处于禁⽤状态的元素:checked 匹配⽤户界⾯上处于选中状态的元素:not(selector)匹配不含有selector选择符的元素::selection 设置对象被选择时的样式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS常用属性"><a href="#CSS常用属性" class="headerlink" title="CSS常用属性"></a>CSS常用属性</h2><h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><p><img src="https://i.loli.net/2021/06/25/RIkvZ9UynmS3sT2.png" alt="image-20210625151012464"></p><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p><img src="https://i.loli.net/2021/06/25/QZxBDaHCAJsor4g.png" alt="image-20210625151040168"></p><h4 id="颜色属性值"><a href="#颜色属性值" class="headerlink" title="颜色属性值"></a>颜色属性值</h4><pre class="line-numbers language-none"><code class="language-none">a. HSL颜⾊: 通过对⾊调(H)、饱和度(S)、亮度(L)三个颜⾊通道的变化以及它们相互之间的叠加来得到各式各样的颜⾊. background-color: hsl(240,100%,50%);color:white；b. HSLA颜⾊: ⾊调(H)、饱和度(S)、亮度(L)、透明度(A)； background-color: hsla(0,100%,50%,0.2);*c. RGB颜⾊: 红(R)、绿(G)、蓝(B)三个颜⾊通道的变化 background-color: rgba(200,100,0);d. RGBA颜⾊: 红(R)、绿(G)、蓝(B)、透明度(A) background-color: rgba(0,0,0,0.5);*e. 图⽚透明度的设置 img.opacity{ opacity:0.25;} 兼容IE8 filter:alpha(opacity=100);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字体属性：font"><a href="#字体属性：font" class="headerlink" title="字体属性：font"></a>字体属性：font</h3><pre class="line-numbers language-none"><code class="language-none"> font: 简写*font-size: 字体⼤⼩：20px，60%基于⽗对象的百分⽐取值*font-family：字体：宋体，Arial font-style： normal正常；italic斜体； oblique倾斜的字体*font-weight： 字体加粗 ：bold font-variant: small-caps ⼩型的⼤写字⺟字体 font-stretch: [了解]⽂字的拉伸是相对于浏览器显示的字体的正常宽度（⼤部分浏览器不⽀持）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⽂本属性："><a href="#⽂本属性：" class="headerlink" title="⽂本属性："></a>⽂本属性：</h3><pre class="line-numbers language-none"><code class="language-none"> text-indent: ⾸⾏缩进：text-indent:2em; text-overflow： ⽂本的溢出是否使⽤省略标记（...）。clip|ellipsis（显示省略标记）*text-align: ⽂本的位置：left center right text-transform：对象中的⽂本的⼤⼩写：capitalize(⾸字⺟)|uppercase⼤写|lowercase⼩写*text-decoration: 字体画线：none⽆、underline下画线，line-through贯穿线 text-decoration-line：[了解]⽂本装饰线条的位置（浏览器不兼容）*text-shadow: ⽂本的⽂字是否有阴影及模糊效果 vertical-align: ⽂本的垂直对⻬⽅式 direction：⽂字流⽅向。ltr | rtl white-space:nowrap; /* 强制在同⼀⾏内显示所有⽂本*/*letter-spacing: ⽂字或字⺟的间距 word-spacing：单词间距*line-height：⾏⾼*color： 字体颜⾊<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="背景属性：background"><a href="#背景属性：background" class="headerlink" title="背景属性：background"></a>背景属性：background</h3><pre class="line-numbers language-none"><code class="language-none"> background：简写*background-color: 背景颜⾊*background-image: 背景图⽚*background-repeat：是否重复，如何重复?(平铺)*background-position：定位 background-attachment： 是否固定背景， scroll:默认值。背景图像是随对象内容滚动 fixed:背景图像固定css3的属性:*background-size: 背景⼤⼩，如 background-size:100px 140px;多层背景： background:url(test1.jpg) no-repeat scroll 10px 20px, url(test2.jpg) no-repeat scroll 50px 60px, url(test3.jpg) no-repeat scroll 90px 100px; background-origin:content-box,content-box,content-box; background-clip:padding-box,padding-box,padding-box; background-size:50px 60px,50px 60px,50px 60px;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="边框："><a href="#边框：" class="headerlink" title="边框："></a>边框：</h3><pre class="line-numbers language-none"><code class="language-none">border:宽度 样式 颜⾊;border-color;border-style; 边框样式：solid实现，dotted点状线，dashed虚线border-width:border-left-color; 左边框颜色border-left-style; 左边框样式border-left-width:...CSS3的样式border-radius：圆⻆处理box-shadow: 设置或检索对象阴影<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内补⽩（内补丁）"><a href="#内补⽩（内补丁）" class="headerlink" title="内补⽩（内补丁）"></a>内补⽩（内补丁）</h3><pre class="line-numbers language-none"><code class="language-none">padding： 检索或设置对象四边的内部边距,如padding:10px; padding:5px 10px;padding-top： 检索或设置对象顶边的内部边距padding-right： 检索或设置对象右边的内部边距padding-bottom：检索或设置对象下边的内部边距padding-left： 检索或设置对象左边的内部边距<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外补⽩（外补丁）"><a href="#外补⽩（外补丁）" class="headerlink" title="外补⽩（外补丁）"></a>外补⽩（外补丁）</h3><pre class="line-numbers language-none"><code class="language-none">margin： 检索或设置对象四边的外延边距,如 margin:10px; margin:5px auto;margin-top： 检索或设置对象顶边的外延边距margin-right： 检索或设置对象右边的外延边距margin-bottom： 检索或设置对象下边的外延边距margin-left： 检索或设置对象左边的外延边距<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Position定位"><a href="#Position定位" class="headerlink" title="Position定位"></a>Position定位</h3><pre class="line-numbers language-none"><code class="language-none">*position: 定位⽅式：absolute(绝对定位)、fixed(固定)（relative定位参考，可对内部相对absolute定位）*z-index: 层叠顺序，值越⼤越在上⽅。*top: 检索或设置对象与其最近⼀个定位的⽗对象顶部相关的位置 right: 检索或设置对象与其最近⼀个定位的⽗对象右边相关的位置 bottom: 检索或设置对象与其最近⼀个定位的⽗对象下边相关的位置*left: 检索或设置对象与其最近⼀个定位的⽗对象左边相关的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Layout布局"><a href="#Layout布局" class="headerlink" title="Layout布局"></a>Layout布局</h3><pre class="line-numbers language-none"><code class="language-none">*display： 是否及如何显示：none隐藏，block块状显示...*float: 指出了对象是否及如何浮动:值none | left | right*clear： 清除浮动：none | left | right | both两侧 visibility：设置或检索是否显示对象。visible|hidden|collapse。 与display属性不同，此属性为隐藏的对象保留其占据的物理空间 clip: 检索或设置对象的可视区域。区域外的部分是透明的。 rect(上-右-下-左) 如：clip:rect(auto 50px 20px auto);上和左不裁剪，右50，下20.*overflow: 超出隐藏：hidden，visible：不剪切内容 overflow-x：内容超过其指定宽度时如何管理内容: visible | hidden | scroll | auto overflow-y：内容超过其指定⾼度时如何管理内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表格相关属性"><a href="#表格相关属性" class="headerlink" title="表格相关属性"></a>表格相关属性</h3><pre class="line-numbers language-none"><code class="language-none">table-layout 设置或检索表格的布局算法border-collapse 设置或检索表格的⾏和单元格的边是合并在⼀起还是按照标准的HTML样式分开 separate | collapseborder-spacing 设置或检索当表格边框独⽴时，⾏和单元格的边框在横向和纵向上的间距caption-side 设置或检索表格的caption对象是在表格的那⼀边 top | right | bottom | leftempty-cell 设置或检索当表格的单元格⽆内容时，是否显示该单元格的边框 hide | show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Flexible-Box-弹性盒⼦-旧版"><a href="#Flexible-Box-弹性盒⼦-旧版" class="headerlink" title="Flexible Box 弹性盒⼦(旧版)"></a>Flexible Box 弹性盒⼦(旧版)</h3><pre class="line-numbers language-none"><code class="language-none">table-layout 设置或检索表格的布局算法border-collapse 设置或检索表格的⾏和单元格的边是合并在⼀起还是按照标准的HTML样式分开 separate | collapseborder-spacing 设置或检索当表格边框独⽴时，⾏和单元格的边框在横向和纵向上的间距caption-side 设置或检索表格的caption对象是在表格的那⼀边 top | right | bottom | leftempty-cell 设置或检索当表格的单元格⽆内容时，是否显示该单元格的边框 hide | show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多栏-Multi-column"><a href="#多栏-Multi-column" class="headerlink" title="多栏 Multi-column"></a>多栏 Multi-column</h3><pre class="line-numbers language-none"><code class="language-none">columns 设置或检索对象的列数和每列的宽度column-width 设置或检索对象每列的宽度column-count 设置或检索对象的列数column-gap 设置或检索对象的列与列之间的间隙column-rule 设置或检索对象的列与列之间的边框column-rule-width 设置或检索对象的列与列之间的边框厚度column-rule-style 设置或检索对象的列与列之间的边框样式column-rule-color 对象的列与列之间的边框颜⾊column-span 象元素是否横跨所有列column-fill 对象所有列的⾼度是否统⼀column-break-before 对象之前是否断⾏column-break-after 对象之后是否断⾏column-break-inside 对象内部是否断⾏<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动画-Animation"><a href="#动画-Animation" class="headerlink" title="动画 Animation"></a>动画 Animation</h3><pre class="line-numbers language-none"><code class="language-none">animation 检索或设置对象所应⽤的动画特效animation-name 检索或设置对象所应⽤的动画名称animation-duration 检索或设置对象动画的持续时间animation-timing-function 检索或设置对象动画的过渡类型animation-delay 检索或设置对象动画延迟的时间animation-iteration-count 检索或设置对象动画的循环次数animation-direction 检索或设置对象动画在循环中是否反向运动animation-play-state 检索或设置对象动画的状态animation-fill-mode 检索或设置对象动画时间之外的状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Media-Queries-Properties媒体查询"><a href="#Media-Queries-Properties媒体查询" class="headerlink" title="Media Queries Properties媒体查询"></a>Media Queries Properties媒体查询</h3><pre class="line-numbers language-none"><code class="language-none">width 定义输出设备中的⻚⾯可⻅区域宽度height 定义输出设备中的⻚⾯可⻅区域⾼度device-width 定义输出设备的屏幕可⻅宽度device-height 定义输出设备的屏幕可⻅⾼度orientation 定义'height'是否⼤于或等于'width'。值portrait代表是，landscape代表否aspect-ratio 定义'width'与'height'的⽐率device-aspect-ratio 定义'device-width'与'device-height'的⽐率。 如常⻅的显示器⽐率：4/3, 16/9, 16/10device-aspect-ratio 定义'device-width'与'device-height'的⽐率。 如常⻅的显示器⽐率：4/3, 16/9, 16/10color 定义每⼀组输出设备的彩⾊原件个数。如果不是彩⾊设备，则值等于0color-index 定义在输出设备的彩⾊查询表中的条⽬数。如果没有使⽤彩⾊查询表，则值等于0monochrome 定义在⼀个单⾊框架缓冲区中每像素包含的单⾊原件个数。如果不是单⾊设备，则值等于0resolution 定义设备的分辨率。如：96dpi, 300dpi, 118dpcmscan 定义电视类设备的扫描⼯序grid ⽤来查询输出设备是否使⽤栅格或点阵。只有1和0才是有效值，1代表是，0代表否<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，只想说太多了  这得记到哪年哪月</p><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>JavaScript 是⼀种客户端脚本语⾔（脚本语⾔是⼀种轻量级的编程语⾔）。</p><p> JavaScript 通常被直接嵌⼊ HTML ⻚⾯，由浏览器解释执⾏ </p><p>JavaScript 是⼀种解释性语⾔（就是说，代码执⾏不进⾏预编译）。 </p><p>特点：弱类型和基于对象。(因为⾯向对象需要具有封装、继承、多态的特征)</p><p> JavaScript语⾔中包含三个核⼼：ECMAScript基本语法、DOM、BOM</p><p><strong>前端Web技术的组成：HTML、CSS、JavaScript</strong></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1.</span> <span class="token literal-property property">内部JavaScript</span><span class="token operator">:</span> 使⽤ <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span> <span class="token operator">...</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span> 标签属性：charset（可选）字符集设置、defer（可选执⾏顺序）值：defer、<span class="token function">language</span><span class="token punctuation">(</span>已废除<span class="token punctuation">)</span>、src（可选）使⽤外部的js脚本⽂件<span class="token function">type</span><span class="token punctuation">(</span>必选<span class="token punctuation">)</span>类型：值：text<span class="token operator">/</span>javascript格式：<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span><span class="token comment">//javaScript语⾔</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token number">2.</span> 外部 JavaScript<span class="token operator">:</span>格式：    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"my.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token number">3.</span> <span class="token literal-property property">内联JavaScript处理器</span><span class="token operator">:</span>格式：    <span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"javaScript语⾔"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:alert('aa');alert('bb')"</span><span class="token operator">&gt;</span>点击<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基础语法-1"><a href="#基础语法-1" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="显示输出方式"><a href="#显示输出方式" class="headerlink" title="显示输出方式"></a>显示输出方式</h3><pre class="line-numbers language-none"><code class="language-none">window.alert() 弹出警告框document.write() ⽅法将内容写到 HTML ⽂档中innerHTML 写⼊到 HTML 元素console.log() 写⼊到浏览器的控制台<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参考：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>JavaScript实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>测试JavaScript的输出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>did<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>div层<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> <span class="token comment">//弹出⼀个信息提示框</span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello JavaScript!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出到浏览器⻚⾯中</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"这个是⻚⾯中的输出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过写⼊HTML标签中，完成⻚⾯中的输出</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'did'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"div层中的输出"</span><span class="token punctuation">;</span> <span class="token comment">//控制台上的输出</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"控制台上的输出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><pre class="line-numbers language-none"><code class="language-none">var name = 'wangwu', age = 25;         注释   //   多行注释  /**/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><pre class="line-numbers language-none"><code class="language-none">值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。注意：Symbol 是 ES6 引⼊了⼀种新的原始数据类型，表示独⼀⽆⼆的值。引⽤数据类型： 对象(Object)、数组(Array)、函数(Function)。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h4><pre class="line-numbers language-none"><code class="language-none">//整数的进制的输出console.log(10); //输出⼗进制数的值console.log(0b10); //输出⼆进制数10的值 console.log(0o10); //输出⼋进制数10的值console.log(0x10); //输出⼗六进制数10的值//⼗进制转换其他进制var x = 110;x.toString(2)//转为2进制x.toString(8)//转为8进制x.toString(16)//转为16进制//其他进制转⼗进制var x = "110"//这是⼀个⼆进制的字符串表示parseInt(x, 2)//把这个字符串当做⼆进制， 转为⼗进制var x = "70"//这是⼀个⼋进制的字符串表示parseInt(x, 8)//把这个字符串当做⼋进制， 转为⼗进制var x = "ff"//这是⼀个⼗六进制的字符串表示parseInt(x, 16)//把这个字符串当做⼗六进制， 转为⼗进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><pre class="line-numbers language-none"><code class="language-none">typeof 操作符获取⼀个变量的类型typeof "zhangsan" // 返回 stringtypeof 3.14 // 返回 numbertypeof NaN // 返回 numbertypeof true // 返回 booleantypeof [10,20,30,40] // 返回 objecttypeof {name:'lisi', age:20} // 返回 objecttypeof new Date() // 返回 objecttypeof function(){} // 返回 functiontypeof myCar // 返回 undefined (如果 myCar 没有声明)typeof null // 返回 objecttypeof undefined // undefinedtypeof null // objectnull === undefined // falsenull == undefined // true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><pre class="line-numbers language-none"><code class="language-none">ECMAScript 中可⽤的 3 种强制类型转换如下： Boolean(value) - 把给定的值转换成 Boolean 型； Number(value) - 把给定的值转换成数字（可以是整数或浮点数）； String(value) - 把给定的值转换成字符串； 使⽤：Number（）、parseInt() 和parseFloat（） 做类型转换 Number()强转⼀个数值(包含整数和浮点数)。 *parseInt()强转整数， *parseFloat（）强转浮点数 函数isNaN()检测参数是否不是⼀个数字。 is not a number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/06/25/6CMfoO3aziRX9yI.png" alt="image-20210625161006886"></p><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p><img src="https://i.loli.net/2021/06/25/8d2aJsnFDEV1pWC.png" alt="image-20210625161125248"></p><h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><p>for…in 循环遍历对象：</p><pre class="line-numbers language-none"><code class="language-none">var ob = {"name":"张三","age":22,"sex":"男"};//遍历对象ob中的每个属性for(key in ob){ //输出属性和对应的属性值 console.log(key+":"+ob[key]);}/*//输出结果：name:张三age:22sex:男<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token comment">//定义</span> <span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">//调⽤函数</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过函数名直接调⽤函数</span><span class="token comment">//函数名(参数1，参数2，…)</span><span class="token function">myadd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数⾃调⽤</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello Function！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="常用内置函数"><a href="#常用内置函数" class="headerlink" title="常用内置函数"></a>常用内置函数</h5><pre class="line-numbers language-none"><code class="language-none">escape() //字串编码unescape() //字串反编码*eval() //将参数字符串作为脚本代码来执⾏。*isNaN() // is not a number (不是⼀个数值)*parseInt()*parseFloat()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h1><p><a href="https://jquery.cuishifeng.cn/">参考手册</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA JSON使用</title>
      <link href="/2021/03/26/json-ji-chu/"/>
      <url>/2021/03/26/json-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么叫JOSN："><a href="#1-什么叫JOSN：" class="headerlink" title="1.什么叫JOSN："></a>1.什么叫JOSN：</h2><p><a href="https://baike.baidu.com/item/JSON">JSON</a>(<a href="https://baike.baidu.com/item/JavaScript">JavaScript</a> Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 <a href="https://baike.baidu.com/item/ECMAScript">ECMAScript</a> (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><h2 id="2-那么我们应该如何使用JOSN呢："><a href="#2-那么我们应该如何使用JOSN呢：" class="headerlink" title="2.那么我们应该如何使用JOSN呢："></a>2.那么我们应该如何使用JOSN呢：</h2><p>在Java中，我们需要解析或者转换成JOSN格式的文件时，需要先安装一个阿里的或者谷歌的Json的jar<a href="https://github.com/alibaba/fastjson/wiki#download">文件</a>，点击文件就可以跳到github的下载页面</p><p><img src="https://i.loli.net/2021/01/30/Qa8FAfGTNwBzPr3.png" alt="image-20210130181552583"></p><p>然后点击箭头指标便可以下载了，在文件夹中找到下载的JAR文件不用解压，然后复制</p><p><img src="https://i.loli.net/2021/01/30/EBl6i7tTarMjROc.png" alt="image-20210130181812525"></p><p>在你需要使用到的sjon包里面创建一个lib包，直接粘贴进去</p><p><img src="https://i.loli.net/2021/01/30/OAeiPYjk9gh2p6V.png" alt="image-20210130182116116"></p><p>里面就会有这样一个   因为还没导入   你的还不能展开  我的是导入了的，偷个懒哈哈</p><p><img src="https://i.loli.net/2021/01/30/x9ulKdfet15HoTj.png" alt="image-20210130182248954"></p><p><img src="https://i.loli.net/2021/01/30/QjztiBOEHalGcdL.png" alt="image-20210130182744623"></p><p>这几步完成之后就可以使用了</p><p><img src="https://i.loli.net/2021/01/30/NPUfCV9dLoD8RhB.png" alt="image-20210130182914473"></p><p>看看自己的名字</p><p><img src="https://i.loli.net/2021/01/30/j4aMc7dKi8YRxCU.png" alt="image-20210130183006502"></p><p>然后跳到该页面下有了这个便可以使用了</p><p>当然还有一个常用的谷歌的Gson，jar<a href="https://github.com/google/gson#download">文件</a>点击进入下载页面</p><p><img src="https://i.loli.net/2021/01/30/g9YWLMTBlroGRta.png" alt="image-20210130184554762"></p><p>下载之后还是和之前步骤一样</p><h2 id="3-导包好了之后，开始使用它"><a href="#3-导包好了之后，开始使用它" class="headerlink" title="3.导包好了之后，开始使用它"></a>3.导包好了之后，开始使用它</h2><p><img src="https://i.loli.net/2021/01/30/NSfDjkXhlTRYudH.png" alt="image-20210130183701057"></p><p>可以转换为String对象</p><p><img src="https://i.loli.net/2021/01/30/FwnEpxAuQdhfPys.png" alt="image-20210130184710038"></p><p>可以转换为类的对象，转换之后就可以通过类转换为它的属性</p><p><img src="https://i.loli.net/2021/01/30/CzXV6uG3bFkHysE.png" alt="image-20210130184929795"></p><p>这是Gson的基本用法，类对象转换为JSON格式</p><p>Josn转换为类</p><p><img src="https://i.loli.net/2021/01/30/kIShs1cv3tn5lMO.png" alt="image-20210130185047141"></p><p>感谢参阅</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基本数据类型</title>
      <link href="/2021/03/23/java-ji-ben-shu-ju-lei-xing/"/>
      <url>/2021/03/23/java-ji-ben-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="java基本数据类型"><a href="#java基本数据类型" class="headerlink" title="java基本数据类型"></a>java基本数据类型</h1><h2 id="一-变量"><a href="#一-变量" class="headerlink" title="一.变量"></a>一.变量</h2><h4 id="按所属的数据类型划分："><a href="#按所属的数据类型划分：" class="headerlink" title="按所属的数据类型划分："></a>按所属的数据类型划分：</h4><p>​     基本数据类型变量 引用数据类型变量</p><h4 id="按被声明的位置划分："><a href="#按被声明的位置划分：" class="headerlink" title="按被声明的位置划分："></a>按被声明的位置划分：</h4><p>​    局部变量：方法或语句块内部定义的变量 成员变量：方法外部、类的内部定义的变量</p><p>特别注意：类的外面不能有变量的声明</p><h2 id="二-基本数据类型"><a href="#二-基本数据类型" class="headerlink" title="二.基本数据类型"></a>二.基本数据类型</h2><p><img src="https://i.loli.net/2021/06/22/8wVMfSjeEiTkxZr.png" alt="image-20210622195220958"></p><p>java语言支持的一些字符转义</p><p><img src="https://i.loli.net/2021/06/22/LqBkDzfPUYgKXpA.png" alt="image-20210622194700448"></p><h2 id="三-类型转换"><a href="#三-类型转换" class="headerlink" title="三.类型转换"></a>三.类型转换</h2><p>boolean </p><p>类型不能转换成任何其它数据类型。 </p><h4 id="自动类型转换："><a href="#自动类型转换：" class="headerlink" title="自动类型转换："></a>自动类型转换：</h4><p>容量小的类型自动转换成容量大的数据类型 byte,short,int -&gt; float -&gt;long -&gt;double </p><p>byte,short,int 不会互相转换，它们三者在计算时会转换成 int 类型</p><h4 id="强制类型转换："><a href="#强制类型转换：" class="headerlink" title="强制类型转换："></a>强制类型转换：</h4><p>容量大的类型转换成容量小的数据类型时，要加上强制转换符</p><p> long l = 100L; </p><p>int i = (int)l; 有可能造成精度降低或数据溢出，使用时要小心。</p><h4 id="四-计算机中信息的存储单位"><a href="#四-计算机中信息的存储单位" class="headerlink" title="四.计算机中信息的存储单位"></a>四.计算机中信息的存储单位</h4><h5 id="位（Bit）："><a href="#位（Bit）：" class="headerlink" title="位（Bit）："></a>位（Bit）：</h5><p>表示一个二进制数码 0 或 1，是计算机存储处理信息的最基本的单位。</p><h5 id="字节（Byte）："><a href="#字节（Byte）：" class="headerlink" title="字节（Byte）："></a>字节（Byte）：</h5><p>一个字节由 8 个位组成。它表示作为一个完整处理单位的 8 个二进制数码。</p><p>计算机内的二进制数值是以补码形式表示的。</p><h2 id="五-逻辑运算符"><a href="#五-逻辑运算符" class="headerlink" title="五.逻辑运算符"></a>五.逻辑运算符</h2><p><img src="https://i.loli.net/2021/06/22/CFQhUVBMjpTaikG.png" alt="image-20210622200651997"></p><h2 id="六-三木运算符"><a href="#六-三木运算符" class="headerlink" title="六.三木运算符"></a>六.三木运算符</h2><pre class="line-numbers language-none"><code class="language-none">Y?a:b;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就表示  y是一个判断语句  是否成立  成立之后返回a  否则返回b</p><h2 id="七-命名规范"><a href="#七-命名规范" class="headerlink" title="七.命名规范"></a>七.命名规范</h2><p>Java 对包、类、方法、参数和变量等要素命名时使用的字符序列称为标识符。规则如下: </p><p>由字母、数字、下划线（_）和美元符号（$）组成</p><p> 不能以数字开头。 区分大小。 长度无限制。</p><p> 不能是 Java 中的保留关键字。 </p><h5 id="命名规范：-软性建议"><a href="#命名规范：-软性建议" class="headerlink" title="命名规范： 软性建议"></a>命名规范： 软性建议</h5><h6 id="类名规范："><a href="#类名规范：" class="headerlink" title="类名规范："></a>类名规范：</h6><p>​    首字母大写，后面每个单词首字母大写（大驼峰式）。 </p><h6 id="方法名规范："><a href="#方法名规范：" class="headerlink" title="方法名规范："></a>方法名规范：</h6><pre><code> 首字母小写，后面每个单词首字母大写（小驼峰式）。 </code></pre><h6 id="变量名规范："><a href="#变量名规范：" class="headerlink" title="变量名规范："></a>变量名规范：</h6><p>​    全部小写</p><h2 id="八-转义字符"><a href="#八-转义字符" class="headerlink" title="八.转义字符"></a>八.转义字符</h2><p><img src="https://i.loli.net/2021/06/22/QBed2NjDyvqxEF7.png" alt="image-20210622201506500"></p><h2 id="九-ASCLL编码表"><a href="#九-ASCLL编码表" class="headerlink" title="九.ASCLL编码表"></a>九.ASCLL编码表</h2><p><a href="http://ascii.911cha.com/">点击查询:</a></p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="一-循环语句"><a href="#一-循环语句" class="headerlink" title="一.循环语句"></a>一.循环语句</h2><pre class="line-numbers language-none"><code class="language-none">for:for(初始化表达式;判断表达式;更新表达式) {     循环体语句 }    先判断在执行while:while(判断表达式){循环体语句 }  先判断在执行do/while:do{循环体语句}while(判断表达式)   无论如何都会执行一次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>数组是相同数据类型的多个数据的容器。这些元素按线性顺序排列，就是一个跟一个顺序排列</p><p><img src="https://i.loli.net/2021/06/22/YHTSVsPwZar95kb.png" alt="image-20210622203213768"></p><h3 id="数组长度获取"><a href="#数组长度获取" class="headerlink" title="数组长度获取"></a>数组长度获取</h3><p>数组名称.length   </p><p>注意：  该length为数组的属性</p><h3 id="数组常用算法"><a href="#数组常用算法" class="headerlink" title="数组常用算法"></a>数组常用算法</h3><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//冒泡排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">542</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> s<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    s <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//二分查找，要求数组有序排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>min<span class="token operator">+</span>max<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                min <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                max <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">&gt;</span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>                middle <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            middle <span class="token operator">=</span> <span class="token punctuation">(</span>min<span class="token operator">+</span>max<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下标是："</span> <span class="token operator">+</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//打印九九乘法表</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"九九乘法表："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//乘法表的原理与图形打印差不多</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> sum <span class="token operator">=</span> i<span class="token operator">*</span>j<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><p><img src="https://i.loli.net/2021/06/22/c9wMeJVSxd5TOyK.png" alt="image-20210622204740472"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/2021/03/16/io-liu/"/>
      <url>/2021/03/16/io-liu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/06/24/d5rlZiH2IPmpGqC.png" alt="image-20210624200422972"></p><h1 id="Java-IO-基本概念"><a href="#Java-IO-基本概念" class="headerlink" title="Java IO 基本概念"></a>Java IO 基本概念</h1><p>区分 Java 的输入和输出：把自己当成程序， 当你从外边读数据到自己这里就用输入（InputStream/Reader）， 向外边写数据就用输入（OutputStream/Writer）。</p><p>IO流的本质是数据传输，并且流是单向的。</p><p>IO分阻塞型IO和非阻塞型IO（NIO）</p><p>阻塞型IO在读取数据时，如果数据未到达，会一直阻塞到读取到数据为止，所以称为阻塞型IO，在高并发的环境下性能不佳。</p><p>NIO不是使用 “流” 来作为数据的传输方式，而是使用通道，通道的数据传输是双向的，且NIO的数据写入和读取都是异步的，不会阻塞线程，所以称为非阻塞型IO，在高并发的环境下性能很好。</p><p><strong>Java流操作的相关类或接口：</strong></p><p>File – 文件类</p><p>RandomAccessFile – 随机存储文件类</p><p>InputStream – 字节输入流</p><p>OutputStream – 字节输出流</p><p>Reader – 字符输入流</p><p>Writer – 字符输出流</p><p><strong>字节流和字符流的区别：</strong></p><p>· 读写单位的不同：字节流以字节（8bit）为单位。字符流以字符为单位，根据码表映射字符，一次可能读多个字节。</p><p>· 处理对象不同：字节流可以处理任何类型的数据，如图片、avi等，而字符流只能处理字符类型的数据。</p><p><strong>字节流的输入与输出对应图</strong></p><p><img src="https://i.loli.net/2021/06/24/wZzKQTIaWoid3XC.png" alt="image-20210624210902602"></p><p><strong>字符输入流Reader</strong></p><p>1、Reader是所有的输入字符流的父类，它是一个抽象类。</p><p>2、CharReader、StringReader 是两种基本的介质流，它们分别将Char数组、String中读取数据。PipedInputReader 是从与其他线程共用的管道中读取数据。</p><p>3、BuffereReader 很明显的是一个装饰器，它和其子类复制装饰其他Reader对象。</p><p>4、FilterReader 是所有自定义具体装饰流的父类，其子类PushbackReader 对Reader 对象进行装饰，回增加一个行号。</p><p>5、InputStreamReader 是一个连接字节流和字符流的桥梁，它将字节流转变为字符流。FileReader 可以说是一个达到此功能、常用的工具类，在其源代码中明显使用了将FileInputStream转变为Reader 的方法。我们可以从这个类中得到一定的技巧。Reader 中各个类的用途和使用方法基本和InputStream 中的类使用一致。</p><p><strong>字符输出流Writer</strong></p><p>1、Writer 是所有输出字符流的父类，它是一个抽象类。</p><p>2、CharArrayWriter、StringWriter 是两种基本的介质流，它们分别向Char 数组、String 中写入数据。PipedInputWriter 是从与其他线程共用的管道中读取数据。</p><p>3、BuffereWriter 很明显是一个装饰器，他和其子类复制装饰其他Reader对象。</p><p>4、FilterWriter 和PrintStream 及其类似，功能和使用也非常相似。</p><p>5、OutputStreamWriter 是OutputStream 到Writer 转换到桥梁，它的子类FileWriter 其实就是一个实现此功能的具体类（具体可以研究一下SourceCode）。功能和使用OutputStream极其类似。</p><p><strong>对应图</strong></p><p><img src="https://i.loli.net/2021/06/24/6CKmX2dljRyTSkW.png" alt="image-20210624211204545"></p><p><strong>字符流与字节流的转换</strong></p><p>InputStreamReader：字节到字符的桥梁。</p><p>OutputStreamWriter：字符到字节的桥梁。</p><p>这两个流对象时字符体系中的成员，它们有转换的作用，本身又是字符流，所以在构造的时候需要传入字节流对象进来。</p><p><strong>File类</strong></p><p>File类是对文件系统中文件以及文件夹进行封装的对象，可以通过对象的思想来操作文件和文件夹。File类保存文件或目录的各种数据信息，包括文件名、文件长度、最后修改时间、是否可读、获取当前文件的路径名、判断文件是否存在、获取当前目录中的文件列表、创建、删除文件和目录等方法。</p><p><strong>RandomAccessFile类</strong></p><p>该对象不是流体系中的一员，其封装了字节流，同时还封装了一个缓冲区（字符数组），通过内部的指针来操作字符数组中的数据。该对象特点：</p><p>1、该对象只能操作文件，所以构造函数接受两种数据类型的参数：</p><p>字符串文件路径</p><p><strong>File对象</strong></p><p>2、该对象既可以对文件进行读操作，也能进行写操作，在进行对象实例化时可指定操作模式（r , rw）。</p><p>注意：<strong>该对象在实例化时，如果要操作的文件不存在，会自动创建；如果文件存在，写数据未指定位置，会从头开始写，即覆盖原有的内容。</strong>可以用于多线程下载或多个线程同时写数据到文件。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>异常处理</title>
      <link href="/2021/03/16/yi-chang-chu-li/"/>
      <url>/2021/03/16/yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h1><p>异常是在程序中导致程序中断运行的一种指令流。为了保证程序出现异常之后仍然可以正确的执行完毕，所以要采用异常的处理机制。</p><h1 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h1><pre class="line-numbers language-none"><code class="language-none">如果要想对异常进行处理，则必须采用标准的处理格式，处理格式语法如下：try{// 有可能发生异常的代码段}catch(异常类型1 对象名1){// 异常的处理操作}catch(异常类型2 对象名2){// 异常的处理操作} ...finally{ // 异常的统一出口}//在进行异常的处理之后，在异常的处理格式中还有一个finally语句，那么此语句将作为异常的统一出口，不管是否产生了异常，最终都要执行此段代码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h1><p>1、 一旦产生异常，则系统会自动产生一个异常类的实例化对象。 </p><p>2、 那么，此时如果异常发生在try语句，则会自动找到匹配的catch语句执行，如果没有在try语句中，则会将异 常抛出. </p><p>3、 所有的catch根据方法的参数匹配异常类的实例化对象，如果匹配成功，则表示由此catch进行处理。</p><h1 id="异常的体系结构"><a href="#异常的体系结构" class="headerlink" title="异常的体系结构"></a>异常的体系结构</h1><p>异常指的是Exception ， Exception类， 在Java中存在一个父类Throwable（可能的抛出） </p><p>Throwable存在两个子类： </p><p>​        1.Error：表示的是错误，是JVM发出的错误操作,只能尽量避免，无法用代码处理。</p><pre><code>    2.Exception：一般表示所有程序中的错误，所以一般在程序中将进行try…catch的处理</code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>多异常捕获的注意点：</p><p> 1、 捕获更粗的异常不能放在捕获更细的异常之前。 </p><p>2、 如果为了方便，则可以将所有的异常都使用Exception进行捕获。</p><h1 id="Throws"><a href="#Throws" class="headerlink" title="Throws"></a>Throws</h1><pre class="line-numbers language-none"><code class="language-none">在程序中异常的基本处理已经掌握了，但是随异常一起的还有一个称为throws关键字，此关键字主要在方法的声明上使用，表示方法中不处理异常，而交给调用处处理。格式：返回值 方法名称()throws Exception{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java">编写一个类， 继承<span class="token class-name">Exception</span>，并重写一参构造方法 即可完成自定义受检异常类型。编写一个类， 继承<span class="token class-name">RuntimeExcepion</span>，并重写一参构造方法 即可完成自定义运行时异常类型。例如：<span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span> <span class="token comment">// 继承Exception，表示一个自定义异常类</span><span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// 调用Exception中有一个参数的构造</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>自定义异常可以做很多事情， 例如：<span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">//在这里给维护人员发短信或邮件， 告知程序出现了BUG。</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h1><pre class="line-numbers language-none"><code class="language-none">1. try-catch-finally 中哪个部分可以省略？答： catch和finally可以省略其中一个 ， catch和finally不能同时省略注意:格式上允许省略catch块, 但是发生异常时就不会捕获异常了,我们在开发中也不会这样去写代码.2. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？答：finally中的代码会执行详解：执行流程：1. 先计算返回值， 并将返回值存储起来， 等待返回2. 执行finally代码块3. 将之前存储的返回值， 返回出去；需注意：1. 返回值是在finally运算之前就确定了，并且缓存了，不管finally对该值做任何的改变，返回的值都不会改变2. finally代码中不建议包含return，因为程序会在上述的流程中提前退出，也就是说返回的值不是try或catch中的值3. 如果在try或catch中停止了JVM,则finally不会执行.例如停电- -, 或通过如下代码退出JVM:System.exit(0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2021/03/15/wang-luo-bian-cheng/"/>
      <url>/2021/03/15/wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="网络常识"><a href="#网络常识" class="headerlink" title="网络常识"></a>网络常识</h1><pre class="line-numbers language-none"><code class="language-none">1. 什么是计算机网络分布在不同地域的计算机, 通过硬件等网络设备使用通信线路互相连接形成的一个网格系统.计算机网络, 可以很方便的进行 信息的传递, 资源的共享 !2. 什么是计算机的IP地址IP地址 是计算机在互联网中的唯一标识 . 就像人在社会中的身份证号码.本机IP:127.0.0.1localhost3. 什么是 网络中 网站的域名域名可以简单的理解为, IP地址的别名. 更方便记忆, 当输入域名后(例如www.baidu.com) , 计算机会访问域名解析商 , 然后得到ip地址, 再进行访问.4. 什么是计算机的端口号端口号的范围 0-65535 之间 . *****与ip地址很相似, IP地址是计算机在网络中的唯一标识 .端口号是计算机中 程序的标识 . 用于在一台计算机中区分不同的应用程序端口号在使用时 , 应尽量避免0-1024之间的端口号, 因为已经被一些知名的软件 和 windows操作系统所占用了.5. 什么是计算机之间的通信协议是计算机与计算机之间交流的标准 .是对数据的 传输速率, 传入接口, 步骤控制 出错控制 等等 制定的一套标准 !常用的通信协议:1. http协议 : 超文本传输协议 . 80端口号2. https协议: 安全的超文本传输协议 443端口号3. ftp协议: 文件传输协议 21端口号4. TCP协议: 传输控制协议5. UDP协议: 数据报协议<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="网络编程程序分类"><a href="#网络编程程序分类" class="headerlink" title="网络编程程序分类"></a>网络编程程序分类</h1><p>1.B/S 程序 : 浏览器与服务器程序 </p><p>2.C/S 程序 : 客户端与服务器程序</p><h1 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h1><p>传输控制协议，指的是 从一台计算机的软件中, 将数据发送到另一台计算机的软件中的过程.</p><p> 七层网络模型: 应用层 / 表现层 / 会话层 / 传输层 / 网络层 / 数据链路层 / 物理层</p><h4 id="TCP报文"><a href="#TCP报文" class="headerlink" title="TCP报文"></a>TCP报文</h4><p>​                序号：表示发送的数据字节流，确保TCP传输有序，对每个字节编号</p><p>　　　　确认序号：发送方期待接收的下一序列号，接收成功后的数据字节序列号加 1。只有ACK=1时才有效。</p><p>　　　　ACK：确认序号的标志，ACK=1表示确认号有效，ACK=0表示报文不含确认序号信息</p><p>　　　　SYN：连接请求序号标志，用于建立连接，SYN=1表示请求连接</p><p>　　　　FIN：结束标志，用于释放连接，为1表示关闭本方数据流</p><h2 id="三次握手四次挥手"><a href="#三次握手四次挥手" class="headerlink" title="三次握手四次挥手"></a>三次握手四次挥手</h2><p>tcp协议客户端与服务器连接时, 存在三次握手操作, 确保消息能准确无误的发送. 断开连接是时 , 存在四次挥手操作</p><h3 id="三次握手过程分析："><a href="#三次握手过程分析：" class="headerlink" title="三次握手过程分析："></a>三次握手过程分析：</h3><pre class="line-numbers language-none"><code class="language-none">- 第一次：客户端发送请求到服务器，服务器知道客户端发送，自己接收正常。SYN=1,seq=x- 第二次：服务器发给客户端，客户端知道自己发送、接收正常，服务器接收、发送正常。ACK=1,ack=x+1,SYN=1,seq=y- 第三次：客户端发给服务器：服务器知道客户端发送，接收正常，自己接收，发送也正常.seq=x+1,ACK=1,ack=y+1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面分析过程可以看出，握手两次达不到让双方都得出自己、对方的接收、发送能力都正常的结论的。</p><h3 id="四次挥手过程分析"><a href="#四次挥手过程分析" class="headerlink" title="四次挥手过程分析"></a>四次挥手过程分析</h3><pre class="line-numbers language-none"><code class="language-none">- 第一次：客户端请求断开FIN,seq=u- 第二次：服务器确认客户端的断开请求ACK,ack=u+1,seq=v- 第三次：服务器请求断开FIN,seq=w,ACK,ack=u+1- 第四次：客户端确认服务器的断开ACK,ack=w+1,seq=u+1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TCP-协议-的-C-S程序"><a href="#TCP-协议-的-C-S程序" class="headerlink" title="TCP 协议 的 C/S程序"></a>TCP 协议 的 C/S程序</h2><pre class="line-numbers language-none"><code class="language-none">需要使用到两个类, 来编写TCP协议的 CS程序 .1.ServerSocket 搭建服务器2.Socket 搭建客户端两方使用socket(套接字 , 通信端点) 进行交流<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ServerSocket"><a href="#ServerSocket" class="headerlink" title="ServerSocket"></a>ServerSocket</h3><pre class="line-numbers language-none"><code class="language-none">用于创建服务器 . 创建完毕后, 会绑定一个端口号.然后此服务器可以等待客户端连接 .每连接一个客户端 , 服务器就会得到一个新的Socket对象, 用于跟客户端进行通信 .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//搭建服务器</span>        <span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">65535</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//端口号自己定</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器启动完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//等待客户端连接</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一个客户端连接了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>                        ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"滴~~打卡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*服务器启动完毕一个客户端连接了*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//客户端</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">65535</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到消息："</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">/*收到消息：滴~~打卡*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是一个简易的搭建，值得注意的是，当服务器与客户端连接成功时，如果客户端为输出消息，那服务端就值能接收消息。不能同时输出数据或者接收数据。</p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><pre class="line-numbers language-none"><code class="language-none">Socket accept(); 等待客户端连接 .此方法会导致线程的阻塞!直到一个新的客户端连接成功, return Socket对象后, 线程在继续执行.void close();释放占用的端口号 , 关闭服务器.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>用户数据报协议, 与tcp协议不同, UDP的连接是不可信的. 数据发送的成功与失败 与 数据报是无关的.</p><p>说说两者区别就可以了：</p><p><img src="https://i.loli.net/2021/06/25/YZRWl5kjpTxuFHV.png" alt="image-20210625113643153"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/2021/02/25/mian-xiang-dui-xiang/"/>
      <url>/2021/02/25/mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h1><p>OOP，Object Oriented Programming，原来就是面向对象的编程，OOD（面向对象的设计），OOA（面向对象的分析）。</p><p>把一组数据结构和处理它们的方法组成 <strong>对象</strong>（object），把相同行为的对象归纳为 <strong>类</strong>（class），通过类的 <strong>封装</strong>（encapsulation）隐藏内部细节，通过 <strong>继承</strong>（inheritance）实现类的 <strong>特化</strong>（specialization）／ <strong>泛化</strong>（generalization），通过 <strong>多态</strong>（polymorphism）实现基于对象类型的 <strong>动态分派</strong>（dynamic dispatch）。</p><h1 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h1><p>易维护</p><p>易扩展</p><p>模块化</p><p>方便建模</p><h1 id="3-面向对象的三大特征"><a href="#3-面向对象的三大特征" class="headerlink" title="3.面向对象的三大特征"></a>3.面向对象的三大特征</h1><h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>​    继承是Java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。</p><p>　　继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或类从父 类继承方法，使得子类具有父类相同的行为。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>​        继承鼓励类的重用</p><p>​        继承可以多层继承<br>　　一个类只能继承一个父类<br>　　父类中private修饰的不能被继承<br>　　构造方法不能被继承</p><h3 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念:"></a>概念:</h4><p>​    将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。</p><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><p>​    只能通过规定的方法访问数据。</p><p>​    隐藏类的实例细节，方便修改和实现。</p><h3 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h3><pre><code>#### 概念</code></pre><p>​    多态：就是对象的多种表现形式，（多种体现形态）</p><h4 id="多态的体现"><a href="#多态的体现" class="headerlink" title="多态的体现"></a>多态的体现</h4><p>​    对象的多态性，从概念上非常好理解，在类中有子类和父类之分，子类就是父类的一种形态 ，对象多态性就从此而来。 </p><p>​    ps: 方法的重载 和 重写 也是多态的一种， 不过是方法的多态（相同方法名的多种形态）。 </p><p>​    重载： 一个类中方法的多态性体现 </p><p>​    重写： 子父类中方法的多态性体现。</p><h4 id="多态的使用：对象的类型转换"><a href="#多态的使用：对象的类型转换" class="headerlink" title="多态的使用：对象的类型转换"></a>多态的使用：对象的类型转换</h4><p>​    类似于基本数据类型的转换： · </p><p>​    向上转型：将子类实例变为父类实例 </p><p>​        |- 格式：父类 父类对象 = 子类实例 ； · </p><p>​    向下转型：将父类实例变为子类实例 </p><p>​        |- 格式：子类 子类对象 = （子类）父类实例 ；</p><h1 id="4-类与对象"><a href="#4-类与对象" class="headerlink" title="4.类与对象"></a>4.类与对象</h1><ul><li><p><strong>对象</strong>：对象是类的一个实例（<strong>对象不是找个女朋友</strong>），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p></li><li><p><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</p><p>一个类可以包含以下类型变量：</p><ul><li><p><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</p></li><li><p><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</p></li><li><p><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</p><p>一个类可以拥有多个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>  <span class="token comment">//Item就是一个类</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token comment">//成员变量</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">//类变量</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//eat(){} 是一个构造方法</span>        <span class="token class-name">String</span> bug<span class="token punctuation">;</span> <span class="token comment">//局部变量</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//这就是通过Item类 通过new实例化的一个对象</span>        <span class="token class-name">Item</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="5-抽象类"><a href="#5-抽象类" class="headerlink" title="5.抽象类"></a>5.抽象类</h1><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><pre class="line-numbers language-none"><code class="language-none">抽象类必须使用abstract class声明一个抽象类中可以没有抽象方法。抽象方法必须写在抽象类或者接口中。格式：abstract class 类名{ // 抽象类}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><pre class="line-numbers language-none"><code class="language-none">只声明而未实现的方法称为抽象方法（未实现指的是：没有“{}”方法体），抽象方法必须使用abstract关键字声明。格式：abstract class 类名{ // 抽象类public abstract void 方法名() ; // 抽象方法，只声明而未实现}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不能被实例化"><a href="#不能被实例化" class="headerlink" title="不能被实例化"></a>不能被实例化</h4><pre class="line-numbers language-none"><code class="language-none">在抽象类的使用中有几个原则：· 抽象类本身是不能直接进行实例化操作的，即：不能直接使用关键字new完成。· 一个抽象类必须被子类所继承，被继承的子类（如果不是抽象类）则必须覆写(重写)抽象类中的全部抽象方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>1、 抽象类能否使用final声明？ </p><p>​    不能，因为final属修饰的类是不能有子类的 ， 而抽象类必须有子类才有意义，所以不能。 </p><p>2、 抽象类能否有构造方法？ </p><p>​    能有构造方法，而且子类对象实例化的时候的流程与普通类的继承是一样的，都是要先调用父类中的构造方法（默 认是无参的），之后再调用子类自己的构造方法。</p><h4 id="抽象类和普通类的区别"><a href="#抽象类和普通类的区别" class="headerlink" title="抽象类和普通类的区别"></a>抽象类和普通类的区别</h4><p>1、抽象类必须用public或protected修饰(如果为private修饰，那么子类则无法继承，也就无法实现其抽象方法）。 默认缺省为 public </p><p>2、抽象类不可以使用new关键字创建对象， 但是在子类创建对象时， 抽象父类也会被JVM实例化。 </p><p>3、如果一个子类继承抽象类，那么必须实现其所有的抽象方法。如果有未实现的抽象方法，那么子类也必须定义为 abstract类</p><h1 id="6-接口"><a href="#6-接口" class="headerlink" title="6.接口"></a>6.接口</h1><h4 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h4><pre class="line-numbers language-none"><code class="language-none">如果一个类中的全部方法都是抽象方法，全部属性都是全局常量，那么此时就可以将这个类定义成一个接口。定义格式：    interface 接口名称{    全局常量 ;    抽象方法 ;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>优点： </p><p>​     1、 降低程序的耦合性 </p><p>​     2、 易于程序的扩展 </p><p>​     3、 有利于程序的维护</p><h4 id="接口的实现implements"><a href="#接口的实现implements" class="headerlink" title="接口的实现implements"></a>接口的实现implements</h4><pre class="line-numbers language-none"><code class="language-none">接口可以多实现：格式：class 子类 implements 父接口1,父接口2...{}以上的代码称为接口的实现。那么如果一个类即要实现接口，又要继承抽象类的话，则按照以下的格式编写即可：class 子类 extends 父类 implements 父接口1,父接口2...{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h4><pre class="line-numbers language-none"><code class="language-none">接口因为都是抽象部分， 不存在具体的实现， 所以允许多继承,例如：interface C extends A,B{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果一个接口要想使用，必须依靠子类。 子类（如果不是抽象类的话）要实现接口中的所有抽象方法。</p><h1 id="7-接口和抽象类的区别"><a href="#7-接口和抽象类的区别" class="headerlink" title="7.接口和抽象类的区别"></a>7.接口和抽象类的区别</h1><p>1、抽象类要被子类继承，接口要被类实现。 </p><p>2、接口只能声明抽象方法，抽象类中可以声明抽象方法，也可以写非抽象方法。 </p><p>3、接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。 </p><p>4、抽象类使用继承来使用， 无法多继承。 接口使用实现来使用， 可以多实现 </p><p>5、抽象类中可以包含static方法 ，但是接口中不允许（静态方法不能被子类重写，因此接口中不能声明静态方法） </p><p>6、接口不能有构造方法，但是抽象类可以有</p><h1 id="8-instanceof"><a href="#8-instanceof" class="headerlink" title="8.instanceof"></a>8.instanceof</h1><p>作用： </p><p>​    判断某个对象是否是指定类的实例，则可以使用instanceof关键字 格式：</p><p>​     实例化对象 instanceof 类   //此操作返回boolean类型的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> price<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> bug<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Item</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item <span class="token keyword">instanceof</span>  <span class="token class-name">Item</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出的值为true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-内部类"><a href="#9-内部类" class="headerlink" title="9.内部类"></a>9.内部类</h1><h4 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h4><p>在Java中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。 广泛意义上的内部类一般来说包括这四种： </p><p> 1、成员内部类 </p><p> 2、局部内部类</p><p> 3、匿名内部类 </p><p> 4、静态内部类</p><h4 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1.成员内部类"></a>1.成员内部类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">成员内部类是最普通的内部类，它的定义为位于另一个类的内部，形如下面的形式：<span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span> <span class="token comment">//内部类</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x="</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>特点：    成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括<span class="token keyword">private</span>成员和静态成员）。不过要注意的是，当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象，即默认情况下访问的是成员内部类的成员。  如果要访问外部类的同名成员，需要以下面的形式进行访问：外部类<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>成员变量外部类<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>成员方法    外部使用成员内部类<span class="token class-name">Outter</span> outter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Outter<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> outter<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-局部内部类"><a href="#2-局部内部类" class="headerlink" title="2.局部内部类"></a>2.局部内部类</h4><p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或 者该作用域内。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>         <span class="token comment">//局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//在构造方法内可以实例化Inner</span>        <span class="token class-name">Inner</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inner<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> aa<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outer<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出  10  20</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:</p><p>​    局部内部类就像是方法里面的一个局部变量一样，是不能有public、protected、private以及static修饰符的。</p><h4 id="3-匿名内部类"><a href="#3-匿名内部类" class="headerlink" title="3.匿名内部类"></a>3.匿名内部类</h4><pre class="line-numbers language-none"><code class="language-none">匿名内部类由于没有名字，所以它的创建方式有点儿奇怪。创建格式如下：new 父类构造器（参数列表）|实现接口（）{//匿名内部类的类体部分}在这里我们看到使用匿名内部类我们必须要继承一个父类或者实现一个接口，当然也仅能只继承一个父类或者实现一个接口。同时它也是没有class关键字，这是因为匿名内部类是直接使用new来生成一个对象的引用。当然这个引用是隐式的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h5><p>在使用匿名内部类的过程中，我们需要注意如下几点：</p><p> 1、使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或 者实现一个接口。</p><p> 2、匿名内部类中是不能定义构造函数的。</p><p> 3、匿名内部类中不能存在任何的静态成员变量和静态方法。 </p><p>4、匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。 </p><p>5、匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。 </p><p>6、只能访问final型的局部变量</p><h4 id="4-静态内部类"><a href="#4-静态内部类" class="headerlink" title="4.静态内部类"></a>4.静态内部类</h4><p>静态内部类也是定义在另一个类里面的类，只不过在类的前面多了一个关键字static。 静态内部类是不需要依赖于外部类对象的，这点和类的静态成员属性有点类似，并且它不能使用外部类的非static成员 变量或者方法.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">格式：<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Outter<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outter<span class="token punctuation">.</span>Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Outter</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">Outter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="10-包装类"><a href="#10-包装类" class="headerlink" title="10.包装类"></a>10.包装类</h1><p><img src="https://i.loli.net/2021/06/24/eE5qrzybF2lAKo9.png" alt="image-20210624113653818"></p><pre class="line-numbers language-none"><code class="language-none">装箱操作：在JDK1.4之前 ，如果要想装箱，直接使用各个包装类的构造方法即可，例如：int temp = 10 ; // 基本数据类型Integer x = new Integer(temp) ; // 将基本数据类型变为包装类在JDK1.5，Java新增了自动装箱和自动拆箱，而且可以直接通过包装类进行四则运算和自增自建操作。例如：Float f = 10.3f ; // 自动装箱float x = f ; // 自动拆箱System.out.println(f * f) ; // 直接利用包装类完成System.out.println(x * x) ; // 直接利用包装类完成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造方法 与 构造代码块 以及 静态代码块的执行顺序： </p><p>静态代码块 –&gt; 构造代码块 –&gt; 构造方法</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java常用类库</title>
      <link href="/2021/02/22/java-chang-yong-lei-ku/"/>
      <url>/2021/02/22/java-chang-yong-lei-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h1><pre class="line-numbers language-none"><code class="language-none">StringBuffer是使用缓冲区的，本身也是操作字符串的，但是与String类不同，String类的内容一旦声明之后则不可改变，改变的只是其内存地址的指向，而StringBuffer中的内容是可以改变的      对于StringBuffer而言，本身是一个具体的操作类，所以不能你String那样采用直接赋值的方式进行对象的实例化，必须通过构造方法完成      当一个字符串的内容需要被经常改变时就要使用StringBuffer      StringBuffer的内容是可以修改的，通过引用传递的方式完成      StringBuffer常用方法          字符串连接操作：append()          在任意位置处为StringBuffer添加内容：insert(int offset, boolean b)          字符串反转操作：reverse()          替换指定范围的内容：replace(int start, int end, String str)          字符串截取：substring(int start, int end)          字符串截取：delete(int start, int end)          查找指定的内容是否存在：indexOf()          以上的常用方法，实际上对于String类中也是存在的，所以使用的时候直接根据DOC文档查看即可      小结:          凡是需要频繁修改字符串内容的时候，都要使用StringBuffer类完成          StringBuffer类中也提供了一些方法是String类中所没有的，包括：delete()、insert()等等，这些方法需要的时候直接通过DOC文档进行查找<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h1><pre class="line-numbers language-none"><code class="language-none">Runtime：运行时，是一个封装了 JVM进程的类。每一个JAVA程序实际上都是启动了一个 JVM进程，那么每一个JVM进程都是对应这一个Runtime实例，此实例是由 JVM为其实例化的      Runtime类的定义中根本就没有构造方法，本类的构造方法被私有化了，通过 getRuntime()静态方法就可以取得Runtime类的实例      得到 JVM信息：每一个Runtime对象都是由 JVM进行实例化，所以，可以直接通过此类取得一些信息      可以直接使用 Runtime类运行本机的可执行程序：public Process exec(String command) throws IOException      exec()方法的加值值是 Process，表示一个进程的操作类，可以通过 destroy()方法销毁掉一个进程      小结          Runtime类本身就是单态设计的一种应用，因为在整个 JVM中只存在一个Runtime类的对象          可以使用Runtime类取得 JVM的系统处，或者使用 gc()方法释放掉垃圾空间          还可以使用此类运行本机的程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="System"><a href="#System" class="headerlink" title="System"></a>System</h1><pre class="line-numbers language-none"><code class="language-none">System类是一些与系统相关的属性和方法的集合在 System类中所有的属性都是静态的，要想引用这些属性和方法，直接使用System类调用即可      System类可以通过方法取得一个操作的计算时间：System.currentTimeMillis()      还可以列出本机的全部系统属性：getProperties()      一个对象如果不使用，则要等待进行垃圾收集，垃圾收集可以自动调用也可以手工调用，手工调用的时候就是调用 System.gc()或者 Runtime.getRuntiom().gc()。但是，如果一个对象在回收之前需要做一些收尾的工作，则就必须覆写 Object类中的：protected void finalize() throws Throwable，在对象被回收之前进行调用，以处理对象回收前的若干操作，例如释放资源等等      只有强制性调用 gc()的时候才可以发现对象被回收，当然，如果不调用，则系统也会在一定时间内自动进行回收      对象生命周期：初始化-&gt;对象实例化-&gt;垃圾收集-&gt;对象终结-&gt;卸载      小结          System类本身提供的静态属性都是与 IO操作有关的，在 IO操作中还将进一步涉及 System类的使用，可以使用 System类取得计算的时间，以及通过 gc()方法进行垃圾收集，此方法就是包装了 Runtime类中的 gc()方法 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="日期操作类"><a href="#日期操作类" class="headerlink" title="日期操作类"></a>日期操作类</h1><pre class="line-numbers language-none"><code class="language-none">Date类是一个较为常用的类，但是其操作的日期格式会有一些不符合于个人的要求，而如果要想进一步取得一些自己需要的时间，则可以使用Calendar类      在java.util包中定义了 Date类，Data类本身使用非常简单，直接输出其实例化对象即可      如果希望可以按照自己需要的格式显示时间，可以使用 Calendar类，此类可以直接将日期精确到毫秒      Calendar类是一个抽象类，既然是一个抽象类则肯定无法直接使用，此时就要利用对象多态性的概念，通过向上转型关系实例化本类对象      使用 Calendar类可以非常轻松取得一个完整的日期，但是在取得月份的时候要特别注意，需要增加1      最好的做法是将 Date进行一些相关的格式化操作      小结          Date类虽然直接取出的时间格式并不是十分理想，但是其作用依然很大          通过 Calendar类可以完整的取得时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DateFormat、SimpleDateFormat"><a href="#DateFormat、SimpleDateFormat" class="headerlink" title="DateFormat、SimpleDateFormat"></a>DateFormat、SimpleDateFormat</h1><pre class="line-numbers language-none"><code class="language-none">DateFormat类是一个抽象类，其类本身的内部提供了可以直接为其实例化的操作          得到日期的 DateFormat对象：public static final DateFormat getDateInstance()          得到日期时间的 DateFormat对象：public static final DateFormat getDateTimeInstance()      直接使用 DateFormat类完成Date类的转换：public final String Format(Date date)      通过DateFormat类可以直接将 date类的显示进行合理的格式化操作，此时采用的是默认的格式化操作，也可以通过 Locale对象指定要显示的区域      SimpleDateFormat类：功能是完成日期的显示格式化的          要想实现转换，则必须首先准备好一个模板，通过此模板进行日期数据的提取工作          在SimpleDateFormat类使用的时候，必须注意的是构造对象时要传入匹配的模板          构造方法：public SimpleDateFormat(String pattern)          转换：public Date parse(String source) throws ParseException：此时取得的是全部的时间数          格式化：public final String format(Date date)：将时间重新格式化成字符串显示      小结          DateFormat可以直接使用，但其本身是一个抽象类，可以根据 Locale指定的区域不同得到不同的日期时间显示效果          SimpleDateFormat类是 DateFormat类的子类，一般情况下来说 DateFormat类很少会直接使用，而都使用 SimpleDateFormat类完成          直接使用 SimpleDateFormat类取得时间会比使用 Calendar类更加方便，而且不用去增加补零的操作，所以在开发中如果需要取得一个日期的话，则基本上都使用 SimpleDateFormat类进行操作 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Math与Random"><a href="#Math与Random" class="headerlink" title="Math与Random"></a>Math与Random</h1><pre class="line-numbers language-none"><code class="language-none">Math类，表示数学操作，Math类中的方法都是静态方法，直接使用“类.方法名称()”的形式调用即可     Math.round求四舍五入的时候实际上是将小数点之后的内容全部忽略掉了，如果此时需要进行准确倍数的四舍五入，则需要使用其它的类完成：BigDecimal     Random类的主要功能是产生随机数，可以产生一个指定范围的随机数，Random类是定义在 java.util包中的类     小结         Math类中的 round()方法要特别注意         Random类的主要功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="NumberFormat"><a href="#NumberFormat" class="headerlink" title="NumberFormat"></a>NumberFormat</h1><pre class="line-numbers language-none"><code class="language-none">可以使用 NumberFormat类进行本地化的数字显示     可以使用 DecimalFormat指定格式化模板     NumberFormat表示数字的格式化类，即：可以按照本地的风格习惯进行数字的显示     MessageForm、DateFormat、NumberFormat是 Format三个常用的子类，如果要想进一步完成一个好的国际化程序，则肯定需要同时使用这样三个类完成，根据不同的国家显示日期，或者显示货币的形式          DecimalFormat是 NumberFormat类的子类，可以直接指定其显示的模板     DecimalFormat主要的作用是用来格式化数字使用，当然，在格式化数字的时候要比直接使用 NumberFormat更加方便，因为可以直接指定按用户自定义的方式进行格式化操作，与之前讲解的 SimpleDateFormat类似，如果要想进行自定义格式化操作，则必须指定格式化操作的模板     小结         NumberFormat完成的功能只是根据区域不同固定的数字显示格式         DecimalFormat是可以由用户自己指定其显示的形式，所以比较好用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="比较器（Comparable、Comparator）"><a href="#比较器（Comparable、Comparator）" class="headerlink" title="比较器（Comparable、Comparator）"></a>比较器（Comparable、Comparator）</h1><pre class="line-numbers language-none"><code class="language-none">Array类中存在 sort()方法，此方法可以直接对对象进行排序     可以直接使用 java.util.Arrays类进行数组的排序操作，但对象所在的类必须实现 Comparable接口，用于指定排序接口     比较器的排序原理：实际上比较器的操作，就是经常听到的二叉树的排序算法     排序的基本原理：使用第一个元素作为根节点，之后如果后面的内容比根节点要小，则放在左子树，如果内容比根节点的内容要大，则放在右子树     另一种比较器：如果一个类已经开发完成，但是此类建立的初期并不实现 Comparable接口，此时肯定是无法进行对象排序操作的，所以为了解决这样的问题，java又定义了另一个比较器的操作接口：Comparator     小结         在使用中尽可能还是使用 Comparable在需要排序的类上实现好此接口，而 Comparator需要单独建立一个排序的类，这样如果有很多的话，则排序的规则类就会非常的多，操作起来比较麻烦         掌握一点：只要是对象排序，则在java中永远是以 Comparable接口为准<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><pre class="line-numbers language-none"><code class="language-none">正则表达式可以方便的对数据进行匹配，可以执行更加复杂的字符串验证，拆分、替换功能     Pattern、Matcher两个类为正则的核心操作类，两个类都定义在 java.util.regex包中         Pattern类的主要作用是进行正则规范（如“[0-9]”就属于正则规范）的编写         Matcher类主要是执行规范，验证一个字符串是否符合其规范     正则表达式         \d：表示数字，[0-9]         \D：表示非数字，[^0-9]         \w：表示字母、数字、下划线，[a-zA-Z0-9]         \W：表示非字母、数字、下划线，[^a-zA-Z0-9]     要想驱动正则表达式，必须依靠Pattern类和Matcher类     Pattern类中没有明确的构造方法可以供用户使用，那么则肯定此类的构造方法被私有化了，则可以直接从Pattern类中取得本类的实例         指定好操作的正则：public static Pattern compile(String regex)         可以为 matcher类实例化：public Matcher matcher(CharSequence input)         拆分：public String[] spilt(Charsequence input)     如果要验证一个字符串是否符合规范，则可以使用Matcher类         进行字符串的验证：public boolean matcher()         字符串替换：public String replaceAll(String replacement)     只要使用正则的验证的规则，那么就可以匹配各种复杂的字符串     String类对正则的支持：在 JDK1.4之后，Java对正则进行了一些扩充，在 String中开始直接支持正则的操作         字符串匹配：public boolean matchers(String regex)         字符串替换：public String replaceAll(String regex, String replacement)         字符串拆分：public String[] split(String regex)     【注意】如果有时候发现一个字符串无法按照指定的字符拆分的话，则需要使用“\”转义，转义的时候两个“\”表示一个“\”     小结         使用正则可以方便的完成字符串的验证、拆分、替换等复杂功能         在开发中一般都会直接使用 String类中提供好的正则支持，而往往很少直接使用 Pattern类或者Matcher类         在一些正则应用的时候，对于一些敏感的字符要进行转义操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对象的序列化"><a href="#对象的序列化" class="headerlink" title="对象的序列化"></a>对象的序列化</h1><pre class="line-numbers language-none"><code class="language-none">什么叫对象序列化：一个对象产生之后实际上是在内存中为其开辟了一个存储空间，方便存储信息     对象序列化：就是把一个对象变为二进制的数据流的一种方法，通过对象序列化可以方便的实现对象的传输或存储     如果一个类的对象想被序列化，则对象所在的类必须实现 java.io.Serializable接口     Serializable接口中没有一个方法，此接口属于一个标识接口，表示具备了某种能力     被序列化了的对象，变为二进制 byte流     对象的序列化和反序列化         要想完成的输入或输出，还必须依靠对象输出流（ObjectOutputStream）和对象输入流（ObjectInputStream）         使用对象输出流输出序列化对象的步骤，有时也称为序列化，而使用对象输入读入对象的过程，有时也称为反序列化         对象序列化依靠：ObjectOutputStream，对象反序列化依靠：ObjectInputStream         ObjectOutputStream类的使用形式与 PrintStream非常的相似，在实例化时也需要传入一个 OutputStream的子类对象，之后根据传和的 OutputStream子类的对象不同，输出的位置也不同（装饰模式）     SerialVersionUID：在对象进行序列化或反序列化操作的时候，要考虑 JDK版本的问题，如果序列化的 JDK版本和反序列化的 JDK版本不统一则就有可能造成异常，所以在序列化操作中引入了一个 SerialVersionUID的常量，可以通过此常量来验证版本的一致性，在进行反序列化时，JVM会把传来的字节流中的 SerialVersionUID与本地相应实体（类）的　SerialVersionUID进行比较，如果相同就认为是一致的，要以进行反序列化，否则就会出现序列化版本不一致的异常     【问题】对象序列化到底序列化了哪些东西：所有的对象拥有各自的属性值，但是所有的方法都是公共的，所以序列化对象的时候实际上序列化的就是属性     Externalizable接口         使用Serializable接口可以方便的序列化一个对象，但是在序列化操作中也提供了另外一种序列化机制：Externalizable接口         被 Serializable接口声明的类其对象的内容都将被序列化，如果现在用户希望可以自己指定序列化的内容，则可以让一个类实现 Externalizable接口         写入方法：void writeExternal(ObjectOutput put) throws IOException         读取方法：void readExternal(ObjectInput in) throws IOExcetion,ClassNotFoundExceteption         在使用 Externalizable接口的时候需要在被序列化的类中定义一个无参构造函数，因为此接口在进行反序列化的时候，会先用类中的无参构造方法为其进行实例化，之后再将内容分别设置到属性之中     transient关键字：当使用 Serializable接口实现序列化操作时，如果一个对象中的某个属性不希望被序列化的话，则可以使用 transient关键字进行声明     transient + Serializable接口完成可以取代 Externalizable接口的功能     序列化一组对象         对象输出时只提供了一个对象的输出操作（writeObject(Object obj)），并没有提供多个对象的输出，所以如果现在要同时序列化多个对象的时候就可以使用对象数组进行操作，因为数组属于引用数据类型，所以可以直接使用 Object类型进行接收         如果要保存多个对象，则最好使用对象数组的形式完成         数组保存的数据有限，所以为了解决这样的问题，Java中引入了类集框架解决数组的存储限制问题     小结         对象序列化的作用：对象序列化并不一定都向文件中保存，也有可能面向于其它的输入或输出         被序列化的类必须实现 Serializable接口，如果某个属性不希望被保存下来，则可以使用 transient关键字声明         ObjectOutputStream序列化对象，ObjectInputStream反序列化对象         Externalizable接口的作用：开发人员手工实现序列化的操作         使用序列化保存一组对象的时候要使用对象数组的形式操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span>类位于 java<span class="token punctuation">.</span>util 包中，主要包含了操纵数组的各种方法<span class="token keyword">void</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span>  功能：对数组按照升序排序<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token keyword">to</span><span class="token punctuation">)</span>  功能：对数组元素指定范围进行排序（排序范围是从元素下标为from<span class="token punctuation">,</span>到下标为<span class="token keyword">to</span><span class="token operator">-</span><span class="token number">1</span>的元素进行排序）<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span>功能：可以为数组元素填充相同的值<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span>nums<span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 之前:2 5 0 4 1 -10         * 结果:1 1 1 1 1 1          */</span>         <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span><span class="token keyword">int</span> from<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span>功能：对数组的部分元素填充一个值<span class="token punctuation">,</span>从起始位置到结束位置，取头不取尾<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//对数组元素下标2到4的元素赋值为3</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span>nums<span class="token punctuation">)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/* 之前:2 5 0 4 1 -10         * 结果:2 5 3 3 3 -10          */</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span>功能：返回数组的字符串形式 <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 结果:[2, 5, 0, 4, 1, -10]         */</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepToString</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span>功能：返回多维数组的字符串形式<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepToString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 结果:[[1, 2], [3, 4]]         */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span>求字符串某一位置字符<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"asdfzxc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ch = z</span><span class="token number">2.</span>提取子串 <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"asdfzxc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">String</span> str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str2 = "dfzxc"</span> <span class="token class-name">String</span> str3 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str3 = "dfz"</span> <span class="token number">3.</span>字符串比较<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span><span class="token comment">//该方法是对字符串内容按字典顺序进行大小比较，通过返回的整数值指明当前</span>字符串与参数字符串的大小关系。若当前对象比参数大则返回正整数，反之返回负整数，相等返回<span class="token number">0</span>。<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareToIgnore</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span><span class="token comment">//与compareTo方法相似，但忽略大小写。</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anotherObject<span class="token punctuation">)</span><span class="token comment">//比较当前字符串和参数字符串，在两个字符串相等的时候返回true，否则返回false。</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span><span class="token comment">//与equals方法相似，但忽略大小写。</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a&gt;0</span><span class="token keyword">int</span> b <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b=0</span><span class="token keyword">boolean</span> c <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c=false</span><span class="token keyword">boolean</span> d <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//d=true</span><span class="token number">4.</span>字符串中单个字符查找<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token operator">/</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">//用于查找当前字符串中字符或子串，返回字符或子串在当前字符串中从左边起首次出现的位置，若没有出现则返回-1。</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token operator">/</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token comment">//改方法与第一种类似，区别在于该方法从fromIndex位置向后查找。</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token operator">/</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">//该方法与第一种类似，区别在于该方法从字符串的末尾位置向前查找。</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token operator">/</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token comment">//该方法与第二种方法类似，区别于该方法从fromIndex位置向前查找。</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"I am a good student"</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a = 2</span> <span class="token keyword">int</span> b <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b = 7</span> <span class="token keyword">int</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c = -1</span> <span class="token keyword">int</span> d <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//d = 5</span><span class="token keyword">int</span> e <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//e = 2</span><span class="token number">5.</span>字符串中字符的大小写转换<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回将当前字符串中所有字符转换成小写后的新串</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回将当前字符串中所有字符转换成大写后的新串</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"asDF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str1 = "asdf"</span>    <span class="token class-name">String</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str2 = "ASDF"</span>    <span class="token number">6.</span>字符串中字符的替换    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span> oldChar<span class="token punctuation">,</span> <span class="token keyword">char</span> newChar<span class="token punctuation">)</span><span class="token comment">//用字符newChar替换当前字符串中所有的oldChar字符，并返回一个新的字符串。</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">String</span> replacement<span class="token punctuation">)</span><span class="token comment">//该方法用字符replacement的内容替换当前字符串中遇到的第一个和字符串regex相匹配的子串，应将新的字符串返回。</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">,</span> <span class="token class-name">String</span> replacement<span class="token punctuation">)</span><span class="token comment">//该方法用字符replacement的内容替换当前字符串中遇到的所有和字符串regex相匹配的子串，应将新的字符串返回。</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"asdzxcasd"</span><span class="token punctuation">;</span> <span class="token class-name">String</span> str1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str1 = "gsdzxcgsd"</span> <span class="token class-name">String</span> str2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"asd"</span><span class="token punctuation">,</span><span class="token string">"fgh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str2 = "fghzxcfgh"</span> <span class="token class-name">String</span> str3 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string">"asd"</span><span class="token punctuation">,</span><span class="token string">"fgh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str3 = "fghzxcasd"</span> <span class="token class-name">String</span> str4 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"asd"</span><span class="token punctuation">,</span><span class="token string">"fgh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str4 = "fghzxcfgh"</span><span class="token number">7.</span>String <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//截去字符串两端的空格，但对于中间的空格不处理。</span>         <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">" a sd "</span><span class="token punctuation">;</span> <span class="token class-name">String</span> str1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> a <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a = 6</span> <span class="token keyword">int</span> b <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b = 4</span><span class="token number">8.</span><span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span>或<span class="token keyword">boolean</span> <span class="token function">endWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffix<span class="token punctuation">)</span><span class="token comment">//用来比较当前字符串的起始字符或子字符串prefix和终止字符或子字符串suffix是否和当前字符串相同，重载方法中同时还可以指定比较的开始位置offset。</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"asdfgh"</span><span class="token punctuation">;</span> <span class="token keyword">boolean</span> a <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"as"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a = true</span> <span class="token keyword">boolean</span> b <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">endWith</span><span class="token punctuation">(</span><span class="token string">"gh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b = true</span><span class="token number">9.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">//判断参数s是否被包含在字符串中，并返回一个布尔类型的值。</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"student"</span><span class="token punctuation">;</span> str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span> str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token number">10.</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">//将str作为分隔符进行字符串分解，分解后的字字符串在字符串数组中返回。</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"asd!qwe|zxc#"</span><span class="token punctuation">;</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"!|#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str1[0] = "asd";str1[1] = "qwe";str1[2] = "zxc";</span><span class="token number">11.</span>字符串与基本类型的转换    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span> <span class="token function">parseByte</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">short</span> <span class="token function">parseShort</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">short</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"12.34"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token string">"1.124"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>基本类型转换为字符串类型    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">12.34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他的不意义举例了，<a href="https://www.runoob.com/java/java-string.html">建议参考手册</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/2021/02/12/duo-xian-cheng/"/>
      <url>/2021/02/12/duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h4 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h4><p>​        进程是程序的一次动态执行过程，它需要经历从代码加载，代码执行到执行完毕的一个完整的过程，这个过程也是进程本身从产生，发展到最终消亡的过程。多进程操作系统能同时达运行多个进程（程序），由于 CPU 具备分时机制，所以每个进程都能循环获得自己的CPU 时间片。由于 CPU 执行速度非常快，使得所有程序好像是在同时运行一样。</p><p>​        所谓多线程是指一个进程在执行过程中可以产生多个更小的程序单元，这些更小的单元称为线程，这些线程可以同时存在，同时运行，一个进程可能包含多个同时执行的线程。</p><p>​        CPU很特殊，是被分配到线程的，所以线程是CPU分配的基本单位。</p><h4 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h4><p><strong>并发</strong>：是指同一个时间段内多个任务同时都在执行，并且都没有执行结束。并发任务强调在一个时间段内同时执行，而一个时间段由多个单位时间累积而成，所以说并发的多个任务在单位时间内不一定同时在执行 。</p><p><strong>并行</strong>：是说在单位时间内多个任务同时在执行 。</p><p>在多线程编程实践中，线程的个数往往多于CPU的个数，所以一般都称多线程并发编程而不是多线程并行编程。</p><h1 id="Java中线程实现的方式"><a href="#Java中线程实现的方式" class="headerlink" title="Java中线程实现的方式"></a>Java中线程实现的方式</h1><p>实现多线程有两种手段，一种是继承 Thread 类，另一种就是实现 Runnable 接口。</p><h4 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span><span class="token comment">// 实现Runnable接口，作为线程的实现类 </span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 表示线程的名称 </span>    <span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment">// 通过构造方法配置name属性 </span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 覆写run()方法，作为线程 的操作主体 </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"运行,i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> run<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyThread</span> myThreadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 实例化对象 </span>        <span class="token class-name">MyThread</span> myThreadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myThreadA<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 实例化Thread类对象 </span>        <span class="token class-name">Thread</span> threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myThreadB<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 启动多线程 </span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*b运行,i=0b运行,i=1b运行,i=2b运行,i=3b运行,i=4A运行,i=0A运行,i=1A运行,i=2A运行,i=3A运行,i=4*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span><span class="token comment">//继承Thread类</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//重写run方法</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"运行,i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> run<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyThread</span> myThreadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//实例化对象</span>        <span class="token class-name">MyThread</span> myThreadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThreadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用线程主体</span>        myThreadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*A运行,i=0A运行,i=1A运行,i=2A运行,i=3b运行,i=0A运行,i=4b运行,i=1b运行,i=2b运行,i=3b运行,i=4*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从程序可以看出，现在的两个线程对象是交错运行的，哪个线程对象抢到了 CPU 资源，哪个线程就可以运行，所以程序每次的运行结果肯定是不一样的，在线程启动虽然调用的是 start() 方法，但实际上调用的却是 run() 方法定义的主体。</p><h4 id="Thread-类和-Runnable-接口联系"><a href="#Thread-类和-Runnable-接口联系" class="headerlink" title="Thread 类和 Runnable 接口联系"></a>Thread 类和 Runnable 接口联系</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Thread 类也是 Runnable 接口的子类，但在Thread类中并没有完全实现 Runnable 接口中的 run() 方法</p><p>实际上 Thread 类和 Runnable 接口之间在使用上也是有区别的，如果一个类继承 Thread类，则不适合于多个线程共享资源，而实现了 Runnable 接口，就可以方便的实现资源的共享。</p><h4 id="线程的变化状态"><a href="#线程的变化状态" class="headerlink" title="线程的变化状态"></a>线程的变化状态</h4><p>任何线程一般具有5种状态，即创建，就绪，运行，阻塞，终止。终止也就是死亡</p><p>在此提出一个问题，Java 程序每次运行至少启动几个线程？</p><p>回答：至少启动两个线程，每当使用 Java 命令执行一个类时，实际上都会启动一个 JVM，每一个JVM实际上就是在操作系统中启动一个线程，Java 本身具备了垃圾的收集机制。所以在 Java 运行时至少会启动两个线程，一个是 main 线程，另外一个是垃圾收集线程。</p><h4 id="获取线程的一些属性"><a href="#获取线程的一些属性" class="headerlink" title="获取线程的一些属性"></a>获取线程的一些属性</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"运行, i="</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//取得当前线程的名称</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> run<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyThread</span> my<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//定义Runnable子类对象</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//系统自动设置线程名称</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"线程A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//手工设置线程名称</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*线程A运行, i=0线程A运行, i=1线程A运行, i=2Thread-0运行, i=0Thread-0运行, i=1Thread-0运行, i=2*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="线程的强制执行"><a href="#线程的强制执行" class="headerlink" title="线程的强制执行"></a>线程的强制执行</h5><p>可以使用 join() 方法让一个线程强制运行，线程强制运行期间，其他线程无法运行，必须等待此线程完成之后才可以继续执行。</p><h5 id="线程的休眠"><a href="#线程的休眠" class="headerlink" title="线程的休眠"></a>线程的休眠</h5><pre class="line-numbers language-none"><code class="language-none">在程序中允许一个线程进行暂时的休眠，直接使用 Thread.sleep() 即可实现休眠。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 覆写run()方法</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">try</span><span class="token punctuation">{</span>                 <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// 线程休眠</span>             <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token punctuation">}</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"运行，i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">// 取得当前线程的名字</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> run<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"线程A"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">// 实例化线程对象</span>                 <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"线程B"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">// 实例化线程对象</span>                 <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"线程C"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">// 实例化线程对象</span>                 t1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token comment">// 优先级最低</span>                 t2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token comment">// 优先级最高</span>                 t3<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">// 优先级最中等</span>                 t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动线程</span>                 t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动线程</span>                 t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*线程B运行，i = 0线程C运行，i = 0线程A运行，i = 0线程B运行，i = 1线程C运行，i = 1线程A运行，i = 1线程B运行，i = 2线程C运行，i = 2线程A运行，i = 2线程B运行，i = 3线程C运行，i = 3线程A运行，i = 3线程B运行，i = 4线程C运行，i = 4线程A运行，i = 4*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程阻塞与中断"><a href="#线程阻塞与中断" class="headerlink" title="线程阻塞与中断"></a>线程阻塞与中断</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//线程阻塞  所有消耗时间的操作</span>        <span class="token comment">//线程中断 一个线程是一个独立的执行路径，他是否答应结束，应该由其自身决定</span>        <span class="token class-name">MyRunnable</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个是main线程</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//让线程中断  打个标记  打标机不意味着死亡而是需要自己定义</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个是thread-0线程</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//打标记之后在这里处理</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发现中断标记"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//自杀</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">/*Thread-0:0main:0Thread-0:1main:1Thread-0:2main:2Thread-0:3main:3Thread-0:4main:4Thread-0:5发现中断标记Process finished with exit code 0*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="同步以及死锁"><a href="#同步以及死锁" class="headerlink" title="同步以及死锁"></a>同步以及死锁</h4><p>一个多线程的程序如果是通过 Runnable 接口实现的，则意味着类中的属性被多个线程共享，那么这样就会造成一种问题，如果这多个线程要操作同一个资源时就有可能出现资源同步问题。</p><p>解决方法：给正在运行的线程上锁</p><p>格式：</p><h5 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步对象<span class="token punctuation">)</span><span class="token punctuation">{</span>  需要同步的代码 <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">;</span>    <span class="token comment">// 假设一共有5张票</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 要对当前对象进行同步</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 还有票</span>                      <span class="token keyword">try</span> <span class="token punctuation">{</span>                          <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加入延迟</span>                      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卖票：ticket = "</span> <span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> run<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyThread</span> mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">// 定义线程对象</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">// 定义Thread对象</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">// 定义Thread对象</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">// 定义Thread对象</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*卖票：ticket = 5卖票：ticket = 4卖票：ticket = 3卖票：ticket = 2卖票：ticket = 1*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> 方法返回值 方法名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">;</span>    <span class="token comment">// 假设一共有5张票</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token comment">// 调用同步方法</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 声明同步方法</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>ticket<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">// 还有票</span>              <span class="token keyword">try</span><span class="token punctuation">{</span>                  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// 加入延迟</span>              <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卖票：ticket = "</span> <span class="token operator">+</span> ticket<span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> run<span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token class-name">MyThread</span> mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">// 定义线程对象</span>         <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">// 定义Thread对象</span>         <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">// 定义Thread对象</span>         <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">// 定义Thread对象</span>         t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>         t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment">/*卖票：ticket = 5卖票：ticket = 4卖票：ticket = 3卖票：ticket = 2卖票：ticket = 1*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两种方法都可以实现线程安全</p><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><p>所谓死锁，就是两个线程都在等待对方先完成，造成程序的停滞，一般程序的死锁都是在程序运行时出现的。</p><p>Java多线程可以通过：</p><pre class="line-numbers language-none"><code class="language-none">synchronized关键字Java.util.concurrent包中的lock接口和ReentrantLock实现类这两种方式实现加锁。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="显示锁LOCK"><a href="#显示锁LOCK" class="headerlink" title="显示锁LOCK"></a>显示锁LOCK</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo08</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//显示锁  lock</span>        <span class="token comment">//同步代码块和同步方法都是隐式锁</span>        <span class="token class-name">Ticket</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Lock</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true表示公平锁  先到先得后面排队</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            aa<span class="token operator">:</span><span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    l<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//手动上锁</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在准备卖票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    count<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        l<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span> aa<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"出票成功,余票："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    l<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//手动解锁</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">/*正在准备卖票Thread-0出票成功,余票：9正在准备卖票Thread-1出票成功,余票：8正在准备卖票Thread-2出票成功,余票：7正在准备卖票Thread-0出票成功,余票：6正在准备卖票Thread-1出票成功,余票：5正在准备卖票Thread-2出票成功,余票：4正在准备卖票Thread-0出票成功,余票：3正在准备卖票Thread-1出票成功,余票：2正在准备卖票Thread-2出票成功,余票：1正在准备卖票Thread-0出票成功,余票：0正在准备卖票正在准备卖票Process finished with exit code 0*/</span><span class="token comment">//这里为什么后面会出两个正在买票呢  原因是因为再第一个线程进入之后会睡眠，另外两个线程已经进入while循环排队等着拿锁，此时的count&lt;0，会进入if语句，手动解锁，其他线程也就回拿到钥匙进入，当线程都执行完毕之后才会break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比：<br>   　1）Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；</p><p>　　2）Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。</p><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>一个可以存放多个线程的容器</p><h4 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h4><p> 一个线程池包括以下四个基本组成部分：</p><pre><code>    <pre class="line-numbers language-none"><code class="language-none">1、线程池管理器（ThreadPool）：用于创建并管理线程池，包括 创建线程池，销毁线程池，添加新任务；   2、工作线程（PoolWorker）：线程池中线程，在没有任务时处于等待状态，可以循环的执行任务；   3、任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等；   4、任务队列（taskQueue）：用于存放没有处理的任务。提供一种缓冲机制。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>（1）、降低系统资源消耗<br> （2）、提高系统响应速度，当有任务到达时，通过复用已存在的线程，无需等待新线程的创建便能立即执行；<br> （3）方便线程并发数的管控。因为线程若是无限制的创建，可能会导致内存占用过多而产生OOM，并且会造成cpu过度切换（cpu切换线程是有时间成本的（需要保持当前执行线程的现场，并恢复要执行线程的现场））。<br> （4）提供更强大的功能，延时定时线程池。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="缓存线程池（长度无限）"><a href="#缓存线程池（长度无限）" class="headerlink" title="缓存线程池（长度无限）"></a>缓存线程池（长度无限）</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">//缓存线程池(长度无限制)</span>        <span class="token comment">//任务加入后的执行流程</span>        <span class="token comment">//1.判断线程池是否存在空闲线程</span>        <span class="token comment">//2.存在则使用，不存在则创建线程放入线程池然后使用</span>        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建缓存线程的池</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"锄禾日当午"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"锄禾日当午"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"锄禾日当午"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"锄禾日当午"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/*pool-1-thread-2锄禾日当午pool-1-thread-1锄禾日当午pool-1-thread-3锄禾日当午pool-1-thread-3锄禾日当午*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="定长线程池（长度指定）"><a href="#定长线程池（长度指定）" class="headerlink" title="定长线程池（长度指定）"></a>定长线程池（长度指定）</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//定长线程池（长度指定）</span>        <span class="token comment">//1.判断线程池是否存在空闲线程</span>        <span class="token comment">//2.存在则使用</span>        <span class="token comment">//3.不存在空闲线程则判断线程池是否满了，不满则创建线程放入线程池然后使用</span>        <span class="token comment">//满了则等待</span>        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//指定线程数量</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"锄禾日当午"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"锄禾日当午"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"锄禾日当午"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/*pool-1-thread-1锄禾日当午pool-1-thread-2锄禾日当午pool-1-thread-1锄禾日当午*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="单线程线程池"><a href="#单线程线程池" class="headerlink" title="单线程线程池"></a>单线程线程池</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//单线程线程池</span>        <span class="token comment">//  1.判断线程池是否空闲</span>        <span class="token comment">//  2.空闲则使用，不空闲则等待空闲之后使用</span>        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"锄禾日当午"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"锄禾日当午"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"锄禾日当午"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//pool-1-thread-1锄禾日当午</span>        <span class="token comment">//pool-1-thread-1锄禾日当午</span>        <span class="token comment">//pool-1-thread-1锄禾日当午</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="周期性执行任务"><a href="#周期性执行任务" class="headerlink" title="周期性执行任务"></a>周期性执行任务</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">ScheduledExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//周期性执行任务</span>        <span class="token comment">//参数1. 任务</span>        <span class="token comment">//参数2. 延迟时长数字（第一次执行在什么时间以后）</span>        <span class="token comment">//参数3. 周期时长数字（每隔多久执行一次）</span>        <span class="token comment">//参数4. 时长数字单位</span>        service<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"锄禾日当午"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//五秒开始执行，每隔一秒执行一次</span>    <span class="token punctuation">}</span><span class="token comment">/*锄禾日当午    5s后执行的第一个  后续一秒执行一个锄禾日当午锄禾日当午锄禾日当午锄禾日当午锄禾日当午*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql基础</title>
      <link href="/2021/02/12/mysql-ji-chu/"/>
      <url>/2021/02/12/mysql-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="一：登录"><a href="#一：登录" class="headerlink" title="一：登录"></a>一：登录</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回车之后输入密码就可以登录mysql，没密码直接回车</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就表示进入。。</p><h2 id="二：关于库的操作"><a href="#二：关于库的操作" class="headerlink" title="二：关于库的操作:"></a>二：关于库的操作:</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;show databases;                                             --查看所有库mysql&gt;create database 库名（自己起名字） default charset=utf8mb4;     --创建数据库mysql&gt;drop database 库名;                                          --删除库mysql&gt;use 库名;                                                    --进入库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>进入库后就可以开始操作啦，干他丫的！</p><h4 id="1-关于表的操作"><a href="#1-关于表的操作" class="headerlink" title="1.关于表的操作:"></a>1.关于表的操作:</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;show tables;                 --查看当前库中所有表mysql&gt;drop table 表名;              --删除表amysql&gt;desc 表名;       mysql&gt;show create table 表名;mysql&gt;show create table 表名\G;     --这三个都是查看表结构,具体怎么查看的，自己演示一遍就知道了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中如果删不掉，<a href="https://blog.csdn.net/dongkai_it/article/details/46494351">请参照这个</a>。</p><h4 id="2-创建表："><a href="#2-创建表：" class="headerlink" title="2.创建表："></a>2.创建表：</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;create table 表名(字段名1 类型,字段名2 类型...)engine=innodb default charset=utf8mb4;  --这是基本格式                                                --  表引擎  这个好用   默认编译语言mysql&gt;create table if not exists 表名(字段名1 类型,字段名2 类型...)engine=innodb default charset=utf8mb4;                                                                                         --如果没有就创建<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建表一般都有主键,暂且命名为id吧</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;create table 表名(    id int not null primary key auto_increment,    ...)engine=innodb default charset=utf8mb4;                              --id 整型 不为空 主键 自增<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-操作表"><a href="#3-操作表" class="headerlink" title="3.操作表:"></a>3.操作表:</h4><p>数据库最基本的增删查改：</p><h6 id="1-插入数据"><a href="#1-插入数据" class="headerlink" title="(1)插入数据"></a>(1)插入数据</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;insert into 表名 values(值1,值2,值3);          --插入数据  这种格式需要添加全部，一行有几个值就添加几个值，不能                                                        少，可以添加null，但是有的参数设置了不能为空，添加null就会报错mysql&gt;insert into 表名(参数1,参数2) values(值1，值2),(值3,值4);  --添加几个参数，传几个值.可以一次添加多行数据，逗号隔开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="2-删除数据"><a href="#2-删除数据" class="headerlink" title="(2)删除数据"></a>(2)删除数据</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;delete from 表名 where 条件;                 --条件比如说  字段=某个值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="3-修改数据"><a href="#3-修改数据" class="headerlink" title="(3)修改数据"></a>(3)修改数据</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;update 表名 set 字段=值,字段=值 where 条件;     --前面字段就是你要存的数值，条件是为了找到目标修<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="4-查询数据"><a href="#4-查询数据" class="headerlink" title="(4)查询数据"></a>(4)查询数据</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select * from 表名 where 条件;                --查询所有字段mysql&gt;select 字段1,字段2,字段3 from 表名 where 条件;  --查询字段123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="5-去重操作-distinct"><a href="#5-去重操作-distinct" class="headerlink" title="(5)去重操作 distinct"></a>(5)去重操作 distinct</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select distinct 字段名 from 表名 where 条件;        --意味着查看该字段并且行数中有相同的只保留一个<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="6-限制结果-limit"><a href="#6-限制结果-limit" class="headerlink" title="(6)限制结果 limit"></a>(6)限制结果 limit</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select * from 表名 limit 3,4;                     --意思是跳过前三行，查看下面四行mysql&gt;select * from 表名 limit 4 offset 3;              --与上面结果一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="7-排序-order-by"><a href="#7-排序-order-by" class="headerlink" title="(7)排序 order by"></a>(7)排序 order by</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select * from 表名 where 条件 order by 字段名;       --查找出来的内容根据指定字段进行排序,默认升序mysql&gt;select * from 表名 where 条件 order by 字段1,字段2;  --如果字段一中的值排序时相同，这两个相同的则会按照字段二排序mysql&gt;select * from 表名 where 条件 order by 字段名 desc;  --降序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="8-模糊查询-like"><a href="#8-模糊查询-like" class="headerlink" title="(8)模糊查询 like"></a>(8)模糊查询 like</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;select * from 表名 where 字段名 like '%a';          --查找该字段的值中最后一个字符为a的数据mysql&gt;select * from 表名 where 字段名 like '%a';          --查找该字段的值中第一个字符为a的数据mysql&gt;select * from 表名 where 字段名 like '%a%';         --查找该字段的值中有字符a的数据 当然查数字，查汉字都可以滴mysql&gt;select * from 表名 where 字段名 like 'a_';          --查找a后面跟一个字符的值，一个_代表一个字符，可以与%混合使用 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="8-分组-group-by"><a href="#8-分组-group-by" class="headerlink" title="(8)分组 group by"></a>(8)分组 group by</h6><p>group by 语句根据一个或多个列对结果集进行分组 一般情况下，是用与数据的统计或计算，配合聚合函数使用</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(*) from 表名；                --统计行数select 字段名,count(字段名) from xzk_username where 条件 group by 字段名;            --用了函数一般就得用分组，除了函数以外的字段名都要写，有多少写多少，不能少!!!!!            group by 后面还能跟上 having 条件  作为分组的条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/03/09/9dIoM7i1GHry6JS.png" alt="image-20210309235539818"></p><h4 id="4-快捷键"><a href="#4-快捷键" class="headerlink" title="4.快捷键"></a>4.快捷键</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">\G    格式化输出（竖立显示）\s     查看服务器端信息\c     结束命令输入操作\q    退出当前sql命令行模式\h    查看帮助                                      --输个  -h   一堆堆快捷键   自己看!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-字段操作"><a href="#5-字段操作" class="headerlink" title="5.字段操作"></a>5.字段操作</h4><p>添加字段</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;alter table 表名 add 字段名 参数类型;                 --简单添加，默认添加在最后mysql&gt;alter table 表名 add 字段名 参数类型 after 字段名;     --在指定的字段后面添加mysql&gt;alter table 表名 add 字段名 参数类型 first;           --在最前面添加字段,不能一次添加多个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>删除字段</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;alter table 表名 drop 字段名;                        --一次删一个，就怕你乱搞                   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改字段</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt;alter table change 修改前的字段名 修改后的字段名 修改后的参数类型;              --修改字段名和参数类型mysql&gt;alter table modify 字段名 修改后的类型                                     --修改参数类型,不能修改字段名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>表的字段约束</p><p><img src="https://i.loli.net/2021/03/09/rubOUL3mTEGQxzs.png" alt="img"></p><h4 id="6-函数"><a href="#6-函数" class="headerlink" title="6.函数"></a>6.函数</h4><p>函数有一个偶尔用的的计算时间</p><p><img src="https://i.loli.net/2021/03/09/71jtY5WnTMVN93r.png" alt="img"></p><p><img src="https://i.loli.net/2021/03/10/d96aGpWIiq51erQ.png" alt="img"></p><p><img src="https://i.loli.net/2021/03/10/gzCcKRdWUMDG3ks.png" alt="img"></p><h4 id="7-数据库的导入导出"><a href="#7-数据库的导入导出" class="headerlink" title="7.数据库的导入导出"></a>7.数据库的导入导出</h4><h6 id="（1）数据库的数据导出"><a href="#（1）数据库的数据导出" class="headerlink" title="（1）数据库的数据导出"></a>（1）数据库的数据导出</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 不要进入mysql，然后输入以下命令 导出某个库中的数据mysqldump -u root -p 库名 &gt; C:\Desktop\code\tlxy.sql       -- 后面跟上路径加上存放的 .sql文件                                                          -- 请一定自己设置路径,因为没有设置  反正我没找到在哪<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="2-数据库的表导出"><a href="#2-数据库的表导出" class="headerlink" title="(2) 数据库的表导出"></a>(2) 数据库的表导出</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 不要进入mysql，然后输入以下命令 导出某个库中指定的表的数据mysqldump -u root -p 库名 表名 &gt; C;\Desktop\code\tlxy-tts.sql     -- 后面也是跟上导出路径加 .sql 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="3-数据库导入"><a href="#3-数据库导入" class="headerlink" title="(3)数据库导入"></a>(3)数据库导入</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 在新的数据库中 导入备份的数据，导入导出的sql文件mysql -u root -p ops &lt; ./tlxy.sql# 把导出的表sql 导入数据库mysql -u root -p ops &lt; ./tlxy-tts.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-权限和管理"><a href="#8-权限和管理" class="headerlink" title="8.权限和管理"></a>8.权限和管理</h4><p>mysql中的root用户是数据库中权限最高的用户，千万不要用在项目中。 可以给不同的用户，或者项目，创建不同的mysql用户，并适当的授权，完成数据库的相关操作 这样就一定程度上保证了数据库的安全</p><h6 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">grant 授权的操作 on 授权的库.授权的表 to 账户@登录地址 identified by ‘密码’;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 在mysql中 创建一个 zhangsan 用户，授权可以对tlxy这个库中的所有表 进行 添加和查询 的权限grant select,insert on tlxy.* to zhangsan@'%' identified by '123456';-- 用户 lisi。密码 123456 可以对tlxy库中的所有表有 所有操作权限grant all on tlxy.* to lisi@'%' identified by '123456';-- 删除用户drop user 'lisi'@'%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-表联结"><a href="#9-表联结" class="headerlink" title="9.表联结"></a>9.表联结</h4><p>关键词：join on</p><p>外联结: left join on</p><p>​             right join on</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/2021/02/03/ji-he/"/>
      <url>/2021/02/03/ji-he/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/06/24/Gtnvedo6XLY4yUQ.png" alt="image-20210624151232589"></p><h1 id="Collection-接口（重点）"><a href="#Collection-接口（重点）" class="headerlink" title="Collection 接口（重点）"></a>Collection 接口（重点）</h1><p>Collection 接口是在整个 Java 类集中保存单值的最大操作父接口，里面每次操作的时候都只能保存一个对象的数据。 此接口定义在 java.util 包中。</p><p><img src="https://i.loli.net/2021/06/24/ntXYc2i1CyEMQOK.png" alt="image-20210624151546716"></p><h1 id="List-接口"><a href="#List-接口" class="headerlink" title="List 接口"></a>List 接口</h1><p>在整个集合中 List 是 Collection 的子接口，里面的所有内容都是允许重复的。</p><p>List 子接口的定义:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/06/24/QYmTBOHlMPwItVe.png" alt="image-20210624151713398"></p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList 是 List 接口的子类，此类的定义如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Vector-类和-ArrayList-类的区别"><a href="#Vector-类和-ArrayList-类的区别" class="headerlink" title="Vector 类和 ArrayList 类的区别"></a>Vector 类和 ArrayList 类的区别</h2><p>先说说vector   与 ArrayList 一样，Vector 本身也属于 List 接口的子类，但是比ArrayList早出来</p><p><img src="https://i.loli.net/2021/06/24/m3wS6gY2jHWfxJv.png" alt="image-20210624152311446"></p><h2 id="链表操作类：LinkedList"><a href="#链表操作类：LinkedList" class="headerlink" title="链表操作类：LinkedList"></a>链表操作类：LinkedList</h2><pre class="line-numbers language-none"><code class="language-none">public class LinkedList&lt;E&gt; extends AbstractSequentialList&lt;E&gt;implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, Serializable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此类继承了 AbstractList，所以是 List 的子类。但是此类也是 Queue 接口的子类，Queue 接口定义了如下的方法：</p><p><img src="https://i.loli.net/2021/06/24/M8hyVKenAQumtIB.png" alt="image-20210624152536648"></p><h4 id="ArrayList与LinkedList区别"><a href="#ArrayList与LinkedList区别" class="headerlink" title="ArrayList与LinkedList区别"></a>ArrayList与LinkedList区别</h4><p>ArrayList实现了List接口,它是以数组的方式来实现的,数组的特性是可以使用索引的方式来快速定位对象的位置,因此对于快速的随机取得对象的需求,使用ArrayList实现执行效率上会比较好. </p><p>LinkedList是采用链表的方式来实现List接口的,它本身有自己特定的方法，如: addFirst(),addLast(),getFirst(),removeFirst()等. 由于是采用链表实现的,因此在进行insert和remove动作时在效率上要比ArrayList要好得多!适合用来实现Stack(堆栈)与Queue(队列),前者先进后出，后者是先进先出.</p><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><p>Set 接口也是 Collection 的子接口，与 List 接口最大的不同在于，Set 接口里面的内容是不允许重复的。 Set 接口并没有对 Collection 接口进行扩充，基本上还是与 Collection 接口保持一致。因为此接口没有 List 接口中定义 的 get(int index)方法，所以无法使用循环进行输出。 那么在此接口中有两个常用的子类：HashSet、TreeSet</p><h2 id="散列存放：HashSet"><a href="#散列存放：HashSet" class="headerlink" title="散列存放：HashSet"></a>散列存放：HashSet</h2><p>HashSet 属于散列的存放类集，里面的内容是无序存放的。</p><h4 id="HashSet集合存储数据的结构（哈希表）"><a href="#HashSet集合存储数据的结构（哈希表）" class="headerlink" title="HashSet集合存储数据的结构（哈希表）"></a>HashSet集合存储数据的结构（哈希表）</h4><p>哈希表：而JDK1.8中，哈希表存储采用数组+链表+红黑树实现，当链表长度超过阈值（8）时，将链表转 换为红黑树，这样大大减少了查找时间。</p><p>简单的来说，哈希表是由数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的</p><h5 id="简要理解红黑树："><a href="#简要理解红黑树：" class="headerlink" title="简要理解红黑树："></a>简要理解红黑树：</h5><p><strong>红黑树的特性</strong>:<br><strong>（1）每个节点或者是黑色，或者是红色。</strong><br><strong>（2）根节点是黑色。</strong><br><strong>（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]</strong><br><strong>（4）如果一个节点是红色的，则它的子节点必须是黑色的。</strong><br><strong>（5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</strong></p><h2 id="排序的子类：TreeSet"><a href="#排序的子类：TreeSet" class="headerlink" title="排序的子类：TreeSet"></a>排序的子类：TreeSet</h2><p>与 HashSet 不同的是，TreeSet 本身属于排序的子类，此类的定义如下</p><pre class="line-numbers language-none"><code class="language-none">public class TreeSet&lt;E&gt; extends AbstractSet&lt;E&gt;implements NavigableSet&lt;E&gt;, Cloneable, Serializable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果存储的是类，该怎么进行排序呢</p><p>如果现在要是想进行排序的话，则必须在 类中实现 Comparable 接口,还需要指定某一属性或多个属性惊醒排序，顺序会因为指定的第一个属性相等时才会对后续指定的属性进行排序。否则会报如下错</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Exception</span> in thread <span class="token string">"main"</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassCastException</span><span class="token operator">:</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>lamp<span class="token punctuation">.</span>listdemo<span class="token punctuation">.</span>treesetdemo02<span class="token punctuation">.</span></span>Person</span> cannot be cast <span class="token keyword">to</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Comparable</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>TreeMap</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>TreeSet</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Unknown</span> <span class="token class-name">Source</span><span class="token punctuation">)</span>at<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>lamp<span class="token punctuation">.</span>listdemo<span class="token punctuation">.</span>treesetdemo02<span class="token punctuation">.</span></span>TreeSetPersonDemo01</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">TreeSetPersonDemo01</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Person</span> per<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&gt;</span> per<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&lt;</span> per<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> treeSet底层是基于TreeMap来实现的,所以底层结构也是红黑树,因为他和HashSet不同的是不需要重写hashCode()和equals()方法,因为它去重是依靠比较器来去重,因为结构是红黑树。</p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>​    关于 TreeSet 的排序实现，如果是集合中对象是自定义的或者说其他系统定义的类没有实现 Comparable 接口，则不能实现 TreeSet 的排序，会报类型转换（转向 Comparable 接口）错误。 </p><p>​    换句话说要添加到 TreeSet 集合中的对象的类型必须实现了 Comparable 接口。 </p><p>​    不过 TreeSet 的集合因为借用了 Comparable 接口，同时可以去除重复值，而 HashSet 虽然是 Set 接口子类，但是对于没有复写 Object 的 equals 和 hashCode 方法的对象，加入了 HashSet 集合中也是不能去掉重复值的。</p><h1 id="迭代器（Iterator）"><a href="#迭代器（Iterator）" class="headerlink" title="迭代器（Iterator）"></a>迭代器（Iterator）</h1><p>输出的时候一定要记住以下的原则：只要是碰到了集合，则输出的时候想都不想就使用 Iterator 进行输出。</p><p>Iterator 属于迭代输出，基本的操作原理：是不断的判断是否有下一个元素，有的话，则直接输出。</p><p>此接口定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要想使用此接口，则必须使用 Collection 接口，在 Collection 接口中规定了一个 iterator()方法，可以用于为 Iterator 接口进行实例化操作。</p><p>​    此接口规定了以下的三个方法：</p><p><img src="https://i.loli.net/2021/06/24/Z9aYcqxbIslKSPU.png" alt="image-20210624154526491"></p><p>通过 Collection 接口为其进行实例化之后，一定要记住，Iterator 中的操作指针是在第一条元素之上，当调用 next()方 法的时候，获取当前指针指向的值并向下移动，使用 hasNext()可以检查序列中是否还有元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IteratorDemo01</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 判断是否有下一个元素</span><span class="token class-name">String</span> str <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取出当前元素</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：但是在使用 Iterator 输出的时候有一点必须注意，在进行迭代输出的时候如果要想删除当前元素，则只能使用 Iterator 接口中的 remove()方法，而不能使用集合中的 remove()方法。否则将出现未知的错误。</p><pre class="line-numbers language-none"><code class="language-none">public class IteratorDemo02 {public static void main(String[] args) {Collection&lt;String&gt; all = new ArrayList&lt;String&gt;();all.add("A");all.add("B");all.add("C");all.add("D");all.add("E");Iterator&lt;String&gt; iter = all.iterator();while (iter.hasNext()) {// 判断是否有下一个元素String str = iter.next(); // 取出当前元素if (str.equals("C")) {//all.remove(str); // 错误的，调用了集合中的删除iter.remove();  //正确} else {System.out.print(str + "、");}}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Iterator 接口本身可以完成输出的功能，但是此接口只能进行由前向后的单向输出。如果要想进行双向输出，则必须 使用其子接口 —— ListIterator。</p><p>使用 ListIterator 输出:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListIteratorDemo01</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"从前向后输出："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n从后向前输出："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注意：此处有一点需要注意的是，如果要想进行由后向前的输出，则首先必须先进行由前向后的输出。"><a href="#注意：此处有一点需要注意的是，如果要想进行由后向前的输出，则首先必须先进行由前向后的输出。" class="headerlink" title="注意：此处有一点需要注意的是，如果要想进行由后向前的输出，则首先必须先进行由前向后的输出。"></a>注意：此处有一点需要注意的是，如果要想进行由后向前的输出，则首先必须先进行由前向后的输出。</h5><h1 id="Map-接口"><a href="#Map-接口" class="headerlink" title="Map 接口"></a>Map 接口</h1><p>Map 接口，里面的所有内容都按照 keyvalue 的形式保存，也称为二元偶对象。</p><pre class="line-numbers language-none"><code class="language-none">public interface Map&lt;K,V&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/06/24/fG4WL6McTQlN3Cq.png" alt="image-20210624160602969"></p><p>Map 本身是一个接口，所以一般会使用以下的几个子类：HashMap、TreeMap、Hashtable</p><p>HashMap 本身是属于无序存放的。</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>定义如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapDemo01</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"张三A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"张三B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新的内容替换掉旧的内容</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> val <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//null</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到全部的key</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 得到全部的value</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> iter1 <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iter2 <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"全部的key："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iter1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>iter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1、2、3</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n全部的value："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iter2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>iter2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"、"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//张三B、李四、王五</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序的子类：TreeMap"><a href="#排序的子类：TreeMap" class="headerlink" title="排序的子类：TreeMap"></a>排序的子类：TreeMap</h2><pre class="line-numbers language-none"><code class="language-none">public static void main(String[] args) {Map&lt;String, String&gt; map = new TreeMap&lt;String, String&gt;();map.put("ZS", "张三");map.put("LS", "李四");map.put("WW", "王五");map.put("ZL", "赵六");map.put("SQ", "孙七");Set&lt;String&gt; set = map.keySet(); // 得到全部的keyIterator&lt;String&gt; iter = set.iterator();while (iter.hasNext()) {String i = iter.next(); // 得到keySystem.out.println(i + " --:&gt; " + map.get(i));}}//输出的值    LS --:&gt; 李四SQ --:&gt; 孙七WW --:&gt; 王五ZL --:&gt; 赵六ZS --:&gt; 张三<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-Iterator-输出-Map-接口"><a href="#使用-Iterator-输出-Map-接口" class="headerlink" title="使用 Iterator 输出 Map 接口"></a>使用 Iterator 输出 Map 接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ZS"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"LS"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"WW"</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ZL"</span><span class="token punctuation">,</span> <span class="token string">"赵六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"SQ"</span><span class="token punctuation">,</span> <span class="token string">"孙七"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 变为Set实例</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> me <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>me<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" --&gt; "</span> <span class="token operator">+</span> me<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Map 集合中每一个元素都是 Map.Entry 的实例，只有通过 Map.Entry 才能进行 key 和 value 的分离操作。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 1、 类集就是一个动态的对象数组，可以向集合中加入任意多的内容。 </p><p>2、 List 接口中是允许有重复元素的，Set 接口中是不允许有重复元素。</p><p> 3、 所有的重复元素依靠 hashCode()和 equals 进行区分 </p><p>4、 List 接口的常用子类：ArrayList、Vector </p><p>5、 Set 接口的常用子类：HashSet、TreeSet </p><p>6、 TreeSet 是可以排序，一个类的对象依靠 Comparable 接口排序 </p><p>7、 Map 接口中允许存放一对内容，key  value </p><p>8、 Map 接口的子类：HashMap、Hashtable、TreeMap 9、 Map 使用 Iterator 输出的详细步骤</p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p><img src="https://i.loli.net/2021/06/24/udcq9ibXpVaCIZG.png" alt="image-20210624165221564"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Idea常用快捷键</title>
      <link href="/2021/01/10/idea-chang-yong-kuai-jie-jian/"/>
      <url>/2021/01/10/idea-chang-yong-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul><li><p>提示与代码生成部分</p><pre class="line-numbers language-none"><code class="language-none">Alt + Enter  IDEA 根据光标所在问题，提供快速修复选择<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Ctrl + Alt + T 对选中的代码弹出环绕选项弹出层(try，if等语句包裹)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Alt + Insert 代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Ctrl + O 选择可重写的方法<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Ctrl + I 选择可实现的方法<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Ctrl + / 注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>选择/移动/复制代码:</p><pre class="line-numbers language-none"><code class="language-none">Ctrl + W 递进式选择代码块<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ctrl+Shift+w   递进式取消选择代码块<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Ctrl + D 复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Ctrl+Shift+↑或↓ : 移动当前行或代码结构<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Ctrl + Y 删除光标所在行 或 删除选中的行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Ctrl + X 剪切光标所在行 或 剪切选择内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>代码优化</p><pre class="line-numbers language-none"><code class="language-none">Ctrl + Alt + O 优化导入的类，可以对当前文件和整个包目录使用<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Ctrl + Alt + L 格式化代码，可以对当前文件和整个包目录使用<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查找与替换</p><pre class="line-numbers language-none"><code class="language-none">Ctrl + F 在当前文件进行文本查找<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Ctrl + Shift + F 根据输入内容查找整个项目 或 指定目录内文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Ctrl + R 在当前文件进行文本替换<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Ctrl + Shift + R 根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>阅读代码部分</p><pre class="line-numbers language-none"><code class="language-none">Ctrl + F12 弹出当前文件结构层(类的方法属性等)，可以在弹出的层上直接输入，进行筛选<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Ctrl + Q 光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="快捷键大全"><a href="#快捷键大全" class="headerlink" title="快捷键大全"></a>快捷键大全</h2><h3 id="1、Ctrl相关"><a href="#1、Ctrl相关" class="headerlink" title="1、Ctrl相关"></a>1、Ctrl相关</h3><pre class="line-numbers language-none"><code class="language-none">Ctrl + F 在当前文件进行文本查找 （必备）Ctrl + R 在当前文件进行文本替换 （必备）Ctrl + Z 撤销 （必备）Ctrl + Y 删除光标所在行 或 删除选中的行 （必备）Ctrl + X 剪切光标所在行 或 剪切选择内容Ctrl + C 复制光标所在行 或 复制选择内容Ctrl + D 复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备）Ctrl + W 递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 （必备）Ctrl + E 显示最近打开的文件记录列表Ctrl + N 根据输入的 类名 查找类文件Ctrl + G 在当前文件跳转到指定行处Ctrl + J 插入自定义动态代码模板Ctrl + P 方法参数提示显示Ctrl + Q 光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容Ctrl + U 前往当前光标所在的方法的父类的方法 / 接口定义Ctrl + B 进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击Ctrl + K 版本控制提交项目，需要此项目有加入到版本控制才可用Ctrl + T 版本控制更新项目，需要此项目有加入到版本控制才可用Ctrl + H 显示当前类的层次结构Ctrl + O 选择可重写的方法Ctrl + I 选择可继承的方法Ctrl + + 展开代码Ctrl + - 折叠代码Ctrl + / 注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）Ctrl + [ 移动光标到当前所在代码的花括号开始位置Ctrl + ] 移动光标到当前所在代码的花括号结束位置Ctrl + F1 在光标所在的错误代码处显示错误信息Ctrl + F3 调转到所选中的词的下一个引用位置Ctrl + F4 关闭当前编辑文件Ctrl + F8 在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点Ctrl + F9 执行 Make Project 操作Ctrl + F11 选中文件 / 文件夹，使用助记符设定 / 取消书签Ctrl + F12 弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选Ctrl + Tab 编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口Ctrl + Enter 智能分隔行Ctrl + End 跳到文件尾Ctrl + Home 跳到文件头Ctrl + Space 基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 ALT+/（必备）Ctrl + Delete 删除光标后面的单词或是中文句Ctrl + BackSpace 删除光标前面的单词或是中文句Ctrl + 1,2,3...9 定位到对应数值的书签位置Ctrl + 左键单击 在打开的文件标题上，弹出该文件路径Ctrl + 光标定位 按 Ctrl 不要松开，会显示光标所在的类信息摘要Ctrl + 左方向键 光标跳转到当前单词 / 中文句的左侧开头位置Ctrl + 右方向键 光标跳转到当前单词 / 中文句的右侧开头位置Ctrl + 前方向键 等效于鼠标滚轮向前效果Ctrl + 后方向键 等效于鼠标滚轮向后效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、Alt相关"><a href="#2、Alt相关" class="headerlink" title="2、Alt相关"></a>2、Alt相关</h3><pre class="line-numbers language-none"><code class="language-none">Alt + ` 显示版本控制常用操作菜单弹出层Alt + Q 弹出一个提示，显示当前类的声明 / 上下文信息Alt + F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择Alt + F2 对于前面页面，显示各类浏览器打开目标选择弹出层Alt + F3 选中文本，逐个往下查找相同文本，并高亮显示Alt + F7 查找光标所在的方法 / 变量 / 类被调用的地方Alt + F8 在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果Alt + Home 定位 / 显示到当前文件的 Navigation BarAlt + Enter IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）Alt + Insert 代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等（必备）Alt + 左方向键 按左方向切换当前已打开的文件视图Alt + 右方向键 按右方向切换当前已打开的文件视图Alt + 前方向键 当前光标跳转到当前文件的前一个方法名位置Alt + 后方向键 当前光标跳转到当前文件的后一个方法名位置Alt + 1,2,3...9 显示对应数值的选项卡，其中 1 是 Project 用得最多<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、Shift相关"><a href="#3、Shift相关" class="headerlink" title="3、Shift相关"></a>3、Shift相关</h3><pre class="line-numbers language-none"><code class="language-none">Shift + F1 如果有外部文档可以连接外部文档Shift + F2 跳转到上一个高亮错误 或 警告位置Shift + F3 在查找模式下，查找匹配上一个Shift + F4 对当前打开的文件，使用新Windows窗口打开，旧窗口保留Shift + F6 对文件 / 文件夹 重命名Shift + F7 在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法Shift + F8 在 Debug 模式下，跳出，表现出来的效果跟 F9 一样Shift + F9 等效于点击工具栏的 Debug 按钮Shift + F10 等效于点击工具栏的 Run 按钮Shift + F11 弹出书签显示层Shift + Tab 取消缩进Shift + ESC 隐藏当前 或 最后一个激活的工具窗口Shift + End 选中光标到当前行尾位置Shift + Home 选中光标到当前行头位置Shift + Enter 开始新一行。光标所在行下空出一行，光标定位到新行位置Shift + 左键单击 在打开的文件名上按此快捷键，可以关闭当前打开文件Shift + 滚轮前后滚动 当前文件的横向滚动轴滚动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、Ctrl-Alt相关"><a href="#4、Ctrl-Alt相关" class="headerlink" title="4、Ctrl + Alt相关"></a>4、Ctrl + Alt相关</h3><pre class="line-numbers language-none"><code class="language-none">Ctrl + Alt + L 格式化代码，可以对当前文件和整个包目录使用 （必备）Ctrl + Alt + O 优化导入的类，可以对当前文件和整个包目录使用 （必备）Ctrl + Alt + I 光标所在行 或 选中部分进行自动代码缩进，有点类似格式化Ctrl + Alt + T 对选中的代码弹出环绕选项弹出层Ctrl + Alt + J 弹出模板选择窗口，将选定的代码加入动态模板中Ctrl + Alt + H 调用层次Ctrl + Alt + B 在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口Ctrl + Alt + V 快速引进变量Ctrl + Alt + Y 同步、刷新Ctrl + Alt + S 打开 IntelliJ IDEA 系统设置Ctrl + Alt + F7 显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来Ctrl + Alt + F11 切换全屏模式Ctrl + Alt + Enter 光标所在行上空出一行，光标定位到新行Ctrl + Alt + Home 弹出跟当前文件有关联的文件弹出层Ctrl + Alt + Space 类名自动完成Ctrl + Alt + 左方向键 退回到上一个操作的地方 （必备）Ctrl + Alt + 右方向键 前进到上一个操作的地方 （必备）Ctrl + Alt + 前方向键 在查找模式下，跳到上个查找的文件Ctrl + Alt + 后方向键 在查找模式下，跳到下个查找的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、Ctrl-Shift相关"><a href="#5、Ctrl-Shift相关" class="headerlink" title="5、Ctrl + Shift相关"></a>5、Ctrl + Shift相关</h3><pre class="line-numbers language-none"><code class="language-none">Ctrl + Shift + F 根据输入内容查找整个项目 或 指定目录内文件 （必备）Ctrl + Shift + R 根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 （必备）Ctrl + Shift + J 自动将下一行合并到当前行末尾 （必备）Ctrl + Shift + Z 取消撤销 （必备）Ctrl + Shift + W 递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）Ctrl + Shift + N 通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）Ctrl + Shift + U 对选中的代码进行大 / 小写轮流转换 （必备）Ctrl + Shift + T 对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择Ctrl + Shift + C 复制当前文件磁盘路径到剪贴板Ctrl + Shift + V 弹出缓存的最近拷贝的内容管理器弹出层Ctrl + Shift + E 显示最近修改的文件列表的弹出层Ctrl + Shift + H 显示方法层次结构Ctrl + Shift + B 跳转到类型声明处Ctrl + Shift + I 快速查看光标所在的方法 或 类的定义Ctrl + Shift + A 查找动作 / 设置Ctrl + Shift + / 代码块注释 （必备）Ctrl + Shift + [ 选中从光标所在位置到它的顶部中括号位置Ctrl + Shift + ] 选中从光标所在位置到它的底部中括号位置Ctrl + Shift + + 展开所有代码Ctrl + Shift + - 折叠所有代码Ctrl + Shift + F7 高亮显示所有该选中文本，按Esc高亮消失Ctrl + Shift + F8 在 Debug 模式下，指定断点进入条件Ctrl + Shift + F9 编译选中的文件 / 包 / ModuleCtrl + Shift + F12 编辑器最大化Ctrl + Shift + Space 智能代码提示Ctrl + Shift + Enter 自动结束代码，行末自动添加分号 （必备）Ctrl + Shift + Backspace 退回到上次修改的地方Ctrl + Shift + 1,2,3...9 快速添加指定数值的书签Ctrl + Shift + 左键单击 把光标放在某个类变量上，按此快捷键可以直接定位到该类中 （必备）Ctrl + Shift + 左方向键 在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句Ctrl + Shift + 右方向键 在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句Ctrl + Shift + 左方向键 在光标焦点是在工具选项卡上，缩小选项卡区域Ctrl + Shift + 右方向键 在光标焦点是在工具选项卡上，扩大选项卡区域Ctrl + Shift + 前方向键 光标放在方法名上，将方法移动到上一个方法前面，调整方法排序Ctrl + Shift + 后方向键 光标放在方法名上，将方法移动到下一个方法前面，调整方法排序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、Alt-Shift相关"><a href="#6、Alt-Shift相关" class="headerlink" title="6、Alt + Shift相关"></a>6、Alt + Shift相关</h3><pre class="line-numbers language-none"><code class="language-none">Alt + Shift + N 选择 / 添加 taskAlt + Shift + F 显示添加到收藏夹弹出层 / 添加到收藏夹Alt + Shift + C 查看最近操作项目的变化情况列表Alt + Shift + I 查看项目当前文件Alt + Shift + F7 在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入Alt + Shift + F9 弹出 Debug 的可选择菜单Alt + Shift + F10 弹出 Run 的可选择菜单Alt + Shift + 左键双击 选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句Alt + Shift + 前方向键 移动光标所在行向上移动Alt + Shift + 后方向键 移动光标所在行向下移动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、其他"><a href="#7、其他" class="headerlink" title="7、其他"></a>7、其他</h3><pre class="line-numbers language-none"><code class="language-none">F2 跳转到下一个高亮错误 或 警告位置 （必备）F3 在查找模式下，定位到下一个匹配处F4 编辑源F7 在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中F8 在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内F9 在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上F11 添加书签F12 回到前一个工具窗口Tab 缩进ESC 从工具窗口进入代码文件窗口Ctrl + Shift + Alt + V 无格式黏贴Ctrl + Shift + Alt + N 前往指定的变量 / 方法Ctrl + Shift + Alt + S 打开当前项目设置Ctrl + Shift + Alt + C 复制参考信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
